/*
 * Copyright 2025 frans.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.commandStation.marklin.parser;

import jcs.commandStation.entities.MeasurementBean;
import jcs.commandStation.marklin.cs.can.CanMessage;
import jcs.commandStation.marklin.cs.can.device.MeasuringChannel;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 *
 * @author frans
 */
public class SystemStatusMessageTest {

  public SystemStatusMessageTest() {
  }

  @BeforeEach
  public void setUp() {
  }

  @AfterEach
  public void tearDown() {
  }

  //Example
  //0x00 0x00 0x47 0x11 0x06  0x43 0x53 0x32 0x08 0x0B 0x01 0x00 0x00
 //Abfrage des Messwertes Kanalnummer 1
//00014711 8 43 53 32 08 0B 01 00 03
  
  private CanMessage getSystemStatusMessageIndex1() {
    CanMessage sysStat = CanMessage.parse("0x00 0x3a 0x37 0x7f 0x05 0x63 0x73 0x45 0x8c 0x01 0x00 0x00 0x00");
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x01 0x08 0x01 0xfd 0x30 0xf0 0xe0 0xc0 0x00 0x00"));
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x02 0x08 0x02 0x28 0x02 0x40 0x02 0x58 0x02 0x94"));
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x03 0x08 0x4d 0x41 0x49 0x4e 0x00 0x30 0x2e 0x30"));
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x04 0x08 0x30 0x00 0x35 0x2e 0x35 0x30 0x00 0x41"));
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x05 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00"));
    sysStat.addResponse(CanMessage.parse("0x00 0x3b 0x03 0x26 0x06 0x63 0x73 0x45 0x8c 0x01 0x05 0x00 0x00"));

    return sysStat;

//  TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #TX: 0x00 0x3a 0x37 0x7f 0x05 0x63 0x73 0x45 0x8c 0x01 0x00 0x00 0x00
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 0: 0x00 0x3b 0x03 0x01 0x08 0x01 0xfd 0x30 0xf0 0xe0 0xc0 0x00 0x00
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 1: 0x00 0x3b 0x03 0x02 0x08 0x02 0x28 0x02 0x40 0x02 0x58 0x02 0x94
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 2: 0x00 0x3b 0x03 0x03 0x08 0x4d 0x41 0x49 0x4e 0x00 0x30 0x2e 0x30
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 3: 0x00 0x3b 0x03 0x04 0x08 0x30 0x00 0x35 0x2e 0x35 0x30 0x00 0x41
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 4: 0x00 0x3b 0x03 0x05 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
//TRACE	2025-05-03 23:04:11.593 [main] CSTCPConnection.sendCanMessage(): #RX 5: 0x00 0x3b 0x03 0x26 0x06 0x63 0x73 0x45 0x8c 0x01 0x05 0x00 0x00
  }

  @Test
  public void testParse() {
    System.out.println("parse");
    MeasuringChannel channel = null;
    CanMessage systemStatusmessage = null;
    MeasurementBean expResult = null;
    MeasurementBean result = SystemStatusMessage.parse(channel, systemStatusmessage);
    assertEquals(expResult, result);
    fail("The test case is a prototype.");
  }
}
