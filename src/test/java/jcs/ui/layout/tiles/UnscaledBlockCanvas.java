/*
 * Copyright 2024 FJA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui.layout.tiles;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.tinylog.Logger;

/**
 *
 * @author FJA
 */
public class UnscaledBlockCanvas extends javax.swing.JPanel implements PropertyChangeListener {

  private Tile block;

  private boolean showCenter;

  /**
   * Creates new form BlockCanvas
   */
  public UnscaledBlockCanvas() {
    initComponents();
  }

  public Tile getBlock() {
    return block;
  }

  public void setBlock(Tile block) {
    this.block = block;
  }

  public boolean isShowCenter() {
    return showCenter;
  }

  public void setShowCenter(boolean showCenter) {
    this.showCenter = showCenter;
  }

  @Override
  protected void paintComponent(Graphics g) {
    //super.paint(g);

    if (this.block != null) {
      //Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
      int w = this.getWidth();
      int h = this.getHeight();

      //Logger.trace("Screen: W: " + dim.width + " H: " + dim.height + " Panel w: " + w + " h: " + h + " Size W: " + this.getSize().width + " H: " + this.getSize().height);
      int x = w / 2;
      int y = h / 2 + 50;
      Point center = new Point(x, y);

      block.setCenter(center);

      Logger.trace("Center: (" + x + "," + y + ")");

      Graphics2D g2d = (Graphics2D) g;
      block.drawTile(g2d, true);

      if (this.showCenter) {
        block.drawBounds(g2d);
        block.drawCenterPoint(g2d, Color.red);
      }
    }

  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
    if ("repaintTile".equals(evt.getPropertyName())) {
      Tile tile = (Tile) evt.getNewValue();
      this.repaint(tile.getBounds());
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setMinimumSize(new java.awt.Dimension(1000, 1000));
    setPreferredSize(new java.awt.Dimension(1300, 1300));
    setLayout(null);
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
