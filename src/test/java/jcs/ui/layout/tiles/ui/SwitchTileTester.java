/*
 * Copyright 2025 Frans Jacobs.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui.layout.tiles.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jcs.entities.AccessoryBean.AccessoryValue;
import jcs.entities.TileBean;
import jcs.ui.layout.tiles.Switch;
import jcs.ui.layout.tiles.Tile;
import org.tinylog.Logger;

public class SwitchTileTester extends javax.swing.JFrame {

  private Tile switchEastR;
  private Tile switchSouthR;
  private Tile switchWestR;
  private Tile switchNorthR;

  private Tile switchEastL;
  private Tile switchSouthL;
  private Tile switchWestL;
  private Tile switchNorthL;

  /**
   * Creates new form TileTester
   *
   * @param title
   */
  public SwitchTileTester(String title) {
    super(title);
    initComponents();

    createTiles();

    this.setVisible(true);
  }

  private void createTiles() {

    switchEastR = new Switch(TileBean.Orientation.EAST, TileBean.Direction.RIGHT, 40, 40);
    switchEastR.setId("eastR");
    switchEastR.setTrackRouteColor(Color.MAGENTA);
    switchEastR.setRouteValue(AccessoryValue.GREEN);

    switchSouthR = new Switch(TileBean.Orientation.SOUTH, TileBean.Direction.RIGHT, 120, 40);
    switchSouthR.setId("southR");
    switchSouthR.setTrackRouteColor(Color.YELLOW);
    switchSouthR.setRouteValue(AccessoryValue.RED);

    switchWestR = new Switch(TileBean.Orientation.WEST, TileBean.Direction.RIGHT, 200, 40);
    switchWestR.setId("westR");
    switchWestR.setTrackRouteColor(Color.CYAN);

    switchNorthR = new Switch(TileBean.Orientation.NORTH, TileBean.Direction.RIGHT, 280, 40);
    switchNorthR.setId("northR");
    switchNorthR.setTrackRouteColor(Color.blue);
    switchNorthR.setRouteValue(AccessoryValue.GREEN);

//    switchEastR = new Switch(TileBean.Orientation.EAST, TileBean.Direction.RIGHT, 70, 60);
//    switchSouthR = new Switch(TileBean.Orientation.SOUTH, TileBean.Direction.RIGHT, 160, 60);
//    switchWestR = new Switch(TileBean.Orientation.WEST, TileBean.Direction.RIGHT, 250, 60);
//    switchNorthR = new Switch(TileBean.Orientation.NORTH, TileBean.Direction.RIGHT, 340, 60);
//    switchEastL = new Switch(TileBean.Orientation.EAST, TileBean.Direction.LEFT, 70, 110);
//    switchSouthL = new Switch(TileBean.Orientation.SOUTH, TileBean.Direction.LEFT, 160, 110);
//    switchWestL = new Switch(TileBean.Orientation.WEST, TileBean.Direction.LEFT, 250, 110);
//    switchNorthL = new Switch(TileBean.Orientation.NORTH, TileBean.Direction.LEFT, 340, 110);
    switchEastL = new Switch(TileBean.Orientation.EAST, TileBean.Direction.LEFT, 40, 120);
    switchEastL.setId("eastR");
    switchEastL.setTrackRouteColor(Color.MAGENTA);
    switchEastL.setRouteValue(AccessoryValue.GREEN);

    switchSouthL = new Switch(TileBean.Orientation.SOUTH, TileBean.Direction.LEFT, 120, 120);
    switchSouthL.setId("southR");
    switchSouthL.setTrackRouteColor(Color.YELLOW);
    switchSouthL.setRouteValue(AccessoryValue.RED);

    switchWestL = new Switch(TileBean.Orientation.WEST, TileBean.Direction.LEFT, 200, 120);
    switchWestL.setId("westR");
    switchWestL.setTrackRouteColor(Color.CYAN);

    switchNorthL = new Switch(TileBean.Orientation.NORTH, TileBean.Direction.LEFT, 280, 120);
    switchNorthL.setId("northR");
    switchNorthL.setTrackRouteColor(Color.blue);
    switchNorthL.setRouteValue(AccessoryValue.GREEN);

    dotGridCanvas.add(switchEastR);
    dotGridCanvas.add(switchSouthR);
    dotGridCanvas.add(switchWestR);
    dotGridCanvas.add(switchNorthR);

    dotGridCanvas.add(switchEastL);
    dotGridCanvas.add(switchSouthL);
    dotGridCanvas.add(switchWestL);
    dotGridCanvas.add(switchNorthL);

  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    toolbarPanel = new javax.swing.JPanel();
    toolBar = new javax.swing.JToolBar();
    eastTileBtn = new javax.swing.JToggleButton();
    southTileBtn = new javax.swing.JToggleButton();
    westTileBtn = new javax.swing.JToggleButton();
    northTileBtn = new javax.swing.JToggleButton();
    selectSouthTileBtn = new javax.swing.JToggleButton();
    drawCenterBtn = new javax.swing.JToggleButton();
    greenRedBtn = new javax.swing.JToggleButton();
    dotGridCanvas = new jcs.ui.layout.tiles.ui.DotGridCanvas();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
    flowLayout1.setAlignOnBaseline(true);
    toolbarPanel.setLayout(flowLayout1);

    toolBar.setRollover(true);

    eastTileBtn.setText("East");
    eastTileBtn.setFocusable(false);
    eastTileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    eastTileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    eastTileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        eastTileBtnActionPerformed(evt);
      }
    });
    toolBar.add(eastTileBtn);

    southTileBtn.setText("South");
    southTileBtn.setFocusable(false);
    southTileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    southTileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    southTileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        southTileBtnActionPerformed(evt);
      }
    });
    toolBar.add(southTileBtn);

    westTileBtn.setText("West");
    westTileBtn.setFocusable(false);
    westTileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    westTileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    westTileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        westTileBtnActionPerformed(evt);
      }
    });
    toolBar.add(westTileBtn);

    northTileBtn.setText("North");
    northTileBtn.setFocusable(false);
    northTileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    northTileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    northTileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        northTileBtnActionPerformed(evt);
      }
    });
    toolBar.add(northTileBtn);

    selectSouthTileBtn.setText("Select Tile");
    selectSouthTileBtn.setFocusable(false);
    selectSouthTileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    selectSouthTileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    selectSouthTileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        selectSouthTileBtnActionPerformed(evt);
      }
    });
    toolBar.add(selectSouthTileBtn);

    drawCenterBtn.setText("show Center");
    drawCenterBtn.setFocusable(false);
    drawCenterBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    drawCenterBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    drawCenterBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        drawCenterBtnActionPerformed(evt);
      }
    });
    toolBar.add(drawCenterBtn);

    greenRedBtn.setText("Red");
    greenRedBtn.setFocusable(false);
    greenRedBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    greenRedBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    greenRedBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        greenRedBtnActionPerformed(evt);
      }
    });
    toolBar.add(greenRedBtn);

    toolbarPanel.add(toolBar);

    getContentPane().add(toolbarPanel, java.awt.BorderLayout.NORTH);

    dotGridCanvas.setPreferredSize(new java.awt.Dimension(360, 200));
    getContentPane().add(dotGridCanvas, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void northTileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northTileBtnActionPerformed
    Logger.trace(switchNorthR.getId() + "...");
    this.switchNorthR.setShowRoute(this.northTileBtn.isSelected());
    this.switchNorthL.setShowRoute(this.northTileBtn.isSelected());
  }//GEN-LAST:event_northTileBtnActionPerformed

  private void eastTileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastTileBtnActionPerformed
    this.switchEastR.setShowRoute(this.eastTileBtn.isSelected());
    this.switchEastL.setShowRoute(this.eastTileBtn.isSelected());
  }//GEN-LAST:event_eastTileBtnActionPerformed

  private void westTileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westTileBtnActionPerformed
    this.switchWestR.setShowRoute(this.westTileBtn.isSelected());
    this.switchWestL.setShowRoute(this.westTileBtn.isSelected());
  }//GEN-LAST:event_westTileBtnActionPerformed

  private void southTileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southTileBtnActionPerformed
    this.switchSouthR.setShowRoute(this.southTileBtn.isSelected());
    this.switchSouthL.setShowRoute(this.southTileBtn.isSelected());
  }//GEN-LAST:event_southTileBtnActionPerformed

  private void selectSouthTileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSouthTileBtnActionPerformed
    this.switchSouthR.setSelected(this.selectSouthTileBtn.isSelected());
    this.switchSouthL.setSelected(this.selectSouthTileBtn.isSelected());
  }//GEN-LAST:event_selectSouthTileBtnActionPerformed

  private void drawCenterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCenterBtnActionPerformed
    this.switchNorthR.setDrawCenterPoint(this.drawCenterBtn.isSelected());
    this.switchEastL.setDrawCenterPoint(this.drawCenterBtn.isSelected());
  }//GEN-LAST:event_drawCenterBtnActionPerformed

  private void greenRedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenRedBtnActionPerformed
    boolean red = this.greenRedBtn.isSelected();
    if (red) {
      this.greenRedBtn.setText("Green");
      if (this.westTileBtn.isSelected()) {
        this.switchWestR.setAccessoryValue(AccessoryValue.OFF);
        this.switchWestR.setRouteValue(AccessoryValue.GREEN);

        this.switchWestL.setAccessoryValue(AccessoryValue.OFF);
        this.switchWestL.setRouteValue(AccessoryValue.GREEN);

      } else {
        this.switchWestR.setAccessoryValue(AccessoryValue.GREEN);

        this.switchWestL.setAccessoryValue(AccessoryValue.GREEN);
      }
    } else {
      this.greenRedBtn.setText("Red");
      if (this.westTileBtn.isSelected()) {
        this.switchWestR.setAccessoryValue(AccessoryValue.OFF);
        this.switchWestR.setRouteValue(AccessoryValue.RED);

        this.switchWestL.setAccessoryValue(AccessoryValue.OFF);
        this.switchWestL.setRouteValue(AccessoryValue.RED);
      } else {
        this.switchWestR.setAccessoryValue(AccessoryValue.RED);

        this.switchWestL.setAccessoryValue(AccessoryValue.RED);
      }
    }
  }//GEN-LAST:event_greenRedBtnActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
      SwitchTileTester.setDefaultLookAndFeelDecorated(true);

    } catch (ClassNotFoundException
            | InstantiationException
            | IllegalAccessException
            | UnsupportedLookAndFeelException ex) {
      Logger.error(ex);
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() -> {
      SwitchTileTester app = new SwitchTileTester("Switch Tile Tester");
      app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
      app.setLocation(dim.width / 2 - app.getSize().width / 2, dim.height / 2 - app.getSize().height / 2);
      app.pack();
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private jcs.ui.layout.tiles.ui.DotGridCanvas dotGridCanvas;
  private javax.swing.JToggleButton drawCenterBtn;
  private javax.swing.JToggleButton eastTileBtn;
  private javax.swing.JToggleButton greenRedBtn;
  private javax.swing.JToggleButton northTileBtn;
  private javax.swing.JToggleButton selectSouthTileBtn;
  private javax.swing.JToggleButton southTileBtn;
  private javax.swing.JToolBar toolBar;
  private javax.swing.JPanel toolbarPanel;
  private javax.swing.JToggleButton westTileBtn;
  // End of variables declaration//GEN-END:variables
}
