/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lan.wervel.jcs.ui.layout;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import lan.wervel.jcs.entities.FeedbackModule;
import lan.wervel.jcs.entities.LayoutTile;
import lan.wervel.jcs.entities.LayoutTileGroup;
import lan.wervel.jcs.entities.Signal;
import lan.wervel.jcs.entities.Turnout;
import lan.wervel.jcs.trackservice.TrackServiceFactory;
import lan.wervel.jcs.ui.layout.tiles.AbstractTile;
import lan.wervel.jcs.ui.layout.tiles.enums.Direction;
import lan.wervel.jcs.ui.layout.tiles.enums.Rotation;
import org.pmw.tinylog.Configurator;
import org.pmw.tinylog.Logger;

/**
 *
 * @author frans
 */
public class DesignPanel extends JPanel implements SelectionListener {

    private Set<AbstractTile> selectedTiles;
    private AbstractTile selectedAbstractTile;
    private LayoutTile selectedLayoutTile;

    private Mode mode;
    private Rotation rotation;
    private Direction direction;
    private TileType tileType;
    private int splitLocation;

    private final ComboBoxModel<Turnout> turnoutsCBM;
    private final ComboBoxModel<Signal> signalsCBM;
    private final ComboBoxModel<FeedbackModule> modulesCBM;
    private ComboBoxModel<LayoutTileGroup> blockCBM;
    private final ExecutorService executor;

    /**
     * Creates new form LayoutPanel
     */
    public DesignPanel() {
        turnoutsCBM = getTurnoutComboBoxModel();
        signalsCBM = getSignalComboBoxModel();
        modulesCBM = getFeedbackModuleComboBoxModel();
        blockCBM = getBlockComboBoxModel();

        this.executor = Executors.newSingleThreadExecutor();

        initComponents();

        postInit();
    }

    private void postInit() {
        this.designCanvas.setSelectionModeChangedListener(new ToolSelectionChangedListener(this));

        hideAllProperties();
    }

    public void loadLayout() {
        this.designCanvas.loadLayout();
        //Need also blocks
        blockCBM = getBlockComboBoxModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layoutBG = new javax.swing.ButtonGroup();
        layoutToolBar = new javax.swing.JToolBar();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        selectBtn = new javax.swing.JToggleButton();
        editBtn = new javax.swing.JToggleButton();
        addTrackStraightBtn = new javax.swing.JToggleButton();
        addlTrackCurvedBtn = new javax.swing.JToggleButton();
        addTurnoutBtn = new javax.swing.JToggleButton();
        addSignalBtn = new javax.swing.JToggleButton();
        addOccupancySensorBtn = new javax.swing.JToggleButton();
        addSensorBtn = new javax.swing.JToggleButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        removeBtn = new javax.swing.JButton();
        moveBtn = new javax.swing.JButton();
        flipHorizontalBtn = new javax.swing.JButton();
        flipVerticalBtn = new javax.swing.JButton();
        rotateBtn = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        modeLbl = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        rotationLbl = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        directionLabel = new javax.swing.JLabel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        objectLbl = new javax.swing.JLabel();
        mainSP = new javax.swing.JSplitPane();
        canvasSP = new javax.swing.JScrollPane();
        designCanvas = new lan.wervel.jcs.ui.layout.DesignCanvas();
        propertiesPanel = new javax.swing.JPanel();
        tilePropertiesPanel = new javax.swing.JPanel();
        turnoutCB = new javax.swing.JComboBox<>();
        signalCB = new javax.swing.JComboBox<>();
        feedbackModuleCB = new javax.swing.JComboBox<>();
        feedbackPortSpinner = new javax.swing.JSpinner();
        tileGroupPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        blockLbl = new javax.swing.JLabel();
        blockCB = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        blockNrLbl = new javax.swing.JLabel();
        blockNrSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        blockNameLbl = new javax.swing.JLabel();
        blockNameTF = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        startBlockLbl = new javax.swing.JLabel();
        startBlockCB = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        endBlockLbl = new javax.swing.JLabel();
        endBlockCB = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 200), new java.awt.Dimension(0, 200), new java.awt.Dimension(32767, 200));

        setPreferredSize(new java.awt.Dimension(1300, 815));
        setLayout(new java.awt.BorderLayout());

        layoutToolBar.setDoubleBuffered(true);
        layoutToolBar.setMinimumSize(new java.awt.Dimension(567, 40));
        layoutToolBar.setPreferredSize(new java.awt.Dimension(1300, 40));

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/save-24.png"))); // NOI18N
        saveBtn.setFocusable(false);
        saveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        saveBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        saveBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        saveBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(saveBtn);

        loadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/load-24.png"))); // NOI18N
        loadBtn.setFocusable(false);
        loadBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        loadBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        loadBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        loadBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(loadBtn);
        layoutToolBar.add(filler2);

        layoutBG.add(selectBtn);
        selectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/cursor-24.png"))); // NOI18N
        selectBtn.setToolTipText("Select a tile");
        selectBtn.setDoubleBuffered(true);
        selectBtn.setFocusable(false);
        selectBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        selectBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        selectBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        selectBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(selectBtn);

        layoutBG.add(editBtn);
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/edit-24.png"))); // NOI18N
        editBtn.setFocusable(false);
        editBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        editBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        editBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        editBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(editBtn);

        layoutBG.add(addTrackStraightBtn);
        addTrackStraightBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/basic-straight-24.png"))); // NOI18N
        addTrackStraightBtn.setToolTipText("Add Straight Track");
        addTrackStraightBtn.setFocusable(false);
        addTrackStraightBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addTrackStraightBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addTrackStraightBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addTrackStraightBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        addTrackStraightBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addTrackStraightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrackStraightBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addTrackStraightBtn);

        layoutBG.add(addlTrackCurvedBtn);
        addlTrackCurvedBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/basic-diagonal-24.png"))); // NOI18N
        addlTrackCurvedBtn.setFocusable(false);
        addlTrackCurvedBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addlTrackCurvedBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addlTrackCurvedBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addlTrackCurvedBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addlTrackCurvedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addlTrackCurvedBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addlTrackCurvedBtn);

        layoutBG.add(addTurnoutBtn);
        addTurnoutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/basic-turnout-24.png"))); // NOI18N
        addTurnoutBtn.setFocusable(false);
        addTurnoutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addTurnoutBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addTurnoutBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addTurnoutBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        addTurnoutBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addTurnoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTurnoutBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addTurnoutBtn);

        layoutBG.add(addSignalBtn);
        addSignalBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/signal-24.png"))); // NOI18N
        addSignalBtn.setFocusable(false);
        addSignalBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSignalBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addSignalBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addSignalBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        addSignalBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSignalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSignalBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addSignalBtn);

        layoutBG.add(addOccupancySensorBtn);
        addOccupancySensorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/occupancy-24.png"))); // NOI18N
        addOccupancySensorBtn.setFocusable(false);
        addOccupancySensorBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addOccupancySensorBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addOccupancySensorBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addOccupancySensorBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        addOccupancySensorBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addOccupancySensorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOccupancySensorBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addOccupancySensorBtn);

        layoutBG.add(addSensorBtn);
        addSensorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/fb-port-24.png"))); // NOI18N
        addSensorBtn.setFocusable(false);
        addSensorBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSensorBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        addSensorBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        addSensorBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        addSensorBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSensorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSensorBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(addSensorBtn);
        layoutToolBar.add(filler3);

        removeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/delete-24.png"))); // NOI18N
        removeBtn.setToolTipText("Remove Selected Tile");
        removeBtn.setFocusable(false);
        removeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        removeBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        removeBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        removeBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(removeBtn);

        moveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/drag-24.png"))); // NOI18N
        moveBtn.setFocusable(false);
        moveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        moveBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        moveBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        moveBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(moveBtn);

        flipHorizontalBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/flip-horizontal-24.png"))); // NOI18N
        flipHorizontalBtn.setFocusable(false);
        flipHorizontalBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipHorizontalBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        flipHorizontalBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipHorizontalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipHorizontalBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(flipHorizontalBtn);

        flipVerticalBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/flip-vertical-24.png"))); // NOI18N
        flipVerticalBtn.setFocusable(false);
        flipVerticalBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipVerticalBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        flipVerticalBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipVerticalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipVerticalBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(flipVerticalBtn);

        rotateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/rotate-24.png"))); // NOI18N
        rotateBtn.setFocusable(false);
        rotateBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotateBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        rotateBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        rotateBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateBtnActionPerformed(evt);
            }
        });
        layoutToolBar.add(rotateBtn);
        layoutToolBar.add(filler4);

        modeLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/add-24.png"))); // NOI18N
        layoutToolBar.add(modeLbl);
        layoutToolBar.add(filler5);

        rotationLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-north.png"))); // NOI18N
        layoutToolBar.add(rotationLbl);
        layoutToolBar.add(filler6);

        directionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-center-24.png"))); // NOI18N
        layoutToolBar.add(directionLabel);
        layoutToolBar.add(filler7);

        objectLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/basic-diagonal-24.png"))); // NOI18N
        objectLbl.setMaximumSize(new java.awt.Dimension(30, 30));
        objectLbl.setMinimumSize(new java.awt.Dimension(30, 30));
        objectLbl.setPreferredSize(new java.awt.Dimension(30, 30));
        layoutToolBar.add(objectLbl);

        add(layoutToolBar, java.awt.BorderLayout.NORTH);

        mainSP.setDividerLocation(1050);
        mainSP.setPreferredSize(new java.awt.Dimension(1300, 815));
        mainSP.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mainSPPropertyChange(evt);
            }
        });

        canvasSP.setPreferredSize(new java.awt.Dimension(1100, 800));

        javax.swing.GroupLayout designCanvasLayout = new javax.swing.GroupLayout(designCanvas);
        designCanvas.setLayout(designCanvasLayout);
        designCanvasLayout.setHorizontalGroup(
            designCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1044, Short.MAX_VALUE)
        );
        designCanvasLayout.setVerticalGroup(
            designCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 989, Short.MAX_VALUE)
        );

        canvasSP.setViewportView(designCanvas);
        designCanvas.getAccessibleContext().setAccessibleName("layoutCanvas");

        mainSP.setLeftComponent(canvasSP);

        propertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Properties"));
        propertiesPanel.setOpaque(false);
        propertiesPanel.setPreferredSize(new java.awt.Dimension(200, 800));
        propertiesPanel.setLayout(new java.awt.GridLayout(2, 1));

        tilePropertiesPanel.setPreferredSize(new java.awt.Dimension(200, 37));
        tilePropertiesPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        turnoutCB.setModel(turnoutsCBM);
        turnoutCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnoutCBActionPerformed(evt);
            }
        });
        tilePropertiesPanel.add(turnoutCB);

        signalCB.setModel(signalsCBM);
        signalCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signalCBActionPerformed(evt);
            }
        });
        tilePropertiesPanel.add(signalCB);

        feedbackModuleCB.setModel(modulesCBM);
        feedbackModuleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackModuleCBActionPerformed(evt);
            }
        });
        tilePropertiesPanel.add(feedbackModuleCB);

        feedbackPortSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 16, 1));
        feedbackPortSpinner.setPreferredSize(new java.awt.Dimension(53, 26));
        feedbackPortSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                feedbackPortSpinnerStateChanged(evt);
            }
        });
        tilePropertiesPanel.add(feedbackPortSpinner);

        propertiesPanel.add(tilePropertiesPanel);

        tileGroupPanel.setPreferredSize(new java.awt.Dimension(400, 200));
        tileGroupPanel.setLayout(new javax.swing.BoxLayout(tileGroupPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        blockLbl.setText("Block");
        blockLbl.setPreferredSize(new java.awt.Dimension(75, 16));
        jPanel1.add(blockLbl);

        blockCB.setModel(blockCBM);
        blockCB.setPreferredSize(new java.awt.Dimension(140, 27));
        blockCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockCBActionPerformed(evt);
            }
        });
        jPanel1.add(blockCB);

        tileGroupPanel.add(jPanel1);

        jPanel2.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        blockNrLbl.setText("Block Nr");
        blockNrLbl.setPreferredSize(new java.awt.Dimension(75, 16));
        jPanel2.add(blockNrLbl);

        blockNrSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        blockNrSpinner.setPreferredSize(new java.awt.Dimension(50, 30));
        blockNrSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blockNrSpinnerStateChanged(evt);
            }
        });
        jPanel2.add(blockNrSpinner);

        tileGroupPanel.add(jPanel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel3.setRequestFocusEnabled(false);
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        blockNameLbl.setLabelFor(blockNameTF);
        blockNameLbl.setText("Name");
        blockNameLbl.setPreferredSize(new java.awt.Dimension(75, 16));
        jPanel3.add(blockNameLbl);

        blockNameTF.setPreferredSize(new java.awt.Dimension(110, 30));
        jPanel3.add(blockNameTF);

        tileGroupPanel.add(jPanel3);

        jPanel4.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        startBlockLbl.setText("Block Start");
        startBlockLbl.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel4.add(startBlockLbl);

        startBlockCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        startBlockCB.setPreferredSize(new java.awt.Dimension(100, 25));
        startBlockCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBlockCBActionPerformed(evt);
            }
        });
        jPanel4.add(startBlockCB);

        tileGroupPanel.add(jPanel4);

        jPanel5.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        endBlockLbl.setText("Block End");
        endBlockLbl.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel5.add(endBlockLbl);

        endBlockCB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        endBlockCB.setPreferredSize(new java.awt.Dimension(100, 25));
        endBlockCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endBlockCBActionPerformed(evt);
            }
        });
        jPanel5.add(endBlockCB);

        tileGroupPanel.add(jPanel5);

        jPanel6.add(filler1);

        tileGroupPanel.add(jPanel6);

        propertiesPanel.add(tileGroupPanel);

        mainSP.setRightComponent(propertiesPanel);
        propertiesPanel.getAccessibleContext().setAccessibleParent(designCanvas);

        add(mainSP, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleName("layoutPanel");
        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

  private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
      //Logger.trace("Set mode to select");
      this.objectLbl.setIcon(this.selectBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.SELECT, this.rotation, Direction.CENTER, null);
  }//GEN-LAST:event_selectBtnActionPerformed

  private void addTrackStraightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrackStraightBtnActionPerformed
      //Logger.trace("Set mode to add straight");
      this.objectLbl.setIcon(this.addTrackStraightBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, this.rotation, Direction.CENTER, TileType.STRAIGHT);
  }//GEN-LAST:event_addTrackStraightBtnActionPerformed

  private void flipHorizontalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipHorizontalBtnActionPerformed
      //Logger.trace("Flip selected tile horizontally");
      this.designCanvas.flipSelectedTileHorizontal();
  }//GEN-LAST:event_flipHorizontalBtnActionPerformed

  private void flipVerticalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipVerticalBtnActionPerformed
      //Logger.trace("Flip selected tile vertically");
      this.designCanvas.flipSelectedTileVertical();
  }//GEN-LAST:event_flipVerticalBtnActionPerformed

  private void rotateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateBtnActionPerformed
      //Logger.trace("Rotate selected tile");
      this.designCanvas.rotateSelectedTile();
  }//GEN-LAST:event_rotateBtnActionPerformed

  private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
      this.objectLbl.setIcon(this.editBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.EDIT, this.rotation, Direction.RIGHT, TileType.TURNOUT);
  }//GEN-LAST:event_editBtnActionPerformed

  private void addlTrackCurvedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addlTrackCurvedBtnActionPerformed
      //Logger.trace("Set mode to add diagonal");
      this.objectLbl.setIcon(this.addlTrackCurvedBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, this.rotation, Direction.CENTER, TileType.DIAGONAL);
  }//GEN-LAST:event_addlTrackCurvedBtnActionPerformed

  private void addTurnoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTurnoutBtnActionPerformed
      //Logger.trace("Set mode to add turnout");
      this.objectLbl.setIcon(this.addTurnoutBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, this.rotation, Direction.RIGHT, TileType.TURNOUT);
  }//GEN-LAST:event_addTurnoutBtnActionPerformed

  private void addSensorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSensorBtnActionPerformed
      //Logger.trace("Set mode to add feedback port");
      this.objectLbl.setIcon(this.addSensorBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, this.rotation, Direction.CENTER, TileType.FEEDBACK_SENSOR);
  }//GEN-LAST:event_addSensorBtnActionPerformed

  private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
      Logger.debug("Save the layout...");
      this.designCanvas.saveLayout();
  }//GEN-LAST:event_saveBtnActionPerformed

  private void moveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBtnActionPerformed
      Logger.trace("Move selected tile");
      if (!Mode.SELECT.equals(designCanvas.getMode())) {
          selectBtnActionPerformed(evt);
          this.selectBtn.setSelected(true);
      }
      this.selectBtn.setSelected(true);
      this.designCanvas.moveSelectedTile();
  }//GEN-LAST:event_moveBtnActionPerformed

  private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
      Logger.trace("Load the layout...");
      this.designCanvas.loadLayout();
      this.layoutBG.setSelected(this.selectBtn.getModel(), true);
      selectBtnActionPerformed(null);
  }//GEN-LAST:event_loadBtnActionPerformed

  private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
      Logger.trace("Remove selected Tile...");
      this.designCanvas.removeSelectedTile();
  }//GEN-LAST:event_removeBtnActionPerformed

  private void addSignalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSignalBtnActionPerformed
      this.objectLbl.setIcon(this.addSignalBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, Rotation.R0, Direction.CENTER, TileType.SIGNAL);
  }//GEN-LAST:event_addSignalBtnActionPerformed

  private void addOccupancySensorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOccupancySensorBtnActionPerformed
      this.objectLbl.setIcon(this.addOccupancySensorBtn.getIcon());
      this.designCanvas.selectionModeChanged(Mode.ADD, Rotation.R0, Direction.CENTER, TileType.OCCUPANCY_SENSOR);
  }//GEN-LAST:event_addOccupancySensorBtnActionPerformed

  private void turnoutCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnoutCBActionPerformed
      Turnout t = (Turnout) this.turnoutsCBM.getSelectedItem();
      if (this.selectedLayoutTile != null && t != null) {
          selectedLayoutTile.setSolenoidAccessoiry(t);
          selectedLayoutTile.setSoacId(t.getId());
      }
  }//GEN-LAST:event_turnoutCBActionPerformed

  private void signalCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signalCBActionPerformed
      Signal s = (Signal) this.signalCB.getSelectedItem();
      if (selectedLayoutTile != null && s != null) {
          selectedLayoutTile.setSolenoidAccessoiry(s);
          selectedLayoutTile.setSoacId(s.getId());
          Logger.trace("Tile: " + selectedLayoutTile + " Signal: " + s);
      }
  }//GEN-LAST:event_signalCBActionPerformed

  private void feedbackModuleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackModuleCBActionPerformed
      if (feedbackModuleCB.isVisible()) {
          FeedbackModule fbm = (FeedbackModule) this.feedbackModuleCB.getSelectedItem();
          if (this.selectedLayoutTile != null) {
              this.selectedLayoutTile.setFeedbackModule(fbm);
              this.selectedLayoutTile.setPort(getValidatedSpinnerValue());

              Logger.trace("Femo " + selectedLayoutTile.getFemoId() + " SET Port to:" + selectedLayoutTile.getPort() + "...");
          }
      }
  }//GEN-LAST:event_feedbackModuleCBActionPerformed

  private void feedbackPortSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_feedbackPortSpinnerStateChanged
      if (feedbackPortSpinner.isVisible()) {
          Logger.trace("Selected FM: " + this.feedbackModuleCB.getSelectedItem() + " Selected Port: " + feedbackPortSpinner.getValue());

          if (selectedLayoutTile != null) {
              selectedLayoutTile.setFeedbackModule((FeedbackModule) this.feedbackModuleCB.getSelectedItem());
              selectedLayoutTile.setPort(getValidatedSpinnerValue());
              Logger.trace("FM: " + this.selectedLayoutTile.getFeedbackModule() + " Port:" + selectedLayoutTile.getPort() + "...");
          }
      }
  }//GEN-LAST:event_feedbackPortSpinnerStateChanged

    private Integer getValidatedSpinnerValue() {
        Integer v = (Integer) this.feedbackPortSpinner.getValue();

        if (v > 0 && v < 17) {
            return v;
        } else {
            return null;
        }
    }

  private void blockCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockCBActionPerformed
      if (this.blockCB.isVisible()) {
          LayoutTileGroup ltg = (LayoutTileGroup) this.blockCB.getSelectedItem();
          if (ltg != null) {
              this.selectedLayoutTile.setLayoutTileGroup(ltg);
              if (ltg.getAddress() != null) {
                  this.blockNrSpinner.setValue(ltg.getAddress());
              }
              this.blockNameTF.setText(ltg.getName());

              this.repaint();
          }
      }
  }//GEN-LAST:event_blockCBActionPerformed

  private void blockNrSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blockNrSpinnerStateChanged
      if (this.blockNrSpinner.isVisible()) {
          Logger.trace("Block Nr: " + this.blockNrSpinner.getValue());
          this.selectedLayoutTile.getLayoutTileGroup().setAddress((Integer) this.blockNrSpinner.getValue());
      }
  }//GEN-LAST:event_blockNrSpinnerStateChanged

  private void startBlockCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBlockCBActionPerformed
      if (this.startBlockCB.isVisible()) {
          if (this.startBlockCB.isSelected()) {
              this.selectedLayoutTile.getLayoutTileGroup().setStartLatiId(this.selectedLayoutTile.getId());
              Logger.trace("StartLatiId: " + this.selectedLayoutTile.getId());
          }
      }
  }//GEN-LAST:event_startBlockCBActionPerformed

  private void endBlockCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endBlockCBActionPerformed
      if (this.endBlockCB.isVisible()) {
          if (this.endBlockCB.isSelected()) {
              this.selectedLayoutTile.getLayoutTileGroup().setEndLatiId(this.selectedLayoutTile.getId());
              Logger.trace("EndLatiId: " + this.selectedLayoutTile.getId());
          }
      }
  }//GEN-LAST:event_endBlockCBActionPerformed

  private void mainSPPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mainSPPropertyChange
      if ("lastDividerLocation".equals(evt.getPropertyName())) {
          int currentLocation = this.mainSP.getDividerLocation();
          if (splitLocation != currentLocation) {
              Logger.debug("SplitLocation: " + splitLocation + " CurrentLocation: " + currentLocation);

              splitLocation = currentLocation;
              this.designCanvas.resetDotGrid();
          }
      }
  }//GEN-LAST:event_mainSPPropertyChange

    private void selectionModeChanged(Mode newMode, Rotation newRotation, Direction newDirection, TileType newTileType) {
        this.mode = newMode;
        this.rotation = newRotation;
        this.direction = newDirection;
        this.tileType = newTileType;

        if (mode != null) {
            switch (mode) {
                case SELECT:
                    modeLbl.setText("");
                    modeLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/select-24.png")));
                    break;
                case ADD:
                    modeLbl.setText("");
                    modeLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/add-24.png")));
                    break;
                default:
                    modeLbl.setIcon(null);
                    modeLbl.setText(mode.toString());
            }
        }

        if (rotation != null) {
            switch (rotation) {
                case R90:
                    rotationLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-east.png")));
                    break;
                case R180:
                    rotationLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-south.png")));
                    break;
                case R270:
                    rotationLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-west.png")));
                    break;
                default:
                    rotationLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-north.png")));
                    break;
            }
        }

        if (direction != null) {
            switch (direction) {
                case LEFT:
                    directionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-left-24.png")));
                    break;
                case RIGHT:
                    directionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-right-24.png")));
                    break;
                default:
                    directionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-center-24.png")));
                    break;
            }
        }
    }

    @Override
    public void setSelectedLayoutTiles(Set<AbstractTile> tiles) {
        this.selectedTiles = tiles;

        if (!tiles.isEmpty()) {
            this.selectedTiles = tiles;
            //compatibility need adjustment for multiple select bu for now single select
            if (this.selectedTiles.size() == 1) {
                LayoutTile plt = this.selectedLayoutTile;
                AbstractTile pat = this.selectedAbstractTile;

                //Obtain the selected tile
                selectedAbstractTile = tiles.iterator().next();
                Logger.trace("Selected AbstractTile: " + selectedAbstractTile);
                selectedLayoutTile = selectedAbstractTile.getLayoutTile();

                this.executor.execute(() -> storeLayoutTileGroup(plt));
            }
        } else {
            this.selectedAbstractTile = null;
            this.selectedLayoutTile = null;
        }
        this.executor.execute(() -> showProperties());
    }

    private void storeLayoutTileGroup(LayoutTile LayoutTile) {
        if (LayoutTile != null && LayoutTile.getLayoutTileGroup() != null && LayoutTile.getLayoutTileGroup().getAddress() != null && !LayoutTile.getLayoutTileGroup().getAddress().equals(0)) {
            LayoutTileGroup ltg = LayoutTile.getLayoutTileGroup();
            //ensure the text is saved
            String t = this.blockNameTF.getText();
            ltg.setName(t);
            Integer groupNumber = (Integer) this.blockNrSpinner.getValue();
            if (groupNumber > 0) {
                ltg.setAddress(groupNumber);
            }
            TrackServiceFactory.getTrackService().persist(ltg);
            Logger.trace("Persisted " + ltg.toLogString());
        }
    }

    private void showProperties() {
        //hide the properties first
        hideAllProperties();

        if (selectedLayoutTile != null) {
            String tt = selectedLayoutTile.getTiletype();
            Logger.trace("Type: " + tt + " Soac: " + selectedLayoutTile.getSoacId() + " SA: " + selectedLayoutTile.getSolenoidAccessoiry() + " Femo: " + selectedLayoutTile.getFemoId() + " Port " + selectedLayoutTile.getPort());

            switch (tt) {
                case "TurnoutTile":
                    showTurnoutProperties();
                    break;
                case "SignalTile":
                    showSignalProperties();
                    break;
                case "FeedbackPort":
                    showFeedbackModuleProperties();
                    break;
                case "OccupancyDetector":
                    showFeedbackModuleProperties();
                    break;
                default:
                    hideAllProperties();
                    break;
            }
            if (!"TurnoutTile".equals(tt)) {
                showGroupProperties();
            }
        }
    }

    private void showGroupProperties() {
        //Show Group settings
        //refresh the cb
        this.blockCBM = getBlockComboBoxModel();
        this.blockCB.setModel(blockCBM);

        LayoutTileGroup ltg;
        ltg = selectedLayoutTile.getLayoutTileGroup();
        if (ltg == null) {
            ltg = new LayoutTileGroup();
        } else {
            //The group might be updated by a previous action
            LayoutTileGroup ultg = TrackServiceFactory.getTrackService().getLayoutTileGroup(ltg.getAddress());
            if (ultg != null) {
                ltg = ultg;
            }
        }
        selectedLayoutTile.setLayoutTileGroup(ltg);

        blockCB.setSelectedItem(ltg);

        if (ltg.getAddress() != null) {
            blockNrSpinner.setValue(ltg.getAddress());
        }
        blockNameTF.setText(ltg.getName());
        endBlockCB.setSelected(ltg.getEndLatiId() != null);
        startBlockCB.setSelected(ltg.getStartLatiId() != null);

        blockCB.setVisible(true);
        blockLbl.setVisible(true);
        blockNrSpinner.setVisible(true);
        blockNrLbl.setVisible(true);
        blockNameTF.setVisible(true);
        blockNameLbl.setVisible(true);
        endBlockCB.setVisible(true);
        endBlockLbl.setVisible(true);
        startBlockCB.setVisible(true);
        startBlockLbl.setVisible(true);
    }

    private void showTurnoutProperties() {
        turnoutsCBM.setSelectedItem((Turnout) this.selectedLayoutTile.getSolenoidAccessoiry());
        turnoutCB.setVisible(true);
        signalCB.setVisible(false);
        feedbackModuleCB.setVisible(false);
        feedbackPortSpinner.setVisible(false);
    }

    private void showSignalProperties() {
        signalsCBM.setSelectedItem((Signal) this.selectedLayoutTile.getSolenoidAccessoiry());
        turnoutCB.setVisible(false);
        signalCB.setVisible(true);
        feedbackModuleCB.setVisible(false);
        feedbackPortSpinner.setVisible(false);
    }

    private void showFeedbackModuleProperties() {
        Logger.trace("Femo " + selectedLayoutTile.getFemoId() + " Port " + selectedLayoutTile.getPort());

        if (this.selectedLayoutTile.getPort() != null) {
            this.feedbackPortSpinner.setValue(this.selectedLayoutTile.getPort());
        }
        modulesCBM.setSelectedItem(this.selectedLayoutTile.getFeedbackModule());

        turnoutCB.setVisible(false);
        signalCB.setVisible(false);
        feedbackModuleCB.setVisible(true);
        feedbackPortSpinner.setVisible(true);
    }

    private void hideAllProperties() {
        turnoutCB.setVisible(false);
        signalCB.setVisible(false);
        feedbackModuleCB.setVisible(false);
        feedbackPortSpinner.setVisible(false);
        //Group settings
        blockCB.setVisible(false);
        blockLbl.setVisible(false);
        blockNrSpinner.setVisible(false);
        blockNrSpinner.setValue(0);
        blockNrLbl.setVisible(false);
        blockNameTF.setVisible(false);
        blockNameTF.setText("");
        blockNameLbl.setVisible(false);
        endBlockCB.setVisible(false);
        endBlockLbl.setVisible(false);
        startBlockCB.setVisible(false);
        startBlockLbl.setVisible(false);

        //turnoutsCBM.setSelectedItem(null);
        //signalsCBM.setSelectedItem(null);
        feedbackPortSpinner.setValue(0);
        //modulesCBM.setSelectedItem(null);
    }

    private ComboBoxModel<Turnout> getTurnoutComboBoxModel() {
        ComboBoxModel turnoutCBM;
        if (TrackServiceFactory.getTrackService() != null) {
            Logger.trace("Setup the turnout model...");

            List<Turnout> tl = TrackServiceFactory.getTrackService().getTurnouts();

            Turnout[] turnouts = new Turnout[tl.size()];
            tl.toArray(turnouts);

            turnoutCBM = new DefaultComboBoxModel<>(turnouts);
        } else {
            turnoutCBM = new DefaultComboBoxModel<>();
        }
        return turnoutCBM;
    }

    private ComboBoxModel<Signal> getSignalComboBoxModel() {
        ComboBoxModel signalCBM;
        if (TrackServiceFactory.getTrackService() != null) {
            Logger.trace("Setup the signal model...");

            List<Signal> sl = TrackServiceFactory.getTrackService().getSignals();

            Signal[] signals = new Signal[sl.size()];
            sl.toArray(signals);

            signalCBM = new DefaultComboBoxModel<>(signals);
        } else {
            signalCBM = new DefaultComboBoxModel<>();
        }
        return signalCBM;
    }

    private ComboBoxModel<FeedbackModule> getFeedbackModuleComboBoxModel() {
        ComboBoxModel feedbackCBM;
        if (TrackServiceFactory.getTrackService() != null) {
            Logger.trace("Setup the feedback model...");

            List<FeedbackModule> fbml = TrackServiceFactory.getTrackService().getFeedbackModules();

            FeedbackModule[] modules = new FeedbackModule[fbml.size()];
            fbml.toArray(modules);

            feedbackCBM = new DefaultComboBoxModel<>(modules);
        } else {
            feedbackCBM = new DefaultComboBoxModel<>();
        }
        return feedbackCBM;
    }

    private ComboBoxModel<LayoutTileGroup> getBlockComboBoxModel() {
        ComboBoxModel layoutTileGroupCBM;
        if (TrackServiceFactory.getTrackService() != null) {
            List<LayoutTileGroup> ltgl = new ArrayList<>();
            LayoutTileGroup ltg = new LayoutTileGroup();
            ltgl.add(ltg);
            ltgl.addAll(TrackServiceFactory.getTrackService().getLayoutTileGroups());

            Logger.trace("Setup the tile group model. There are " + ltgl.size() + " block(s)...");

            LayoutTileGroup[] blocks = new LayoutTileGroup[ltgl.size()];
            ltgl.toArray(blocks);
            layoutTileGroupCBM = new DefaultComboBoxModel<>(blocks);
        } else {
            layoutTileGroupCBM = new DefaultComboBoxModel<>();
        }
        return layoutTileGroupCBM;
    }

    private class ToolSelectionChangedListener implements SelectionModeChangedListener {

        private final DesignPanel designPanel;

        ToolSelectionChangedListener(DesignPanel designPanel) {
            this.designPanel = designPanel;
        }

        @Override
        public void selectionModeChanged(Mode newMode, Rotation newOrientation, Direction newDirection, TileType newTileType) {
            this.designPanel.selectionModeChanged(newMode, rotation, newDirection, newTileType);
        }
    }

    public static void main(String args[]) {
        Configurator.defaultConfig().level(org.pmw.tinylog.Level.TRACE).activate();

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.error(ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            JFrame f = new JFrame("displayLayoutPanel Tester");
            DesignPanel layoutPanel = new DesignPanel();
            f.add(layoutPanel);

            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.pack();
            f.setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addOccupancySensorBtn;
    private javax.swing.JToggleButton addSensorBtn;
    private javax.swing.JToggleButton addSignalBtn;
    private javax.swing.JToggleButton addTrackStraightBtn;
    private javax.swing.JToggleButton addTurnoutBtn;
    private javax.swing.JToggleButton addlTrackCurvedBtn;
    private javax.swing.JComboBox<LayoutTileGroup> blockCB;
    private javax.swing.JLabel blockLbl;
    private javax.swing.JLabel blockNameLbl;
    private javax.swing.JTextField blockNameTF;
    private javax.swing.JLabel blockNrLbl;
    private javax.swing.JSpinner blockNrSpinner;
    private javax.swing.JScrollPane canvasSP;
    private lan.wervel.jcs.ui.layout.DesignCanvas designCanvas;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JToggleButton editBtn;
    private javax.swing.JCheckBox endBlockCB;
    private javax.swing.JLabel endBlockLbl;
    private javax.swing.JComboBox<FeedbackModule> feedbackModuleCB;
    private javax.swing.JSpinner feedbackPortSpinner;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JButton flipHorizontalBtn;
    private javax.swing.JButton flipVerticalBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.ButtonGroup layoutBG;
    private javax.swing.JToolBar layoutToolBar;
    private javax.swing.JButton loadBtn;
    private javax.swing.JSplitPane mainSP;
    private javax.swing.JLabel modeLbl;
    private javax.swing.JButton moveBtn;
    private javax.swing.JLabel objectLbl;
    private javax.swing.JPanel propertiesPanel;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton rotateBtn;
    private javax.swing.JLabel rotationLbl;
    private javax.swing.JButton saveBtn;
    private javax.swing.JToggleButton selectBtn;
    private javax.swing.JComboBox<Signal> signalCB;
    private javax.swing.JCheckBox startBlockCB;
    private javax.swing.JLabel startBlockLbl;
    private javax.swing.JPanel tileGroupPanel;
    private javax.swing.JPanel tilePropertiesPanel;
    private javax.swing.JComboBox<Turnout> turnoutCB;
    // End of variables declaration//GEN-END:variables
}
