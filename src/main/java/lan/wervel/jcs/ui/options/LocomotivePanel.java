/*
 * Copyright (C) 2019 frans.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package lan.wervel.jcs.ui.options;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import lan.wervel.jcs.entities.Locomotive;
import lan.wervel.jcs.entities.enums.Direction;
import lan.wervel.jcs.trackservice.TrackServiceFactory;
import lan.wervel.jcs.ui.options.table.LocomotiveTableModel;
import org.pmw.tinylog.Configurator;
import org.pmw.tinylog.Logger;

/**
 *
 * @author frans
 */
public class LocomotivePanel extends JPanel {

  private final LocomotiveTableModel locoTableModel;

  private static final String[] FUNCTION_TYPES = {"", "Lights", "Magnet", "Telex"};
  private static final String[] LOC_TYPES = {"", "Steam", "Electric", "Diesel"};
  private static final String[] F1234_TYPES = {"", "Lights", "Telex", "Beacon", "Smoke", "Flashlight", "Shunt", "Delay", "Siren", "Lift", "Wheellight"};

  /**
   * Creates new form LocomotivePanel
   */
  public LocomotivePanel() {
    locoTableModel = new LocomotiveTableModel();

    initComponents();

    alignLocoTable();
  }

  private void alignLocoTable() {
    this.locoTable.getColumnModel().getColumn(0).setPreferredWidth(50);
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
    this.locoTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    this.locoTable.getColumnModel().getColumn(1).setPreferredWidth(100);
    this.locoTable.getColumnModel().getColumn(2).setPreferredWidth(140);
    this.locoTable.getColumnModel().getColumn(3).setPreferredWidth(60);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
   * method is always regenerated by the Form Editor.
   */
  @SuppressWarnings({"unchecked", "deprecation"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    directionBG = new ButtonGroup();
    selectedLocomotive = new Locomotive();
    topPanel = new JPanel();
    refreshBtn = new JButton();
    newBtn = new JButton();
    centerPanel = new JPanel();
    centerSplitPane = new JSplitPane();
    locoTableScrollPane = new JScrollPane();
    locoTable = new JTable();
    locoDetailPanel = new JPanel();
    row1Panel = new JPanel();
    addressLbl = new JLabel();
    addressSpinner = new JSpinner();
    nameLbl = new JLabel();
    nameTF = new JTextField();
    idLbl = new JLabel();
    row2Panel = new JPanel();
    descriptionLbl = new JLabel();
    descriptionTF = new JTextField();
    row3Panel = new JPanel();
    speedStepsLbl = new JLabel();
    speedStepsSpinner = new JSpinner();
    minSpeedLbl = new JLabel();
    minSpeedSpinner = new JSpinner();
    row4Panel = new JPanel();
    catalogeNrLbl = new JLabel();
    catalogNrTF = new JTextField();
    LocoTypeLbl = new JLabel();
    locoTypeComboBox = new JComboBox<>();
    row5Panel = new JPanel();
    defaultDirectionLbl = new JLabel();
    forwardsRB = new JRadioButton();
    backwardsRB = new JRadioButton();
    row6Panel = new JPanel();
    f0Lbl = new JLabel();
    f0CB = new JComboBox<>();
    row7Panel = new JPanel();
    specialFunctionsCB = new JCheckBox();
    row8Panel = new JPanel();
    f1Lbl = new JLabel();
    f1CB = new JComboBox<>();
    f2Lbl = new JLabel();
    f2CB = new JComboBox<>();
    row9Panel = new JPanel();
    f3Lbl = new JLabel();
    f3CB = new JComboBox<>();
    f4Lbl = new JLabel();
    f4CB = new JComboBox<>();
    filler2 = new Box.Filler(new Dimension(0, 50), new Dimension(0, 50), new Dimension(32767, 300));
    buttonPanel = new JPanel();
    deleteBtn = new JButton();
    filler1 = new Box.Filler(new Dimension(100, 0), new Dimension(200, 0), new Dimension(150, 32767));
    saveBtn = new JButton();
    bottomPanel = new JPanel();

    setMinimumSize(new Dimension(1000, 600));
    setPreferredSize(new Dimension(1000, 600));
    setLayout(new BorderLayout());

    topPanel.setMinimumSize(new Dimension(1000, 50));
    topPanel.setPreferredSize(new Dimension(1000, 50));
    topPanel.setRequestFocusEnabled(false);
    FlowLayout flowLayout2 = new FlowLayout(FlowLayout.RIGHT);
    flowLayout2.setAlignOnBaseline(true);
    topPanel.setLayout(flowLayout2);

    refreshBtn.setIcon(new ImageIcon(getClass().getResource("/media/refresh-24.png"))); // NOI18N
    refreshBtn.setText("Refresh");
    refreshBtn.setMargin(new Insets(2, 2, 2, 2));
    refreshBtn.setMaximumSize(new Dimension(120, 36));
    refreshBtn.setMinimumSize(new Dimension(120, 36));
    refreshBtn.setPreferredSize(new Dimension(120, 36));
    refreshBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        refreshBtnActionPerformed(evt);
      }
    });
    topPanel.add(refreshBtn);

    newBtn.setIcon(new ImageIcon(getClass().getResource("/media/add-24.png"))); // NOI18N
    newBtn.setText("New");
    newBtn.setToolTipText("Create new Locomotive");
    newBtn.setMaximumSize(new Dimension(120, 36));
    newBtn.setMinimumSize(new Dimension(120, 36));
    newBtn.setPreferredSize(new Dimension(120, 36));
    newBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        newBtnActionPerformed(evt);
      }
    });
    topPanel.add(newBtn);

    add(topPanel, BorderLayout.NORTH);

    centerPanel.setMinimumSize(new Dimension(1000, 500));
    centerPanel.setPreferredSize(new Dimension(1000, 500));
    centerPanel.setLayout(new BorderLayout());

    centerSplitPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
    centerSplitPane.setDividerLocation(500);
    centerSplitPane.setDoubleBuffered(true);
    centerSplitPane.setPreferredSize(new Dimension(1000, 540));

    locoTableScrollPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
    locoTableScrollPane.setMinimumSize(new Dimension(500, 500));
    locoTableScrollPane.setPreferredSize(new Dimension(500, 500));

    locoTable.setModel(locoTableModel);
    locoTable.setDoubleBuffered(true);
    locoTable.setGridColor(new Color(204, 204, 204));
    locoTable.setPreferredSize(new Dimension(480, 470));
    locoTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    locoTable.getTableHeader().setReorderingAllowed(false);
    locoTable.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        locoTableMouseClicked(evt);
      }
    });
    locoTableScrollPane.setViewportView(locoTable);

    centerSplitPane.setLeftComponent(locoTableScrollPane);

    locoDetailPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1), "Edit Loco"));
    locoDetailPanel.setMinimumSize(new Dimension(390, 540));
    locoDetailPanel.setPreferredSize(new Dimension(480, 500));
    locoDetailPanel.setLayout(new BoxLayout(locoDetailPanel, BoxLayout.Y_AXIS));

    row1Panel.setMinimumSize(new Dimension(380, 30));
    row1Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout1 = new FlowLayout(FlowLayout.LEFT);
    flowLayout1.setAlignOnBaseline(true);
    row1Panel.setLayout(flowLayout1);

    addressLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    addressLbl.setLabelFor(addressSpinner);
    addressLbl.setText("Address");
    addressLbl.setPreferredSize(new Dimension(120, 16));
    row1Panel.add(addressLbl);

    addressSpinner.setModel(new SpinnerNumberModel(0, 0, 80, 1));
    addressSpinner.setDoubleBuffered(true);
    addressSpinner.setEditor(new JSpinner.NumberEditor(addressSpinner, ""));
    addressSpinner.setMinimumSize(new Dimension(50, 26));
    addressSpinner.setName(""); // NOI18N
    addressSpinner.setNextFocusableComponent(nameTF);
    addressSpinner.setPreferredSize(new Dimension(60, 26));
    row1Panel.add(addressSpinner);

    nameLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    nameLbl.setLabelFor(nameTF);
    nameLbl.setText("Name");
    nameLbl.setPreferredSize(new Dimension(85, 16));
    row1Panel.add(nameLbl);

    nameTF.setMinimumSize(new Dimension(120, 26));
    nameTF.setPreferredSize(new Dimension(100, 26));
    row1Panel.add(nameTF);

    idLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    idLbl.setText("ID: ");
    idLbl.setPreferredSize(new Dimension(55, 16));
    row1Panel.add(idLbl);

    locoDetailPanel.add(row1Panel);

    row2Panel.setMinimumSize(new Dimension(380, 30));
    row2Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout3 = new FlowLayout(FlowLayout.LEFT);
    flowLayout3.setAlignOnBaseline(true);
    row2Panel.setLayout(flowLayout3);

    descriptionLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    descriptionLbl.setLabelFor(descriptionTF);
    descriptionLbl.setText("Description");
    descriptionLbl.setPreferredSize(new Dimension(120, 16));
    row2Panel.add(descriptionLbl);

    descriptionTF.setMinimumSize(new Dimension(215, 26));
    descriptionTF.setPreferredSize(new Dimension(255, 26));
    row2Panel.add(descriptionTF);

    locoDetailPanel.add(row2Panel);

    row3Panel.setMinimumSize(new Dimension(380, 30));
    row3Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout4 = new FlowLayout(FlowLayout.LEFT);
    flowLayout4.setAlignOnBaseline(true);
    row3Panel.setLayout(flowLayout4);

    speedStepsLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    speedStepsLbl.setLabelFor(speedStepsSpinner);
    speedStepsLbl.setText("Speedsteps");
    speedStepsLbl.setPreferredSize(new Dimension(120, 16));
    row3Panel.add(speedStepsLbl);

    speedStepsSpinner.setModel(new SpinnerNumberModel(0, 0, 28, 1));
    speedStepsSpinner.setEditor(new JSpinner.NumberEditor(speedStepsSpinner, ""));
    speedStepsSpinner.setMinimumSize(new Dimension(51, 26));
    speedStepsSpinner.setPreferredSize(new Dimension(60, 26));
    row3Panel.add(speedStepsSpinner);

    minSpeedLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    minSpeedLbl.setText("Min. Speed");
    minSpeedLbl.setPreferredSize(new Dimension(85, 16));
    row3Panel.add(minSpeedLbl);

    minSpeedSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    minSpeedSpinner.setPreferredSize(new Dimension(60, 26));
    row3Panel.add(minSpeedSpinner);

    locoDetailPanel.add(row3Panel);

    row4Panel.setMinimumSize(new Dimension(380, 30));
    row4Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout5 = new FlowLayout(FlowLayout.LEFT);
    flowLayout5.setAlignOnBaseline(true);
    row4Panel.setLayout(flowLayout5);

    catalogeNrLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    catalogeNrLbl.setLabelFor(catalogNrTF);
    catalogeNrLbl.setText("Catalog Number");
    catalogeNrLbl.setPreferredSize(new Dimension(120, 16));
    row4Panel.add(catalogeNrLbl);

    catalogNrTF.setMinimumSize(new Dimension(120, 26));
    catalogNrTF.setPreferredSize(new Dimension(100, 26));
    row4Panel.add(catalogNrTF);

    LocoTypeLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    LocoTypeLbl.setText("Type");
    LocoTypeLbl.setPreferredSize(new Dimension(45, 16));
    row4Panel.add(LocoTypeLbl);

    locoTypeComboBox.setModel(getLocTypeComboBoxModel());
    locoTypeComboBox.setPreferredSize(new Dimension(120, 27));
    row4Panel.add(locoTypeComboBox);

    locoDetailPanel.add(row4Panel);

    row5Panel.setMinimumSize(new Dimension(380, 30));
    row5Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout6 = new FlowLayout(FlowLayout.LEFT);
    flowLayout6.setAlignOnBaseline(true);
    row5Panel.setLayout(flowLayout6);

    defaultDirectionLbl.setHorizontalAlignment(SwingConstants.TRAILING);
    defaultDirectionLbl.setLabelFor(backwardsRB);
    defaultDirectionLbl.setText("Default Direction");
    defaultDirectionLbl.setMaximumSize(new Dimension(120, 16));
    defaultDirectionLbl.setPreferredSize(new Dimension(120, 16));
    row5Panel.add(defaultDirectionLbl);

    directionBG.add(forwardsRB);
    forwardsRB.setSelected(true);
    forwardsRB.setText("Forwards");
    row5Panel.add(forwardsRB);

    directionBG.add(backwardsRB);
    backwardsRB.setText("Backwards");
    row5Panel.add(backwardsRB);

    locoDetailPanel.add(row5Panel);

    row6Panel.setMinimumSize(new Dimension(380, 30));
    row6Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout7 = new FlowLayout(FlowLayout.LEFT);
    flowLayout7.setAlignOnBaseline(true);
    row6Panel.setLayout(flowLayout7);

    f0Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
    f0Lbl.setText("Function Type");
    f0Lbl.setToolTipText("");
    f0Lbl.setPreferredSize(new Dimension(120, 16));
    row6Panel.add(f0Lbl);

    f0CB.setModel(getFunctionComboBoxModel());
    f0CB.setPreferredSize(new Dimension(120, 27));
    row6Panel.add(f0CB);

    locoDetailPanel.add(row6Panel);

    row7Panel.setMinimumSize(new Dimension(380, 30));
    row7Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout9 = new FlowLayout(FlowLayout.LEFT);
    flowLayout9.setAlignOnBaseline(true);
    row7Panel.setLayout(flowLayout9);

    specialFunctionsCB.setText("Special Functions");
    specialFunctionsCB.setHorizontalAlignment(SwingConstants.TRAILING);
    specialFunctionsCB.setHorizontalTextPosition(SwingConstants.LEFT);
    specialFunctionsCB.setMaximumSize(new Dimension(140, 23));
    specialFunctionsCB.setMinimumSize(new Dimension(140, 23));
    specialFunctionsCB.setPreferredSize(new Dimension(140, 23));
    specialFunctionsCB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        specialFunctionsCBActionPerformed(evt);
      }
    });
    row7Panel.add(specialFunctionsCB);

    locoDetailPanel.add(row7Panel);

    row8Panel.setMinimumSize(new Dimension(380, 30));
    row8Panel.setPreferredSize(new Dimension(380, 30));
    FlowLayout flowLayout8 = new FlowLayout(FlowLayout.LEFT);
    flowLayout8.setAlignOnBaseline(true);
    row8Panel.setLayout(flowLayout8);

    f1Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
    f1Lbl.setText("F1 Type");
    f1Lbl.setPreferredSize(new Dimension(120, 16));
    row8Panel.add(f1Lbl);

    f1CB.setModel(getF1234ComboBoxModel());
    f1CB.setPreferredSize(new Dimension(120, 27));
    row8Panel.add(f1CB);

    f2Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
    f2Lbl.setText("F2 Type");
    f2Lbl.setPreferredSize(new Dimension(60, 16));
    row8Panel.add(f2Lbl);

    f2CB.setModel(getF1234ComboBoxModel());
    f2CB.setPreferredSize(new Dimension(120, 27));
    row8Panel.add(f2CB);

    locoDetailPanel.add(row8Panel);

    row9Panel.setMinimumSize(new Dimension(380, 30));
    row9Panel.setPreferredSize(new Dimension(380, 30));
    row9Panel.setLayout(new FlowLayout(FlowLayout.LEFT));

    f3Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
    f3Lbl.setText("F3 Type");
    f3Lbl.setPreferredSize(new Dimension(120, 16));
    row9Panel.add(f3Lbl);

    f3CB.setModel(getF1234ComboBoxModel());
    f3CB.setPreferredSize(new Dimension(120, 27));
    row9Panel.add(f3CB);

    f4Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
    f4Lbl.setText("F4 Type");
    f4Lbl.setPreferredSize(new Dimension(60, 16));
    row9Panel.add(f4Lbl);

    f4CB.setModel(getF1234ComboBoxModel());
    f4CB.setPreferredSize(new Dimension(120, 27));
    row9Panel.add(f4CB);

    locoDetailPanel.add(row9Panel);
    locoDetailPanel.add(filler2);

    buttonPanel.setPreferredSize(new Dimension(380, 40));
    FlowLayout flowLayout10 = new FlowLayout();
    flowLayout10.setAlignOnBaseline(true);
    buttonPanel.setLayout(flowLayout10);

    deleteBtn.setIcon(new ImageIcon(getClass().getResource("/media/delete-24.png"))); // NOI18N
    deleteBtn.setText("Delete");
    deleteBtn.setMaximumSize(new Dimension(100, 36));
    deleteBtn.setMinimumSize(new Dimension(100, 36));
    deleteBtn.setPreferredSize(new Dimension(100, 36));
    deleteBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        deleteBtnActionPerformed(evt);
      }
    });
    buttonPanel.add(deleteBtn);
    buttonPanel.add(filler1);

    saveBtn.setIcon(new ImageIcon(getClass().getResource("/media/save-24.png"))); // NOI18N
    saveBtn.setText("Save");
    saveBtn.setMaximumSize(new Dimension(100, 36));
    saveBtn.setMinimumSize(new Dimension(100, 36));
    saveBtn.setPreferredSize(new Dimension(100, 36));
    saveBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        saveBtnActionPerformed(evt);
      }
    });
    buttonPanel.add(saveBtn);

    locoDetailPanel.add(buttonPanel);

    centerSplitPane.setRightComponent(locoDetailPanel);

    centerPanel.add(centerSplitPane, BorderLayout.CENTER);

    add(centerPanel, BorderLayout.CENTER);

    bottomPanel.setPreferredSize(new Dimension(1000, 50));
    bottomPanel.setRequestFocusEnabled(false);

    GroupLayout bottomPanelLayout = new GroupLayout(bottomPanel);
    bottomPanel.setLayout(bottomPanelLayout);
    bottomPanelLayout.setHorizontalGroup(bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 1000, Short.MAX_VALUE)
    );
    bottomPanelLayout.setVerticalGroup(bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 50, Short.MAX_VALUE)
    );

    add(bottomPanel, BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private ComboBoxModel getFunctionComboBoxModel() {
    return new DefaultComboBoxModel(FUNCTION_TYPES);
  }

  private ComboBoxModel getLocTypeComboBoxModel() {
    return new DefaultComboBoxModel(LOC_TYPES);
  }

  private ComboBoxModel getF1234ComboBoxModel() {
    return new DefaultComboBoxModel(F1234_TYPES);
  }

  private void newBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
    this.locoTableModel.refresh();
    alignLocoTable();
    Logger.debug("Create new Loco...");
    this.selectedLocomotive = new Locomotive(0, "new Loco " + (locoTableModel.getRowCount() + 1), null, null, 5, false, false, false, false, false);
    this.selectedLocomotive.setSpeedSteps(14);

    this.setComponentValues(selectedLocomotive);
    Logger.debug("Create new Loco..." + this.selectedLocomotive);
  }//GEN-LAST:event_newBtnActionPerformed

  private void locoTableMouseClicked(MouseEvent evt) {//GEN-FIRST:event_locoTableMouseClicked
    JTable source = (JTable) evt.getSource();
    int row = source.rowAtPoint(evt.getPoint());

    Locomotive loc = locoTableModel.getControllableDeviceAt(row);
    if (loc != null) {
      Logger.debug("Selected row: " + row + ", Loco Address: " + loc.getAddress());
      selectedLocomotive = TrackServiceFactory.getTrackService().getLocomotive(loc.getAddress());

      locoDetailPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createCompoundBorder(), "Edit " + selectedLocomotive.getName()));
      setComponentValues(selectedLocomotive);
    } else {
      Logger.trace("No loc found @ row " + row);
    }
  }//GEN-LAST:event_locoTableMouseClicked

  private void saveBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
    this.selectedLocomotive = this.setLocomotiveValues();
    Logger.debug("Save the Loco: " + this.selectedLocomotive);

    Locomotive loc = TrackServiceFactory.getTrackService().getLocomotive(selectedLocomotive.getAddress());
    if (loc != null) {
      this.selectedLocomotive.setId(loc.getId());

      this.selectedLocomotive.setDirection(loc.getDirection());
      this.selectedLocomotive.setSpeed(loc.getSpeed());
      //this.selectedLocomotive.setThrottle(loc.getThrottle());
      this.selectedLocomotive.setF0(loc.isF0());
      this.selectedLocomotive.setF1(loc.isF1());
      this.selectedLocomotive.setF2(loc.isF2());
      this.selectedLocomotive.setF3(loc.isF3());
      this.selectedLocomotive.setF4(loc.isF4());

      Logger.debug("Found loc with id " + loc.getId());
    }

    this.selectedLocomotive = TrackServiceFactory.getTrackService().persist(this.selectedLocomotive);
    this.setComponentValues(selectedLocomotive);
    this.locoTableModel.refresh();
    alignLocoTable();
  }//GEN-LAST:event_saveBtnActionPerformed

  private void deleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
    Logger.debug("Delete Loco: " + this.selectedLocomotive);
    TrackServiceFactory.getTrackService().remove(selectedLocomotive);
    this.selectedLocomotive = null;
    this.locoTableModel.refresh();
    this.setComponentValues(selectedLocomotive);
    alignLocoTable();
  }//GEN-LAST:event_deleteBtnActionPerformed

  private void specialFunctionsCBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_specialFunctionsCBActionPerformed
    this.f1CB.setEnabled(this.specialFunctionsCB.isSelected());
    this.f2CB.setEnabled(this.specialFunctionsCB.isSelected());
    this.f3CB.setEnabled(this.specialFunctionsCB.isSelected());
    this.f4CB.setEnabled(this.specialFunctionsCB.isSelected());
  }//GEN-LAST:event_specialFunctionsCBActionPerformed

  public void refresh() {
    this.locoTableModel.refresh();
    alignLocoTable();
  }

  private void refreshBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
    refresh();
  }//GEN-LAST:event_refreshBtnActionPerformed

  //Create Loco from fields  
  protected Locomotive setLocomotiveValues() {
    Integer address = (Integer) this.addressSpinner.getValue();
    String type = (String) this.locoTypeComboBox.getSelectedItem();
    String name = this.nameTF.getText();
    String description = this.descriptionTF.getText();
    String catalogNumber = this.catalogNrTF.getText();

    Integer speedSteps = (Integer) this.speedStepsSpinner.getValue();
    Integer minSpeed = (Integer) this.minSpeedSpinner.getValue();

    Boolean specialFunctions = this.specialFunctionsCB.isSelected();
    String f0type = (String) this.f0CB.getSelectedItem();
    String f1type = (String) this.f1CB.getSelectedItem();
    String f2type = (String) this.f2CB.getSelectedItem();
    String f3type = (String) this.f3CB.getSelectedItem();
    String f4type = (String) this.f4CB.getSelectedItem();

    Locomotive loco = new Locomotive(address, name, description, catalogNumber, minSpeed, false, false, false, false, false);

  
    if (this.forwardsRB.isSelected()) {
      loco.setDefaultDirection(Direction.FORWARDS);
    } else {
      loco.setDefaultDirection(Direction.BACKWARDS);
    }

    loco.setSpeedSteps(speedSteps);
//    loco.setSpecialFunctions(specialFunctions);

//    loco.setF0Type(f0type);

//    if (loco.getFunctionCount() > 1) {
//      loco.setF1Type(f0type);
//      loco.setF1Type(f1type);
//      loco.setF2Type(f2type);
//      loco.setF3Type(f3type);
//      loco.setF4Type(f4type);
//    }
    return loco;
  }

  //Set fields from loco
  protected void setComponentValues(Locomotive loco) {
    if (loco != null) {
      this.addressSpinner.setValue(loco.getAddress());
      this.nameTF.setText(loco.getName());
      this.descriptionTF.setText(loco.getDescription());
      this.catalogNrTF.setText(loco.getCatalogNumber());

      if (loco.getDefaultDirection() != null) {
        if (loco.getDefaultDirection().equals(Direction.FORWARDS)) {
          this.forwardsRB.setSelected(true);
        } else {
          this.backwardsRB.setSelected(true);
        }
      } else {
        this.forwardsRB.setSelected(true);
      }

      this.minSpeedSpinner.setValue(loco.getvMin());
      this.speedStepsSpinner.setValue(loco.getSpeedSteps());
      //this.locoTypeComboBox.setSelectedItem(loco.getType());
     // this.f0CB.setSelectedItem(loco.getF0Type());

      this.specialFunctionsCB.setSelected(loco.getFunctionCount() > 1);

//      this.f1CB.setSelectedItem(loco.getF1Type());
//      this.f2CB.setSelectedItem(loco.getF2Type());
//      this.f3CB.setSelectedItem(loco.getF3Type());
//      this.f4CB.setSelectedItem(loco.getF4Type());

      this.f1CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f2CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f3CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f4CB.setEnabled(this.specialFunctionsCB.isSelected());

      this.idLbl.setText("ID: " + loco.getId());
    } else {
      this.addressSpinner.setValue(0);
      this.nameTF.setText("");
      this.descriptionTF.setText("");
      this.catalogNrTF.setText("");

      this.forwardsRB.setSelected(true);

      this.minSpeedSpinner.setValue(0);
      this.speedStepsSpinner.setValue(0);
      this.locoTypeComboBox.setSelectedItem("");
      this.f0CB.setSelectedItem("");

      this.specialFunctionsCB.setSelected(false);

      this.f1CB.setSelectedItem(false);
      this.f2CB.setSelectedItem(false);
      this.f3CB.setSelectedItem(false);
      this.f4CB.setSelectedItem(false);

      this.f1CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f2CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f3CB.setEnabled(this.specialFunctionsCB.isSelected());
      this.f4CB.setEnabled(this.specialFunctionsCB.isSelected());

      this.idLbl.setText("ID: --");
    }
  }

  public static void main(String args[]) {
    Configurator.defaultConfig().level(org.pmw.tinylog.Level.DEBUG).activate();

    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      //UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");

    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
      Logger.warn("Can't set the LookAndFeel: " + ex);
    }
    java.awt.EventQueue.invokeLater(() -> {

      LocomotivePanel testPanel = new LocomotivePanel();
      JFrame testFrame = new JFrame();
      JDialog testDialog = new JDialog(testFrame, true);

      testDialog.add(testPanel);
      testDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(testDialog.getClass().getResource("/media/jcs-train-64.png")));

      testDialog.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
          System.exit(0);
        }
      });
      testDialog.pack();
      testDialog.setLocationRelativeTo(null);

      testDialog.setVisible(true);
    });
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JLabel LocoTypeLbl;
  private JLabel addressLbl;
  private JSpinner addressSpinner;
  private JRadioButton backwardsRB;
  private JPanel bottomPanel;
  private JPanel buttonPanel;
  private JTextField catalogNrTF;
  private JLabel catalogeNrLbl;
  private JPanel centerPanel;
  private JSplitPane centerSplitPane;
  private JLabel defaultDirectionLbl;
  private JButton deleteBtn;
  private JLabel descriptionLbl;
  private JTextField descriptionTF;
  private ButtonGroup directionBG;
  private JComboBox<String> f0CB;
  private JLabel f0Lbl;
  private JComboBox<String> f1CB;
  private JLabel f1Lbl;
  private JComboBox<String> f2CB;
  private JLabel f2Lbl;
  private JComboBox<String> f3CB;
  private JLabel f3Lbl;
  private JComboBox<String> f4CB;
  private JLabel f4Lbl;
  private Box.Filler filler1;
  private Box.Filler filler2;
  private JRadioButton forwardsRB;
  private JLabel idLbl;
  private JPanel locoDetailPanel;
  private JTable locoTable;
  private JScrollPane locoTableScrollPane;
  private JComboBox<String> locoTypeComboBox;
  private JLabel minSpeedLbl;
  private JSpinner minSpeedSpinner;
  private JLabel nameLbl;
  private JTextField nameTF;
  private JButton newBtn;
  private JButton refreshBtn;
  private JPanel row1Panel;
  private JPanel row2Panel;
  private JPanel row3Panel;
  private JPanel row4Panel;
  private JPanel row5Panel;
  private JPanel row6Panel;
  private JPanel row7Panel;
  private JPanel row8Panel;
  private JPanel row9Panel;
  private JButton saveBtn;
  private Locomotive selectedLocomotive;
  private JCheckBox specialFunctionsCB;
  private JLabel speedStepsLbl;
  private JSpinner speedStepsSpinner;
  private JPanel topPanel;
  // End of variables declaration//GEN-END:variables
}
