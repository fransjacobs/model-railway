/*
 * Copyright 2024 fransjacobs.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.commandStation.autopilot.state;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import jcs.JCS;
import jcs.commandStation.FeedbackController;
import jcs.commandStation.events.SensorEvent;
import jcs.entities.BlockBean;
import jcs.entities.BlockBean.BlockState;
import jcs.entities.RouteBean;
import jcs.entities.RouteElementBean;
import jcs.entities.SensorBean;
import jcs.persistence.PersistenceFactory;
import jcs.ui.layout.events.TileEvent;
import jcs.ui.layout.tiles.TileFactory;
import org.tinylog.Logger;

/**
 *
 * @author fransjacobs
 */
public class DispatcherTestDialog extends javax.swing.JDialog implements StateEventListener {

  final TrainDispatcher trainDispatcher;

  private final ExecutorService executor;

  /**
   * Creates new form DispatcherTestDialog
   *
   * @param parent
   * @param modal
   * @param dispatcher
   */
  public DispatcherTestDialog(java.awt.Frame parent, boolean modal, TrainDispatcher dispatcher) {
    super(parent, modal);
    this.trainDispatcher = dispatcher;
    this.executor = Executors.newSingleThreadExecutor();

    initComponents();
    if (this.trainDispatcher != null) {
      this.setTitle(dispatcher.getName());
      this.stateLabel.setText(dispatcher.getDispatcherState().toString());
    } else {
      this.setTitle("No TrainDispatcher set");
      this.stateLabel.setText("No TrainDispatcher set");
    }
  }

  private void toggleSensor(SensorBean sb) {
    sb.toggle();
    //Logger.trace("id: " + sb.getId() + " state " + sb.getStatus());
    SensorEvent sensorEvent = new SensorEvent(sb);
    this.executor.execute(() -> fireFeedbackEvent(sensorEvent));
  }

  private void fireFeedbackEvent(SensorEvent sensorEvent) {
    List<FeedbackController> acl = JCS.getJcsCommandStation().getFeedbackControllers();
    for (FeedbackController fbc : acl) {
      fbc.fireSensorEventListeners(sensorEvent);
    }
  }

  @Override
  public void onStateChange(String state) {
    this.stateLabel.setText(state);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    northPanel = new javax.swing.JPanel();
    statePanel = new javax.swing.JPanel();
    startButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    stateLabel = new javax.swing.JLabel();
    buttenPanel = new javax.swing.JPanel();
    nextButton = new javax.swing.JButton();
    unlockButton = new javax.swing.JButton();
    southPanel = new javax.swing.JPanel();
    sensorTB1 = new javax.swing.JToggleButton();
    sensorTB2 = new javax.swing.JToggleButton();
    sensorTB3 = new javax.swing.JToggleButton();
    sensorTB4 = new javax.swing.JToggleButton();
    sensorTB5 = new javax.swing.JToggleButton();
    sensorTB6 = new javax.swing.JToggleButton();
    sensorTB7 = new javax.swing.JToggleButton();
    sensorTB8 = new javax.swing.JToggleButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setMinimumSize(new java.awt.Dimension(650, 200));

    northPanel.setMinimumSize(new java.awt.Dimension(450, 120));
    northPanel.setPreferredSize(new java.awt.Dimension(600, 115));
    jcs.ui.swing.layout.VerticalFlowLayout verticalFlowLayout1 = new jcs.ui.swing.layout.VerticalFlowLayout();
    verticalFlowLayout1.setvAlignment(1);
    northPanel.setLayout(verticalFlowLayout1);

    statePanel.setPreferredSize(new java.awt.Dimension(550, 50));
    java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
    flowLayout1.setAlignOnBaseline(true);
    statePanel.setLayout(flowLayout1);

    startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/right-24.png"))); // NOI18N
    startButton.setPreferredSize(new java.awt.Dimension(40, 40));
    startButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startButtonActionPerformed(evt);
      }
    });
    statePanel.add(startButton);

    stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/circle-stop.png"))); // NOI18N
    stopButton.setPreferredSize(new java.awt.Dimension(40, 40));
    stopButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopButtonActionPerformed(evt);
      }
    });
    statePanel.add(stopButton);

    stateLabel.setText("State");
    statePanel.add(stateLabel);

    northPanel.add(statePanel);

    buttenPanel.setPreferredSize(new java.awt.Dimension(550, 50));
    java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
    flowLayout2.setAlignOnBaseline(true);
    buttenPanel.setLayout(flowLayout2);

    nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/direction-right-24.png"))); // NOI18N
    nextButton.setText("Next");
    nextButton.setIconTextGap(2);
    nextButton.setMargin(new java.awt.Insets(2, 2, 3, 2));
    nextButton.setPreferredSize(new java.awt.Dimension(100, 40));
    nextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextButtonActionPerformed(evt);
      }
    });
    buttenPanel.add(nextButton);

    unlockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/river-black.png"))); // NOI18N
    unlockButton.setText("Reset");
    unlockButton.setIconTextGap(2);
    unlockButton.setMargin(new java.awt.Insets(2, 2, 3, 2));
    unlockButton.setPreferredSize(new java.awt.Dimension(100, 40));
    unlockButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        unlockButtonActionPerformed(evt);
      }
    });
    buttenPanel.add(unlockButton);

    northPanel.add(buttenPanel);

    getContentPane().add(northPanel, java.awt.BorderLayout.NORTH);

    southPanel.setMinimumSize(new java.awt.Dimension(600, 50));
    southPanel.setPreferredSize(new java.awt.Dimension(50, 50));
    java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 3);
    flowLayout3.setAlignOnBaseline(true);
    southPanel.setLayout(flowLayout3);

    sensorTB1.setText("M1");
    sensorTB1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB1ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB1);

    sensorTB2.setText("M2");
    sensorTB2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB2ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB2);

    sensorTB3.setText("M3");
    sensorTB3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB3ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB3);

    sensorTB4.setText("M4");
    sensorTB4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB4ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB4);

    sensorTB5.setText("M5");
    sensorTB5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB5ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB5);

    sensorTB6.setText("M6");
    sensorTB6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB6ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB6);

    sensorTB7.setText("M7");
    sensorTB7.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB7ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB7);

    sensorTB8.setText("M8");
    sensorTB8.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sensorTB8ActionPerformed(evt);
      }
    });
    southPanel.add(sensorTB8);

    getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
    if (trainDispatcher != null) {
      trainDispatcher.nextState();
      trainDispatcher.execute();
      this.stateLabel.setText(trainDispatcher.getDispatcherState().toString());
    }
  }//GEN-LAST:event_nextButtonActionPerformed

  private void unlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockButtonActionPerformed
    List<RouteBean> routes = PersistenceFactory.getService().getRoutes();
    int lockedCounter = 0;
    for (RouteBean route : routes) {
      if (route.isLocked()) {
        route.setLocked(false);
        PersistenceFactory.getService().persist(route);
        lockedCounter++;
      }
      resetRoute(route);
    }
    Logger.debug("Unlocked " + lockedCounter + " routes out of " + routes.size());

    // Reset route
    int occupiedBlockCounter = 0;
    int freeBlockCounter = 0;
    List<BlockBean> blocks = PersistenceFactory.getService().getBlocks();
    for (BlockBean block : blocks) {
      if (block.getLocomotiveId() != null) {
        if (null == block.getBlockState()) {
          if (BlockState.OCCUPIED == block.getBlockState()) {
            occupiedBlockCounter++;
          }
        } else {
          switch (block.getBlockState()) {
            case LOCKED, ARRIVING -> {
              //destinations block, reset!
              block.setLocomotive(null);
              block.setBlockState(BlockBean.BlockState.FREE);
              block.setArrivalSuffix(null);
              freeBlockCounter++;
            }
            case DEPARTING, LEAVING -> {
              block.setBlockState(BlockBean.BlockState.OCCUPIED);
              block.setArrivalSuffix(null);
              occupiedBlockCounter++;
            }
            default -> {
              if (BlockState.OCCUPIED == block.getBlockState()) {
                occupiedBlockCounter++;
              }
            }
          }
        }
      } else {
        block.setBlockState(BlockBean.BlockState.FREE);
        freeBlockCounter++;
      }
      PersistenceFactory.getService().persist(block);
      showBlockStatus(block);
    }

    Logger.debug("Occupied blocks: " + occupiedBlockCounter + " Free blocks " + freeBlockCounter + " of total " + blocks.size() + " blocks");
  }//GEN-LAST:event_unlockButtonActionPerformed

  private void resetRoute(RouteBean route) {
    List<RouteElementBean> routeElements = route.getRouteElements();
    for (RouteElementBean re : routeElements) {
      String tileId = re.getTileId();
      TileEvent tileEvent = new TileEvent(tileId, false);
      TileFactory.fireTileEventListener(tileEvent);
    }
  }

  private void showBlockStatus(BlockBean blockBean) {
    Logger.trace("Show Block " + blockBean.toString());
    TileEvent tileEvent = new TileEvent(blockBean);
    TileFactory.fireTileEventListener(tileEvent);
  }

  private void sensorTB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB1ActionPerformed
    SensorBean sb = new SensorBean(0, 1, this.sensorTB1.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB1ActionPerformed

  private void sensorTB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB2ActionPerformed
    SensorBean sb = new SensorBean(0, 2, this.sensorTB2.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB2ActionPerformed

  private void sensorTB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB3ActionPerformed
    SensorBean sb = new SensorBean(0, 3, this.sensorTB3.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB3ActionPerformed

  private void sensorTB4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB4ActionPerformed
    SensorBean sb = new SensorBean(0, 4, this.sensorTB4.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB4ActionPerformed

  private void sensorTB5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB5ActionPerformed
    SensorBean sb = new SensorBean(0, 5, this.sensorTB5.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB5ActionPerformed

  private void sensorTB6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB6ActionPerformed
    SensorBean sb = new SensorBean(0, 6, this.sensorTB6.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB6ActionPerformed

  private void sensorTB7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB7ActionPerformed
    SensorBean sb = new SensorBean(0, 7, this.sensorTB7.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB7ActionPerformed

  private void sensorTB8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorTB8ActionPerformed
    SensorBean sb = new SensorBean(0, 8, this.sensorTB8.isSelected() ? 0 : 1);
    toggleSensor(sb);
  }//GEN-LAST:event_sensorTB8ActionPerformed

  private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
    if (this.trainDispatcher != null) {
      this.trainDispatcher.start();
    }
  }//GEN-LAST:event_startButtonActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    if (this.trainDispatcher != null) {
      this.trainDispatcher.stopRunning();
    }
  }//GEN-LAST:event_stopButtonActionPerformed

  public static DispatcherTestDialog showDialog(TrainDispatcher dispatcher) {
    DispatcherTestDialog dialog = new DispatcherTestDialog(new javax.swing.JFrame(), false, dispatcher);

    dispatcher.addStateEventListener(dialog);

    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(java.awt.event.WindowEvent e) {
        dialog.trainDispatcher.autoPilot.startStopLocomotive(dialog.trainDispatcher.getLocomotiveBean(), false);
        dialog.dispose();
      }
    });
    dialog.setLocationRelativeTo(null);
    dialog.pack();
    dialog.setVisible(true);

    return dialog;

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttenPanel;
  private javax.swing.JButton nextButton;
  private javax.swing.JPanel northPanel;
  private javax.swing.JToggleButton sensorTB1;
  private javax.swing.JToggleButton sensorTB2;
  private javax.swing.JToggleButton sensorTB3;
  private javax.swing.JToggleButton sensorTB4;
  private javax.swing.JToggleButton sensorTB5;
  private javax.swing.JToggleButton sensorTB6;
  private javax.swing.JToggleButton sensorTB7;
  private javax.swing.JToggleButton sensorTB8;
  private javax.swing.JPanel southPanel;
  private javax.swing.JButton startButton;
  private javax.swing.JLabel stateLabel;
  private javax.swing.JPanel statePanel;
  private javax.swing.JButton stopButton;
  private javax.swing.JButton unlockButton;
  // End of variables declaration//GEN-END:variables
}
