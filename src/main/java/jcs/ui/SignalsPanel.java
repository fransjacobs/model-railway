/*
 * Copyright (C) 2019 Frans Jacobs.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package jcs.ui;

import java.awt.GridLayout;
import java.util.Collections;
import java.util.List;
import jcs.entities.AccessoryBean;
import jcs.trackservice.TrackControllerFactory;
import jcs.ui.widgets.SignalRowPanel;
import org.tinylog.Logger;

/**
 *
 * @author Frans Jacobs
 */
public class SignalsPanel extends javax.swing.JPanel {

    /**
     * Creates new form SignalsPanel
     */
    public SignalsPanel() {
        initComponents();
        initSignalPanels();
    }

    private void initSignalPanels() {
        refreshPanel();
    }

    public void refreshPanel() {
        if (TrackControllerFactory.getTrackController() == null) {
            return;
        }
        //stub
        List<AccessoryBean> signals = Collections.EMPTY_LIST; // TrackControllerFactory.getTrackService().getSignals();

        Logger.trace("There are " + signals.size() + " signals...");

        this.removeAll();
        int maxW = this.getPreferredSize().width;
        int w = 0, rows = 1, cols = 0;

        for (AccessoryBean signal : signals) {
            SignalRowPanel signalRowPanel = new SignalRowPanel(signal, SignalRowPanel.Y_AXIS);
            signalRowPanel.requestFocusInWindow();
            w = w + signalRowPanel.getPreferredSize().width;
            if (rows == 1) {
                cols++;
            }
            if (w > maxW) {
                //next row
                rows++;
                w = 0;
            }

            this.add(signalRowPanel);
            TrackControllerFactory.getTrackController().addAccessoryListener(signalRowPanel);
        }
        GridLayout gl = new GridLayout(rows, cols);
        this.setLayout(gl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 805));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents

  private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
      Logger.debug("keyCode: " + evt.getKeyCode() + " paramString: " + evt.paramString() + "" + evt.getExtendedKeyCode());
  }//GEN-LAST:event_formKeyPressed

  private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
      Logger.debug("keyCode: " + evt.getKeyCode() + " paramString: " + evt.paramString() + "" + evt.getExtendedKeyCode());
  }//GEN-LAST:event_formKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
