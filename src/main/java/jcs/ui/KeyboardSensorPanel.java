/*
 * Copyright 2023 frans.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.net.URL;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jcs.ui.swing.layout.VerticalFlowLayout;
import jcs.ui.widgets.KeyboardPanelWide;
import jcs.ui.widgets.SensorPanelWide;
import org.tinylog.Logger;

/**
 *
 * @author frans
 */
public class KeyboardSensorPanel extends JPanel {

  private static final long serialVersionUID = 3984321012712562834L;

  /**
   * Creates new form FeedbackMonitorPanel
   */
  public KeyboardSensorPanel() {
    initComponents();
    //For now this feedback screen is disabled
    if ("true".equals(System.getProperty("show.sensor.panels", "false"))) {
      widgetPanel.remove(feedbackPanel);
      feedbackPanel.setVisible(false);
      widgetPanel.setVisible(false);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    widgetPanel = new JPanel();
    accessoryPanel = new JPanel();
    accessoryKeyboardPanel = new KeyboardPanelWide();
    feedbackPanel = new JPanel();
    sensorModulePanel = new SensorPanelWide();
    messagesPanel = new JPanel();

    setMinimumSize(new Dimension(1010, 850));
    setName("Form"); // NOI18N
    setPreferredSize(new Dimension(1010, 850));
    addComponentListener(new ComponentAdapter() {
      public void componentHidden(ComponentEvent evt) {
        formComponentHidden(evt);
      }
      public void componentShown(ComponentEvent evt) {
        formComponentShown(evt);
      }
    });
    FlowLayout flowLayout1 = new FlowLayout(FlowLayout.LEFT);
    flowLayout1.setAlignOnBaseline(true);
    setLayout(flowLayout1);

    widgetPanel.setName("widgetPanel"); // NOI18N
    VerticalFlowLayout verticalFlowLayout1 = new VerticalFlowLayout();
    verticalFlowLayout1.sethGap(0);
    verticalFlowLayout1.sethAlignment(0);
    widgetPanel.setLayout(verticalFlowLayout1);

    accessoryPanel.setBorder(BorderFactory.createTitledBorder("Accessories"));
    accessoryPanel.setMinimumSize(new Dimension(975, 335));
    accessoryPanel.setName("accessoryPanel"); // NOI18N
    accessoryPanel.setPreferredSize(new Dimension(985, 340));
    accessoryPanel.setLayout(new BorderLayout());

    accessoryKeyboardPanel.setName("accessoryKeyboardPanel"); // NOI18N
    accessoryPanel.add(accessoryKeyboardPanel, BorderLayout.CENTER);

    widgetPanel.add(accessoryPanel);

    feedbackPanel.setBorder(BorderFactory.createTitledBorder("Feedback Modules"));
    feedbackPanel.setName("feedbackPanel"); // NOI18N
    feedbackPanel.setPreferredSize(new Dimension(985, 180));
    feedbackPanel.setLayout(new BorderLayout());

    sensorModulePanel.setName("sensorModulePanel"); // NOI18N
    sensorModulePanel.setPreferredSize(new Dimension(895, 150));
    feedbackPanel.add(sensorModulePanel, BorderLayout.CENTER);

    widgetPanel.add(feedbackPanel);

    messagesPanel.setBorder(BorderFactory.createTitledBorder("Command Station Messages"));
    messagesPanel.setName("messagesPanel"); // NOI18N
    messagesPanel.setPreferredSize(new Dimension(985, 300));
    messagesPanel.setLayout(new BorderLayout());
    widgetPanel.add(messagesPanel);

    add(widgetPanel);
  }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      //registerListeners();
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
      //removeListeners();
    }//GEN-LAST:event_formComponentHidden

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private KeyboardPanelWide accessoryKeyboardPanel;
  private JPanel accessoryPanel;
  private JPanel feedbackPanel;
  private JPanel messagesPanel;
  private SensorPanelWide sensorModulePanel;
  private JPanel widgetPanel;
  // End of variables declaration//GEN-END:variables

  //Testing
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
      Logger.error("Can't set the LookAndFeel: " + ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
      KeyboardSensorPanel testPanel = new KeyboardSensorPanel();
      JFrame testFrame = new JFrame("ControllerPanel Tester");
      //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/media/jcs-train-64.png")));
      URL iconUrl = KeyboardSensorPanel.class.getResource("/media/jcs-train-2-512.png");
      if (iconUrl != null) {
        testFrame.setIconImage(new ImageIcon(iconUrl).getImage());
      }

      JFrame.setDefaultLookAndFeelDecorated(true);
      testFrame.add(testPanel);

      testFrame.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
          System.exit(0);
        }
      });
      testFrame.pack();
      testFrame.setLocationRelativeTo(null);
      testFrame.setVisible(true);
    });
  }
}
