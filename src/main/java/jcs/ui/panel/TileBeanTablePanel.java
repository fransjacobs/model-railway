/*
 * Copyright 2025 Frans Jacobs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui.panel;

import com.twelvemonkeys.image.ImageUtil;
import java.awt.Component;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.table.DefaultTableCellRenderer;
import jcs.entities.TileBean;
import jcs.ui.table.model.TileBeanTableModel;
import org.tinylog.Logger;

/**
 *
 */
public class TileBeanTablePanel extends JPanel {

  private static final long serialVersionUID = 3293638209472819910L;

  public TileBeanTablePanel() {
    initComponents();

    tileBeanTable.setDefaultRenderer(Image.class, new TileIconRenderer());

    init();
  }

  private void init() {
    tileBeanTable.setDragEnabled(true);

    tileBeanTable.setTransferHandler(new TransferHandler() {
      private static final long serialVersionUID = -7249852729273226500L;

      @Override
      public int getSourceActions(JComponent c) {
        // We specify that the data can be COPIED.
        return COPY;
      }

      @Override
      protected Transferable createTransferable(JComponent c) {
        JTable table = (JTable) c;
        int selectedRow = table.getSelectedRow();
        if (selectedRow < 0) {
          return null; // No selection, so nothing to transfer.
        }

        TileBeanTableModel model = (TileBeanTableModel) tileBeanTable.getModel();

        TileBean tb = model.getTileBean(selectedRow);

        Logger.trace("TileBean: " + tb.getName());
        return new TileBeanTablePanel.TileBeanTransferable(tb);
      }
    });

    this.tileTableModel.refresh();
  }

  private class TileIconRenderer extends DefaultTableCellRenderer {

    private static final long serialVersionUID = 4206582012445871625L;

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
      super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
      if (value != null) {
        ImageIcon imageIcon = (ImageIcon) value;
        Image img = imageIcon.getImage();
        int size = 24;
        float aspect = (float) img.getHeight(null) / (float) img.getWidth(null);
        img = img.getScaledInstance(size, (int) (size * aspect), Image.SCALE_SMOOTH);
        BufferedImage bi = ImageUtil.toBuffered(img);
        setIcon(new ImageIcon(bi));
        setHorizontalAlignment(JLabel.CENTER);
        setText("");
      }
      return this;
    }
  }

  public void refresh() {
    tileTableModel.refresh();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tileTableModel = new jcs.ui.table.model.TileBeanTableModel();
    tileBeanSP = new javax.swing.JScrollPane();
    tileBeanTable = new javax.swing.JTable();

    setPreferredSize(new java.awt.Dimension(300, 410));
    setLayout(new java.awt.BorderLayout());

    tileBeanSP.setViewportView(tileBeanTable);

    tileBeanTable.setAutoCreateRowSorter(true);
    tileBeanTable.setModel(tileTableModel);
    tileBeanTable.setDragEnabled(true);
    tileBeanTable.setRowHeight(30);
    tileBeanTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    tileBeanTable.setShowGrid(false);
    tileBeanTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tileBeanTableMouseReleased(evt);
      }
    });
    tileBeanSP.setViewportView(tileBeanTable);

    add(tileBeanSP, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void tileBeanTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileBeanTableMouseReleased
    int row = tileBeanTable.getSelectedRow();

    TileBean tileBean = tileTableModel.getBeanAt(row);
    if (row >= 0 && tileBean != null) {
      Logger.trace("Selected " + tileBean.getName() + " " + evt.getClickCount());

    }
  }//GEN-LAST:event_tileBeanTableMouseReleased

  private java.awt.Frame getParentFrame() {
    JFrame frame = (JFrame) SwingUtilities.getRoot(this);
    return frame;
  }

  static class TileBeanTransferable implements Transferable {

    private final TileBean tileBean;

    public TileBeanTransferable(TileBean tileBean) {
      this.tileBean = tileBean;
    }

    @Override
    public DataFlavor[] getTransferDataFlavors() {
      return new DataFlavor[]{TileBean.TILE_BEAN_FLAVOR};
    }

    @Override
    public boolean isDataFlavorSupported(DataFlavor flavor) {
      return TileBean.TILE_BEAN_FLAVOR.equals(flavor);
    }

    @Override
    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
      if (isDataFlavorSupported(flavor)) {
        return tileBean;
      } else {
        throw new UnsupportedFlavorException(flavor);
      }
    }
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane tileBeanSP;
  private javax.swing.JTable tileBeanTable;
  private jcs.ui.table.model.TileBeanTableModel tileTableModel;
  // End of variables declaration//GEN-END:variables

}
