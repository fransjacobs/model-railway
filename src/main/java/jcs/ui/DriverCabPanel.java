/*
 * Copyright 2023 frans.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JSlider;
import javax.swing.event.ChangeListener;
import jcs.controller.ControllerFactory;
import jcs.controller.events.LocomotiveDirectionEvent;
import jcs.controller.events.LocomotiveDirectionEventListener;
import jcs.controller.events.LocomotiveSpeedEvent;
import jcs.controller.events.LocomotiveSpeedEventListener;
import jcs.entities.LocomotiveBean;
import jcs.entities.enums.Direction;
import org.tinylog.Logger;

/**
 *
 * @author frans
 */
public class DriverCabPanel extends javax.swing.JPanel implements LocomotiveDirectionEventListener, LocomotiveSpeedEventListener {
  
  private LocomotiveBean locomotiveBean;
  
  private final ExecutorService executor;
  
  public DriverCabPanel() {
    executor = Executors.newCachedThreadPool();
    initComponents();
  }
  
  private void postInit() {
    if (ControllerFactory.getController() != null) {
      ControllerFactory.getController().addLocomotiveSpeedEventListener(this);
      ControllerFactory.getController().addLocomotiveDirectionEventListener(this);
    }
  }
  
  @Override
  public void setVisible(boolean aFlag) {
    if (!aFlag && ControllerFactory.getController() != null) {
      ControllerFactory.getController().removeLocomotiveSpeedEventListener(this);
      ControllerFactory.getController().removeLocomotiveDirectionEventListener(this);
      ControllerFactory.getController().removeLocomotiveFunctionEventListener(this.functionsPanel);
    }
    super.setVisible(aFlag);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    forwardReverseBG = new javax.swing.ButtonGroup();
    centerPanel = new javax.swing.JPanel();
    gaugePanel = new javax.swing.JPanel();
    speedGauge = new eu.hansolo.steelseries.gauges.Radial();
    sliderPanel = new javax.swing.JPanel();
    speedSlider = new javax.swing.JSlider();
    functionsPanel = new jcs.ui.widgets.FunctionsPanel();
    southPanel = new javax.swing.JPanel();
    speed1Button = new javax.swing.JButton();
    speed2Button = new javax.swing.JButton();
    speed3Button = new javax.swing.JButton();
    speed4Button = new javax.swing.JButton();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(65, 0), new java.awt.Dimension(65, 0), new java.awt.Dimension(20, 32767));
    reverseButton = new javax.swing.JToggleButton();
    forwardButton = new javax.swing.JToggleButton();
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(20, 32767));
    stopButton = new javax.swing.JButton();

    setMinimumSize(new java.awt.Dimension(450, 300));
    setPreferredSize(new java.awt.Dimension(450, 300));
    setLayout(new java.awt.BorderLayout());

    centerPanel.setMinimumSize(new java.awt.Dimension(440, 240));
    centerPanel.setPreferredSize(new java.awt.Dimension(440, 240));

    gaugePanel.setMinimumSize(new java.awt.Dimension(200, 235));
    jcs.ui.swing.layout.VerticalFlowLayout verticalFlowLayout1 = new jcs.ui.swing.layout.VerticalFlowLayout();
    verticalFlowLayout1.sethGap(2);
    verticalFlowLayout1.sethAlignment(2);
    verticalFlowLayout1.setvAlignment(2);
    verticalFlowLayout1.setvGap(15);
    gaugePanel.setLayout(verticalFlowLayout1);

    speedGauge.setAutoscrolls(true);
    speedGauge.setBackgroundColor(eu.hansolo.steelseries.tools.BackgroundColor.TRANSPARENT);
    speedGauge.setDoubleBuffered(true);
    speedGauge.setFrameVisible(false);
    speedGauge.setLcdVisible(false);
    speedGauge.setLedVisible(false);
    speedGauge.setMinimumSize(new java.awt.Dimension(190, 190));
    speedGauge.setOrientation(eu.hansolo.steelseries.tools.Orientation.CENTER);
    speedGauge.setPreferredSize(new java.awt.Dimension(190, 190));
    speedGauge.setTitle("");
    speedGauge.setTitleAndUnitFontEnabled(true);
    speedGauge.setUnitString("km/h");
    gaugePanel.add(speedGauge);

    centerPanel.add(gaugePanel);

    sliderPanel.setPreferredSize(new java.awt.Dimension(30, 235));
    sliderPanel.setLayout(new javax.swing.BoxLayout(sliderPanel, javax.swing.BoxLayout.LINE_AXIS));

    speedSlider.setMajorTickSpacing(10);
    speedSlider.setOrientation(javax.swing.JSlider.VERTICAL);
    speedSlider.setValue(0);
    speedSlider.setDoubleBuffered(true);
    speedSlider.setMinimumSize(new java.awt.Dimension(25, 200));
    speedSlider.setPreferredSize(new java.awt.Dimension(25, 200));
    speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        speedSliderStateChanged(evt);
      }
    });
    sliderPanel.add(speedSlider);

    centerPanel.add(sliderPanel);

    functionsPanel.setEnabled(true);
    centerPanel.add(functionsPanel);

    add(centerPanel, java.awt.BorderLayout.CENTER);

    southPanel.setMinimumSize(new java.awt.Dimension(440, 45));
    southPanel.setPreferredSize(new java.awt.Dimension(450, 45));

    speed1Button.setText("I");
    speed1Button.setMargin(new java.awt.Insets(2, 2, 2, 2));
    speed1Button.setMinimumSize(new java.awt.Dimension(30, 30));
    speed1Button.setPreferredSize(new java.awt.Dimension(30, 30));
    speed1Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        speed1ButtonActionPerformed(evt);
      }
    });
    southPanel.add(speed1Button);

    speed2Button.setText("II");
    speed2Button.setMargin(new java.awt.Insets(2, 2, 2, 2));
    speed2Button.setMinimumSize(new java.awt.Dimension(30, 30));
    speed2Button.setPreferredSize(new java.awt.Dimension(30, 30));
    speed2Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        speed2ButtonActionPerformed(evt);
      }
    });
    southPanel.add(speed2Button);

    speed3Button.setText("III");
    speed3Button.setMargin(new java.awt.Insets(2, 2, 2, 2));
    speed3Button.setMinimumSize(new java.awt.Dimension(30, 30));
    speed3Button.setPreferredSize(new java.awt.Dimension(30, 30));
    speed3Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        speed3ButtonActionPerformed(evt);
      }
    });
    southPanel.add(speed3Button);

    speed4Button.setText("IIII");
    speed4Button.setMargin(new java.awt.Insets(2, 2, 2, 2));
    speed4Button.setMinimumSize(new java.awt.Dimension(30, 30));
    speed4Button.setPreferredSize(new java.awt.Dimension(30, 30));
    speed4Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        speed4ButtonActionPerformed(evt);
      }
    });
    southPanel.add(speed4Button);
    southPanel.add(filler1);

    forwardReverseBG.add(reverseButton);
    reverseButton.setText("<");
    reverseButton.setMinimumSize(new java.awt.Dimension(30, 30));
    reverseButton.setPreferredSize(new java.awt.Dimension(30, 30));
    reverseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        reverseButtonActionPerformed(evt);
      }
    });
    southPanel.add(reverseButton);

    forwardReverseBG.add(forwardButton);
    forwardButton.setText(">");
    forwardButton.setMinimumSize(new java.awt.Dimension(30, 30));
    forwardButton.setPreferredSize(new java.awt.Dimension(30, 30));
    forwardButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        forwardButtonActionPerformed(evt);
      }
    });
    southPanel.add(forwardButton);
    southPanel.add(filler2);

    stopButton.setText("Stop");
    stopButton.setMinimumSize(new java.awt.Dimension(75, 30));
    stopButton.setPreferredSize(new java.awt.Dimension(75, 30));
    stopButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopButtonActionPerformed(evt);
      }
    });
    southPanel.add(stopButton);

    add(southPanel, java.awt.BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private void reverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_reverseButtonActionPerformed

  private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_forwardButtonActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_stopButtonActionPerformed

  private void speed4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed4ButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_speed4ButtonActionPerformed

  private void speed3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed3ButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_speed3ButtonActionPerformed

  private void speed2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed2ButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_speed2ButtonActionPerformed

  private void speed1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed1ButtonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_speed1ButtonActionPerformed

  private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
    JSlider slider = (JSlider) evt.getSource();
    if (!slider.getValueIsAdjusting()) {
      
      if (this.locomotiveBean != null) {
        int max = locomotiveBean.getTachoMax();
        double value = slider.getValue();
        //Velocity is always between 0 and 1000
        int velocity = (int) Math.round(value / max * 1000);
        //this.velocityLbl.setText(velocity / 10 + "%");
        executor.execute(() -> changeVelocity(velocity, locomotiveBean));
      }
    }
  }//GEN-LAST:event_speedSliderStateChanged
  
  private void changeVelocity(int newVelocity, LocomotiveBean locomotiveBean) {
    if (ControllerFactory.getController() != null) {
      ControllerFactory.getController().changeLocomotiveSpeed(newVelocity, locomotiveBean);
      
      double max = this.speedGauge.getMaxValue();
      double gaugeValue = Math.round(max / 1000 * newVelocity);
      this.speedGauge.setValue(gaugeValue);
    }
  }
  
  public void setLocomotiveBean(LocomotiveBean locomotiveBean) {
    this.locomotiveBean = locomotiveBean;
    this.functionsPanel.setLocomotive(locomotiveBean);
    
    if (locomotiveBean != null) {
      int velocity = locomotiveBean.getVelocity();
      double max = locomotiveBean.getTachoMax();
      int sliderValue = (int) Math.round(max / 1000 * velocity);
      
      Logger.trace("Change to " + locomotiveBean + " sliderValue: " + sliderValue);

      //set the new slider properties without triggering a change event
      ChangeListener[] changeListeners = this.speedSlider.getChangeListeners();
      for (ChangeListener changeListener : changeListeners) {
        this.speedSlider.removeChangeListener(changeListener);
      }
      
      this.speedSlider.setMaximum(locomotiveBean.getTachoMax());
      this.speedGauge.setMaxValue(locomotiveBean.getTachoMax());
      this.speedGauge.setValue(sliderValue);
      
      this.speedSlider.setValue(sliderValue);
      
      for (ChangeListener changeListener : changeListeners) {
        this.speedSlider.addChangeListener(changeListener);
      }
      
      Direction d = locomotiveBean.getDirection();
      if (Direction.BACKWARDS.equals(d)) {
        this.reverseButton.setSelected(true);
      } else {
        this.forwardButton.setSelected(true);
      }
    }
  }
  
  @Override
  public void onDirectionChange(LocomotiveDirectionEvent event) {
    LocomotiveBean lb = event.getLocomotiveBean();
    
    if (lb != null && locomotiveBean != null && lb.getId().equals(locomotiveBean.getId())) {
      locomotiveBean.setRichtung(lb.getRichtung());
      
      if (Direction.BACKWARDS.equals(lb.getDirection())) {
        this.reverseButton.setSelected(true);
      } else {
        this.forwardButton.setSelected(true);
      }
    }
  }
  
  @Override
  public void onSpeedChange(LocomotiveSpeedEvent event) {
    LocomotiveBean lb = event.getLocomotiveBean();
    
    if (lb != null && locomotiveBean != null && lb.getId().equals(locomotiveBean.getId())) {
      Logger.trace(lb.getName() + " Speed changed from " + this.locomotiveBean.getVelocity() + " to " + lb.getVelocity());
      
      locomotiveBean.setVelocity(lb.getVelocity());
      
      int velocity = locomotiveBean.getVelocity();
      double max = locomotiveBean.getTachoMax();
      int sliderValue = (int) Math.round(max / 1000 * velocity);

      //set the slider value without triggering a change event
      ChangeListener[] changeListeners = this.speedSlider.getChangeListeners();
      for (ChangeListener changeListener : changeListeners) {
        this.speedSlider.removeChangeListener(changeListener);
      }
      
      this.speedSlider.setValue(sliderValue);
      
      for (ChangeListener changeListener : changeListeners) {
        this.speedSlider.addChangeListener(changeListener);
      }
      
      max = this.speedGauge.getMaxValue();
      double gaugeValue = Math.round(max / 1000 * velocity);
      this.speedGauge.setValue(gaugeValue);
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel centerPanel;
  private javax.swing.Box.Filler filler1;
  private javax.swing.Box.Filler filler2;
  private javax.swing.JToggleButton forwardButton;
  private javax.swing.ButtonGroup forwardReverseBG;
  private jcs.ui.widgets.FunctionsPanel functionsPanel;
  private javax.swing.JPanel gaugePanel;
  private javax.swing.JToggleButton reverseButton;
  private javax.swing.JPanel sliderPanel;
  private javax.swing.JPanel southPanel;
  private javax.swing.JButton speed1Button;
  private javax.swing.JButton speed2Button;
  private javax.swing.JButton speed3Button;
  private javax.swing.JButton speed4Button;
  private eu.hansolo.steelseries.gauges.Radial speedGauge;
  private javax.swing.JSlider speedSlider;
  private javax.swing.JButton stopButton;
  // End of variables declaration//GEN-END:variables
}
