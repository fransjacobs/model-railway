/*
 * Copyright (C) 2019 frans.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package jcs.ui.options;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import jcs.entities.LocomotiveBean;
import jcs.entities.enums.DecoderType;
import jcs.trackservice.TrackServiceFactory;
import jcs.ui.options.table.LocomotiveTableModel;
import org.tinylog.Logger;

/**
 *
 * @author frans
 */
public class LocomotivePanel extends JPanel {

    private final LocomotiveTableModel locoTableModel;

    /**
     * Creates new form LocomotivePanel
     */
    public LocomotivePanel() {
        locoTableModel = new LocomotiveTableModel();

        initComponents();

        alignLocoTable();
    }

    private void alignLocoTable() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        this.locoTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        this.locoTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        this.locoTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        this.locoTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        this.locoTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        this.locoTable.getColumnModel().getColumn(3).setPreferredWidth(150);
        this.locoTable.getColumnModel().getColumn(4).setPreferredWidth(150);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directionBG = new ButtonGroup();
        selectedLocomotive = new LocomotiveBean();
        topPanel = new JPanel();
        locIconLbl = new JLabel();
        synchronizeBtn = new JButton();
        refreshBtn = new JButton();
        newBtn = new JButton();
        centerPanel = new JPanel();
        centerSplitPane = new JSplitPane();
        locoTableScrollPane = new JScrollPane();
        locoTable = new JTable();
        locoDetailPanel = new JPanel();
        row1Panel = new JPanel();
        addressLbl = new JLabel();
        addressSpinner = new JSpinner();
        decoderLabel = new JLabel();
        decoderCB = new JComboBox<>();
        idLbl = new JLabel();
        row2Panel = new JPanel();
        nameLbl = new JLabel();
        nameTF = new JTextField();
        row3Panel = new JPanel();
        row4Panel = new JPanel();
        row5Panel = new JPanel();
        row6Panel = new JPanel();
        minSpeedLbl = new JLabel();
        minSpeedSpinner = new JSpinner();
        row7Panel = new JPanel();
        tachoMaxLbl = new JLabel();
        tachoMaxSpinner = new JSpinner();
        row8Panel = new JPanel();
        row9Panel = new JPanel();
        filler2 = new Box.Filler(new Dimension(0, 50), new Dimension(0, 50), new Dimension(32767, 300));
        buttonPanel = new JPanel();
        bottomPanel = new JPanel();
        deleteBtn = new JButton();
        filler1 = new Box.Filler(new Dimension(100, 0), new Dimension(200, 0), new Dimension(150, 32767));
        saveBtn = new JButton();

        setMinimumSize(new Dimension(1000, 600));
        setPreferredSize(new Dimension(1000, 600));
        setLayout(new BorderLayout());

        topPanel.setMinimumSize(new Dimension(1000, 50));
        topPanel.setPreferredSize(new Dimension(1000, 50));
        topPanel.setRequestFocusEnabled(false);
        FlowLayout flowLayout2 = new FlowLayout(FlowLayout.RIGHT);
        flowLayout2.setAlignOnBaseline(true);
        topPanel.setLayout(flowLayout2);

        locIconLbl.setIcon(new ImageIcon(getClass().getResource("/media/electric-loc-24.png"))); // NOI18N
        locIconLbl.setPreferredSize(new Dimension(860, 40));
        topPanel.add(locIconLbl);

        synchronizeBtn.setIcon(new ImageIcon(getClass().getResource("/media/CS2-3-Sync.png"))); // NOI18N
        synchronizeBtn.setToolTipText("Synchronize Locomotives met CS 2/3");
        synchronizeBtn.setMaximumSize(new Dimension(40, 40));
        synchronizeBtn.setMinimumSize(new Dimension(40, 40));
        synchronizeBtn.setPreferredSize(new Dimension(40, 40));
        synchronizeBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                synchronizeBtnActionPerformed(evt);
            }
        });
        topPanel.add(synchronizeBtn);

        refreshBtn.setIcon(new ImageIcon(getClass().getResource("/media/refresh-24.png"))); // NOI18N
        refreshBtn.setToolTipText("Refresh Locomotives");
        refreshBtn.setMaximumSize(new Dimension(40, 40));
        refreshBtn.setMinimumSize(new Dimension(40, 40));
        refreshBtn.setPreferredSize(new Dimension(40, 40));
        refreshBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        topPanel.add(refreshBtn);

        newBtn.setIcon(new ImageIcon(getClass().getResource("/media/add-24.png"))); // NOI18N
        newBtn.setToolTipText("Create new Locomotive");
        newBtn.setMaximumSize(new Dimension(40, 40));
        newBtn.setMinimumSize(new Dimension(40, 40));
        newBtn.setPreferredSize(new Dimension(40, 40));
        newBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        topPanel.add(newBtn);

        add(topPanel, BorderLayout.NORTH);

        centerPanel.setMinimumSize(new Dimension(1000, 500));
        centerPanel.setPreferredSize(new Dimension(1000, 500));
        centerPanel.setLayout(new BorderLayout());

        centerSplitPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        centerSplitPane.setDividerLocation(500);
        centerSplitPane.setDoubleBuffered(true);
        centerSplitPane.setPreferredSize(new Dimension(1000, 540));

        locoTableScrollPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        locoTableScrollPane.setMinimumSize(new Dimension(500, 500));
        locoTableScrollPane.setPreferredSize(new Dimension(500, 500));

        locoTable.setModel(locoTableModel);
        locoTable.setDoubleBuffered(true);
        locoTable.setGridColor(new Color(204, 204, 204));
        locoTable.setPreferredSize(new Dimension(480, 470));
        locoTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        locoTable.getTableHeader().setReorderingAllowed(false);
        locoTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                locoTableMouseClicked(evt);
            }
        });
        locoTableScrollPane.setViewportView(locoTable);

        centerSplitPane.setLeftComponent(locoTableScrollPane);

        locoDetailPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1), "Edit Loco"));
        locoDetailPanel.setMinimumSize(new Dimension(390, 540));
        locoDetailPanel.setPreferredSize(new Dimension(480, 500));
        locoDetailPanel.setLayout(new BoxLayout(locoDetailPanel, BoxLayout.Y_AXIS));

        row1Panel.setMinimumSize(new Dimension(380, 30));
        row1Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout1 = new FlowLayout(FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        row1Panel.setLayout(flowLayout1);

        addressLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        addressLbl.setLabelFor(addressSpinner);
        addressLbl.setText("Address");
        addressLbl.setPreferredSize(new Dimension(100, 16));
        row1Panel.add(addressLbl);

        addressSpinner.setModel(new SpinnerNumberModel(0, 0, 80, 1));
        addressSpinner.setDoubleBuffered(true);
        addressSpinner.setEditor(new JSpinner.NumberEditor(addressSpinner, ""));
        addressSpinner.setMinimumSize(new Dimension(50, 26));
        addressSpinner.setName(""); // NOI18N
        addressSpinner.setNextFocusableComponent(nameTF);
        addressSpinner.setPreferredSize(new Dimension(60, 26));
        row1Panel.add(addressSpinner);

        decoderLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        decoderLabel.setText("Decoder");
        decoderLabel.setPreferredSize(new Dimension(70, 16));
        row1Panel.add(decoderLabel);

        decoderCB.setModel(new DefaultComboBoxModel<>(new String[] { "mm2_dil8", "mm2_prg", "mfx", "dcc", "sx1" }));
        row1Panel.add(decoderCB);

        idLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        idLbl.setText("ID: ");
        idLbl.setPreferredSize(new Dimension(55, 16));
        row1Panel.add(idLbl);

        locoDetailPanel.add(row1Panel);

        row2Panel.setMinimumSize(new Dimension(380, 30));
        row2Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout3 = new FlowLayout(FlowLayout.LEFT);
        flowLayout3.setAlignOnBaseline(true);
        row2Panel.setLayout(flowLayout3);

        nameLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        nameLbl.setLabelFor(nameTF);
        nameLbl.setText("Name");
        nameLbl.setPreferredSize(new Dimension(100, 16));
        row2Panel.add(nameLbl);

        nameTF.setMinimumSize(new Dimension(120, 26));
        nameTF.setPreferredSize(new Dimension(200, 26));
        row2Panel.add(nameTF);

        locoDetailPanel.add(row2Panel);

        row3Panel.setMinimumSize(new Dimension(380, 30));
        row3Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout4 = new FlowLayout(FlowLayout.LEFT);
        flowLayout4.setAlignOnBaseline(true);
        row3Panel.setLayout(flowLayout4);
        locoDetailPanel.add(row3Panel);

        row4Panel.setMinimumSize(new Dimension(380, 30));
        row4Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout5 = new FlowLayout(FlowLayout.LEFT);
        flowLayout5.setAlignOnBaseline(true);
        row4Panel.setLayout(flowLayout5);
        locoDetailPanel.add(row4Panel);

        row5Panel.setMinimumSize(new Dimension(380, 30));
        row5Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout6 = new FlowLayout(FlowLayout.LEFT);
        flowLayout6.setAlignOnBaseline(true);
        row5Panel.setLayout(flowLayout6);
        locoDetailPanel.add(row5Panel);

        row6Panel.setMinimumSize(new Dimension(380, 30));
        row6Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout7 = new FlowLayout(FlowLayout.LEFT);
        flowLayout7.setAlignOnBaseline(true);
        row6Panel.setLayout(flowLayout7);

        minSpeedLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        minSpeedLbl.setText("Min. Speed");
        minSpeedLbl.setPreferredSize(new Dimension(75, 16));
        row6Panel.add(minSpeedLbl);

        minSpeedSpinner.setModel(new SpinnerNumberModel());
        minSpeedSpinner.setPreferredSize(new Dimension(60, 26));
        row6Panel.add(minSpeedSpinner);

        locoDetailPanel.add(row6Panel);

        row7Panel.setMinimumSize(new Dimension(380, 30));
        row7Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout9 = new FlowLayout(FlowLayout.LEFT);
        flowLayout9.setAlignOnBaseline(true);
        row7Panel.setLayout(flowLayout9);

        tachoMaxLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        tachoMaxLbl.setText("Tacho Max.");
        tachoMaxLbl.setPreferredSize(new Dimension(100, 16));
        row7Panel.add(tachoMaxLbl);

        tachoMaxSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
        tachoMaxSpinner.setPreferredSize(new Dimension(60, 26));
        row7Panel.add(tachoMaxSpinner);

        locoDetailPanel.add(row7Panel);

        row8Panel.setMinimumSize(new Dimension(380, 30));
        row8Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout8 = new FlowLayout(FlowLayout.LEFT);
        flowLayout8.setAlignOnBaseline(true);
        row8Panel.setLayout(flowLayout8);
        locoDetailPanel.add(row8Panel);

        row9Panel.setMinimumSize(new Dimension(380, 30));
        row9Panel.setPreferredSize(new Dimension(380, 30));
        row9Panel.setLayout(new FlowLayout(FlowLayout.LEFT));
        locoDetailPanel.add(row9Panel);
        locoDetailPanel.add(filler2);

        buttonPanel.setPreferredSize(new Dimension(380, 40));
        FlowLayout flowLayout10 = new FlowLayout();
        flowLayout10.setAlignOnBaseline(true);
        buttonPanel.setLayout(flowLayout10);
        locoDetailPanel.add(buttonPanel);

        centerSplitPane.setRightComponent(locoDetailPanel);

        centerPanel.add(centerSplitPane, BorderLayout.CENTER);

        add(centerPanel, BorderLayout.CENTER);

        bottomPanel.setPreferredSize(new Dimension(1000, 50));
        bottomPanel.setRequestFocusEnabled(false);
        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

        deleteBtn.setIcon(new ImageIcon(getClass().getResource("/media/delete-24.png"))); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setMaximumSize(new Dimension(100, 36));
        deleteBtn.setMinimumSize(new Dimension(100, 36));
        deleteBtn.setPreferredSize(new Dimension(100, 36));
        deleteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(deleteBtn);
        bottomPanel.add(filler1);

        saveBtn.setIcon(new ImageIcon(getClass().getResource("/media/save-24.png"))); // NOI18N
        saveBtn.setText("Save");
        saveBtn.setMaximumSize(new Dimension(100, 36));
        saveBtn.setMinimumSize(new Dimension(100, 36));
        saveBtn.setPreferredSize(new Dimension(100, 36));
        saveBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(saveBtn);

        add(bottomPanel, BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

  private void newBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
      this.locoTableModel.refresh();
      alignLocoTable();
      Logger.trace("Create new Loco...");

      this.selectedLocomotive = new LocomotiveBean();
      this.selectedLocomotive.setId(new BigDecimal(locoTableModel.getRowCount() + 1));
      this.selectedLocomotive.setName("new Loco " + (locoTableModel.getRowCount() + 1));
      this.selectedLocomotive.setvMin(0);
      this.selectedLocomotive.setTachoMax(0);
      this.setComponentValues(selectedLocomotive);
  }//GEN-LAST:event_newBtnActionPerformed

    private LocomotiveBean getLococomotiveFromTrackService(LocomotiveBean locomotive) {
        LocomotiveBean loco;

        if (locomotive.getId() != null) {
            loco = TrackServiceFactory.getTrackService().getLocomotive(locomotive.getId());
        } else {
            loco = TrackServiceFactory.getTrackService().getLocomotive(locomotive.getAddress(), DecoderType.get(locomotive.getDecoderType()));
        }
        return loco;
    }


  private void locoTableMouseClicked(MouseEvent evt) {//GEN-FIRST:event_locoTableMouseClicked
      JTable source = (JTable) evt.getSource();
      int row = source.rowAtPoint(evt.getPoint());

      LocomotiveBean loc = locoTableModel.getControllableDeviceAt(row);
      if (loc != null) {
          Logger.trace("Selected row: " + row + ", Id: " + loc.getId() + " Address: " + loc.getAddress() + " Decoder: " + loc.getDecoderType());
          selectedLocomotive = getLococomotiveFromTrackService(loc);
          locoDetailPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createCompoundBorder(), "Edit " + selectedLocomotive.getName()));
          setComponentValues(selectedLocomotive);
      } else {
          Logger.trace("No loc found @ row " + row);
      }
  }//GEN-LAST:event_locoTableMouseClicked

  private void saveBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
      if (this.selectedLocomotive != null) {

          LocomotiveBean loco = getLococomotiveFromTrackService(selectedLocomotive);
          loco = setLocomotiveValues(loco);
          Logger.trace("Save the Loco: " + this.selectedLocomotive);

          selectedLocomotive = this.selectedLocomotive = TrackServiceFactory.getTrackService().persist(loco);
          setComponentValues(selectedLocomotive);
          locoTableModel.refresh();
          alignLocoTable();
      }
  }//GEN-LAST:event_saveBtnActionPerformed

  private void deleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
      Logger.trace("Delete Loco: " + this.selectedLocomotive);
      TrackServiceFactory.getTrackService().remove(selectedLocomotive);
      this.selectedLocomotive = null;
      this.locoTableModel.refresh();
      this.setComponentValues(selectedLocomotive);
      alignLocoTable();
  }//GEN-LAST:event_deleteBtnActionPerformed

    public void refresh() {
        this.selectedLocomotive = null;
        this.locoTableModel.refresh();
        alignLocoTable();
    }

    private void synchronize() {
        TrackServiceFactory.getTrackService().synchronizeLocomotivesWithController();
        refresh();
    }

  private void refreshBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
      refresh();
  }//GEN-LAST:event_refreshBtnActionPerformed

    private void synchronizeBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_synchronizeBtnActionPerformed
        synchronize();
    }//GEN-LAST:event_synchronizeBtnActionPerformed

    protected LocomotiveBean setLocomotiveValues(LocomotiveBean loco) {
        Integer address = (Integer) this.addressSpinner.getValue();
        String decoder = (String) this.decoderCB.getSelectedItem();

        String name = this.nameTF.getText();

        Integer minSpeed = (Integer) this.minSpeedSpinner.getValue();
        Integer tachoMax = (Integer) this.tachoMaxSpinner.getValue();

        LocomotiveBean loc;
        if (loco != null) {
            loc = loco;
        } else {
            loc = new LocomotiveBean();
        }

        loc.setAddress(address);
        loc.setDecoderType(decoder);
        loc.setName(name);
        loc.setvMin(minSpeed);
        loc.setTachoMax(tachoMax);

        return loc;
    }

    protected void setComponentValues(LocomotiveBean loco) {
        if (loco != null) {
            this.idLbl.setText("ID: " + loco.getId());
            this.addressSpinner.setValue(loco.getAddress());
            this.decoderCB.setSelectedItem(loco.getDecoderType());
            this.nameTF.setText(loco.getName());

            this.minSpeedSpinner.setValue(loco.getvMin());
            this.tachoMaxSpinner.setValue(loco.getTachoMax());
        } else {
            this.idLbl.setText("ID: --");

            this.addressSpinner.setValue(0);
            this.decoderCB.setSelectedItem("mm_prg");
            this.nameTF.setText("");

            this.minSpeedSpinner.setValue(0);
            this.tachoMaxSpinner.setValue(0);
        }
    }

    public static void main(String args[]) {
        try {
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.warn("Can't set the LookAndFeel: " + ex);
        }
        java.awt.EventQueue.invokeLater(() -> {

            LocomotivePanel testPanel = new LocomotivePanel();
            JFrame testFrame = new JFrame();
            JDialog testDialog = new JDialog(testFrame, true);

            testDialog.add(testPanel);

            testDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            testDialog.pack();
            testDialog.setLocationRelativeTo(null);

            testDialog.setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel addressLbl;
    private JSpinner addressSpinner;
    private JPanel bottomPanel;
    private JPanel buttonPanel;
    private JPanel centerPanel;
    private JSplitPane centerSplitPane;
    private JComboBox<String> decoderCB;
    private JLabel decoderLabel;
    private JButton deleteBtn;
    private ButtonGroup directionBG;
    private Box.Filler filler1;
    private Box.Filler filler2;
    private JLabel idLbl;
    private JLabel locIconLbl;
    private JPanel locoDetailPanel;
    private JTable locoTable;
    private JScrollPane locoTableScrollPane;
    private JLabel minSpeedLbl;
    private JSpinner minSpeedSpinner;
    private JLabel nameLbl;
    private JTextField nameTF;
    private JButton newBtn;
    private JButton refreshBtn;
    private JPanel row1Panel;
    private JPanel row2Panel;
    private JPanel row3Panel;
    private JPanel row4Panel;
    private JPanel row5Panel;
    private JPanel row6Panel;
    private JPanel row7Panel;
    private JPanel row8Panel;
    private JPanel row9Panel;
    private JButton saveBtn;
    private LocomotiveBean selectedLocomotive;
    private JButton synchronizeBtn;
    private JLabel tachoMaxLbl;
    private JSpinner tachoMaxSpinner;
    private JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
