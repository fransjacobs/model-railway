/*
 * Copyright (C) 2019 frans.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package jcs.ui.options;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import jcs.entities.SignalBean;
import jcs.entities.enums.AccessoryValue;
import jcs.entities.enums.SignalValue;
import jcs.trackservice.TrackServiceFactory;
import jcs.ui.options.table.SignalTableModel;
import org.tinylog.Logger;

/**
 *
 * @author frans
 */
public class SignalPanel extends JPanel {

    private static final String[] SIGNAL_TYPES = {"", "Leave", "Block", "Entry", "Midget"};

    private final SignalTableModel signalTableModel;

    public SignalPanel() {
        signalTableModel = new SignalTableModel();

        initComponents();
        alignSignalTable();
    }

    private void alignSignalTable() {
        this.signalTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        this.signalTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        this.signalTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        this.signalTable.getColumnModel().getColumn(3).setPreferredWidth(40);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        this.signalTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        this.signalTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        this.signalTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("deprecation")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directionBG = new ButtonGroup();
        lightImagesBG = new ButtonGroup();
        selectedSignal = new SignalBean();
        topPanel = new JPanel();
        refreshBtn = new JButton();
        newBtn = new JButton();
        centerPanel = new JPanel();
        centerSplitPane = new JSplitPane();
        signalTableScrollPane = new JScrollPane();
        signalTable = new JTable();
        signalDetailPanel = new JPanel();
        row1Panel = new JPanel();
        addressLbl = new JLabel();
        addressSpinner = new JSpinner();
        idLbl = new JLabel();
        row2Panel = new JPanel();
        signalTypeLbl = new JLabel();
        signalTypeCB = new JComboBox<>();
        row3Panel = new JPanel();
        nameLbl = new JLabel();
        nameTF = new JTextField();
        row4Panel = new JPanel();
        catalogeNrLbl = new JLabel();
        catalogNrTF = new JTextField();
        row5Panel = new JPanel();
        address2Lbl = new JLabel();
        addressSpinner2 = new JSpinner();
        lightImagesLbl = new JLabel();
        lightImage2RB = new JRadioButton();
        lightImage4RB = new JRadioButton();
        row6Panel = new JPanel();
        row7Panel = new JPanel();
        row8Panel = new JPanel();
        row9Panel = new JPanel();
        filler2 = new Box.Filler(new Dimension(0, 150), new Dimension(0, 150), new Dimension(32767, 300));
        buttonPanel = new JPanel();
        deleteBtn = new JButton();
        filler1 = new Box.Filler(new Dimension(50, 0), new Dimension(200, 0), new Dimension(150, 32767));
        saveBtn = new JButton();
        bottomPanel = new JPanel();

        setMinimumSize(new Dimension(1000, 600));
        setPreferredSize(new Dimension(1000, 600));
        setLayout(new BorderLayout());

        topPanel.setMinimumSize(new Dimension(1000, 50));
        topPanel.setPreferredSize(new Dimension(1000, 50));
        topPanel.setRequestFocusEnabled(false);
        FlowLayout flowLayout1 = new FlowLayout(FlowLayout.RIGHT);
        flowLayout1.setAlignOnBaseline(true);
        topPanel.setLayout(flowLayout1);

        refreshBtn.setIcon(new ImageIcon(getClass().getResource("/media/refresh-24.png"))); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.setMargin(new Insets(2, 2, 2, 2));
        refreshBtn.setMaximumSize(new Dimension(120, 36));
        refreshBtn.setMinimumSize(new Dimension(120, 36));
        refreshBtn.setPreferredSize(new Dimension(120, 36));
        refreshBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        topPanel.add(refreshBtn);

        newBtn.setIcon(new ImageIcon(getClass().getResource("/media/add-24.png"))); // NOI18N
        newBtn.setText("New");
        newBtn.setToolTipText("Create new Locomotive");
        newBtn.setMaximumSize(new Dimension(120, 36));
        newBtn.setMinimumSize(new Dimension(120, 36));
        newBtn.setPreferredSize(new Dimension(120, 36));
        newBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        topPanel.add(newBtn);

        add(topPanel, BorderLayout.NORTH);

        centerPanel.setMinimumSize(new Dimension(420, 542));
        centerPanel.setPreferredSize(new Dimension(1000, 500));
        centerPanel.setLayout(new BorderLayout());

        centerSplitPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        centerSplitPane.setDividerLocation(500);
        centerSplitPane.setDoubleBuffered(true);
        centerSplitPane.setMinimumSize(new Dimension(1000, 500));
        centerSplitPane.setPreferredSize(new Dimension(1000, 500));

        signalTableScrollPane.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        signalTableScrollPane.setPreferredSize(new Dimension(500, 500));

        signalTable.setModel(signalTableModel);
        signalTable.setDoubleBuffered(true);
        signalTable.setGridColor(new Color(204, 204, 204));
        signalTable.setPreferredSize(new Dimension(480, 470));
        signalTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        signalTable.getTableHeader().setReorderingAllowed(false);
        signalTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                signalTableMouseClicked(evt);
            }
        });
        signalTableScrollPane.setViewportView(signalTable);

        centerSplitPane.setLeftComponent(signalTableScrollPane);

        signalDetailPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1), "Edit Signal"));
        signalDetailPanel.setMinimumSize(new Dimension(500, 490));
        signalDetailPanel.setPreferredSize(new Dimension(500, 500));
        signalDetailPanel.setLayout(new BoxLayout(signalDetailPanel, BoxLayout.Y_AXIS));

        row1Panel.setMinimumSize(new Dimension(380, 30));
        row1Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout6 = new FlowLayout(FlowLayout.LEFT);
        flowLayout6.setAlignOnBaseline(true);
        row1Panel.setLayout(flowLayout6);

        addressLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        addressLbl.setLabelFor(addressSpinner);
        addressLbl.setText("Address");
        addressLbl.setPreferredSize(new Dimension(120, 16));
        row1Panel.add(addressLbl);

        addressSpinner.setModel(new SpinnerNumberModel(0, 0, 256, 1));
        addressSpinner.setDoubleBuffered(true);
        addressSpinner.setEditor(new JSpinner.NumberEditor(addressSpinner, ""));
        addressSpinner.setMinimumSize(new Dimension(50, 26));
        addressSpinner.setName(""); // NOI18N
        addressSpinner.setNextFocusableComponent(nameTF);
        addressSpinner.setPreferredSize(new Dimension(60, 26));
        row1Panel.add(addressSpinner);

        idLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        idLbl.setText("ID: ");
        idLbl.setPreferredSize(new Dimension(220, 16));
        row1Panel.add(idLbl);

        signalDetailPanel.add(row1Panel);

        row2Panel.setMinimumSize(new Dimension(380, 30));
        row2Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout7 = new FlowLayout(FlowLayout.LEFT);
        flowLayout7.setAlignOnBaseline(true);
        row2Panel.setLayout(flowLayout7);

        signalTypeLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        signalTypeLbl.setText("Type");
        signalTypeLbl.setMaximumSize(new Dimension(120, 16));
        signalTypeLbl.setPreferredSize(new Dimension(120, 16));
        row2Panel.add(signalTypeLbl);

        signalTypeCB.setModel(getSignalTypeComboBoxModel());
        signalTypeCB.setPreferredSize(new Dimension(120, 27));
        row2Panel.add(signalTypeCB);

        signalDetailPanel.add(row2Panel);

        row3Panel.setMinimumSize(new Dimension(380, 30));
        row3Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout8 = new FlowLayout(FlowLayout.LEFT);
        flowLayout8.setAlignOnBaseline(true);
        row3Panel.setLayout(flowLayout8);

        nameLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        nameLbl.setLabelFor(nameTF);
        nameLbl.setText("Name");
        nameLbl.setPreferredSize(new Dimension(120, 16));
        row3Panel.add(nameLbl);

        nameTF.setMinimumSize(new Dimension(120, 26));
        nameTF.setPreferredSize(new Dimension(120, 26));
        row3Panel.add(nameTF);

        signalDetailPanel.add(row3Panel);

        row4Panel.setMinimumSize(new Dimension(380, 30));
        row4Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout9 = new FlowLayout(FlowLayout.LEFT);
        flowLayout9.setAlignOnBaseline(true);
        row4Panel.setLayout(flowLayout9);

        catalogeNrLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        catalogeNrLbl.setLabelFor(catalogNrTF);
        catalogeNrLbl.setText("Catalog Number");
        catalogeNrLbl.setPreferredSize(new Dimension(120, 16));
        row4Panel.add(catalogeNrLbl);

        catalogNrTF.setMinimumSize(new Dimension(120, 26));
        catalogNrTF.setPreferredSize(new Dimension(120, 26));
        row4Panel.add(catalogNrTF);

        signalDetailPanel.add(row4Panel);

        row5Panel.setMinimumSize(new Dimension(380, 30));
        row5Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout10 = new FlowLayout(FlowLayout.LEFT);
        flowLayout10.setAlignOnBaseline(true);
        row5Panel.setLayout(flowLayout10);

        address2Lbl.setHorizontalAlignment(SwingConstants.TRAILING);
        address2Lbl.setText("Address 2");
        address2Lbl.setPreferredSize(new Dimension(120, 16));
        row5Panel.add(address2Lbl);

        addressSpinner2.setModel(new SpinnerNumberModel(0, 0, 256, 1));
        addressSpinner2.setDoubleBuffered(true);
        addressSpinner2.setEditor(new JSpinner.NumberEditor(addressSpinner2, ""));
        addressSpinner2.setEnabled(false);
        addressSpinner2.setMinimumSize(new Dimension(50, 26));
        addressSpinner2.setName(""); // NOI18N
        addressSpinner2.setNextFocusableComponent(nameTF);
        addressSpinner2.setPreferredSize(new Dimension(60, 26));
        row5Panel.add(addressSpinner2);

        lightImagesLbl.setHorizontalAlignment(SwingConstants.TRAILING);
        lightImagesLbl.setText("Light Images");
        lightImagesLbl.setPreferredSize(new Dimension(100, 16));
        row5Panel.add(lightImagesLbl);

        lightImagesBG.add(lightImage2RB);
        lightImage2RB.setSelected(true);
        lightImage2RB.setText("2");
        row5Panel.add(lightImage2RB);

        lightImagesBG.add(lightImage4RB);
        lightImage4RB.setText("4");
        row5Panel.add(lightImage4RB);

        signalDetailPanel.add(row5Panel);

        row6Panel.setMinimumSize(new Dimension(380, 30));
        row6Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout5 = new FlowLayout(FlowLayout.LEFT);
        flowLayout5.setAlignOnBaseline(true);
        row6Panel.setLayout(flowLayout5);
        signalDetailPanel.add(row6Panel);

        row7Panel.setMinimumSize(new Dimension(380, 30));
        row7Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout4 = new FlowLayout(FlowLayout.LEFT);
        flowLayout4.setAlignOnBaseline(true);
        row7Panel.setLayout(flowLayout4);
        signalDetailPanel.add(row7Panel);

        row8Panel.setMinimumSize(new Dimension(380, 30));
        row8Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout3 = new FlowLayout(FlowLayout.LEFT);
        flowLayout3.setAlignOnBaseline(true);
        row8Panel.setLayout(flowLayout3);
        signalDetailPanel.add(row8Panel);

        row9Panel.setMinimumSize(new Dimension(380, 30));
        row9Panel.setPreferredSize(new Dimension(380, 30));
        FlowLayout flowLayout2 = new FlowLayout(FlowLayout.LEFT);
        flowLayout2.setAlignOnBaseline(true);
        row9Panel.setLayout(flowLayout2);
        signalDetailPanel.add(row9Panel);
        signalDetailPanel.add(filler2);

        buttonPanel.setMinimumSize(new Dimension(380, 40));
        buttonPanel.setPreferredSize(new Dimension(380, 40));
        FlowLayout flowLayout11 = new FlowLayout();
        flowLayout11.setAlignOnBaseline(true);
        buttonPanel.setLayout(flowLayout11);

        deleteBtn.setIcon(new ImageIcon(getClass().getResource("/media/delete-24.png"))); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setMaximumSize(new Dimension(100, 36));
        deleteBtn.setMinimumSize(new Dimension(100, 36));
        deleteBtn.setPreferredSize(new Dimension(100, 36));
        deleteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        buttonPanel.add(deleteBtn);
        buttonPanel.add(filler1);

        saveBtn.setIcon(new ImageIcon(getClass().getResource("/media/save-24.png"))); // NOI18N
        saveBtn.setText("Save");
        saveBtn.setMaximumSize(new Dimension(100, 36));
        saveBtn.setMinimumSize(new Dimension(100, 36));
        saveBtn.setPreferredSize(new Dimension(100, 36));
        saveBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        buttonPanel.add(saveBtn);

        signalDetailPanel.add(buttonPanel);

        centerSplitPane.setRightComponent(signalDetailPanel);

        centerPanel.add(centerSplitPane, BorderLayout.CENTER);

        add(centerPanel, BorderLayout.CENTER);

        bottomPanel.setPreferredSize(new Dimension(1000, 50));
        bottomPanel.setRequestFocusEnabled(false);

        GroupLayout bottomPanelLayout = new GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        bottomPanelLayout.setVerticalGroup(bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        add(bottomPanel, BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private ComboBoxModel getSignalTypeComboBoxModel() {
        return new DefaultComboBoxModel(SIGNAL_TYPES);
    }

  private void newBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
      this.signalTableModel.refresh();
      alignSignalTable();
      Logger.debug("Create new Signal...");
      this.selectedSignal = new SignalBean(0, "Block", null);
      Integer a = this.signalTableModel.getRowCount() + 1;

      this.selectedSignal.setName("S " + a);
      this.selectedSignal.setAddress(a);
      this.selectedSignal.setValue(AccessoryValue.GREEN);
      this.selectedSignal.setLightImages(2);

      this.setComponentValues(selectedSignal);
      Logger.debug("Create new Signal..." + this.selectedSignal);
  }//GEN-LAST:event_newBtnActionPerformed

  private void signalTableMouseClicked(MouseEvent evt) {//GEN-FIRST:event_signalTableMouseClicked
      JTable source = (JTable) evt.getSource();
      int row = source.rowAtPoint(evt.getPoint());
      SignalBean s = signalTableModel.getControllableDeviceAt(row);

      if (s != null) {
          Logger.debug("Selected row: " + row + ", Signal Address: " + s.getAddress());
          selectedSignal = null; //TrackServiceFactory.getTrackService().getSignal(s.getAddress());
          setComponentValues(selectedSignal);
      }
  }//GEN-LAST:event_signalTableMouseClicked

  private void saveBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
      this.selectedSignal = this.setSignalValues();
      Logger.debug("Save the Signal: " + selectedSignal);

      SignalBean s = null; //TrackServiceFactory.getTrackService().getSignal(selectedSignal.getAddress());
      if (s != null) {
          selectedSignal.setId(s.getId());
          selectedSignal.setId2(s.getId2());
          selectedSignal.setAddress2(s.getAddress2());
          selectedSignal.setValue(s.getValue());
          selectedSignal.setValue2(s.getValue2());
          selectedSignal.setSignalValue(s.getSignalValue());

          Logger.debug("Found Signal with id " + s.getId());
      } else {
          this.selectedSignal.setValue(AccessoryValue.GREEN);
          if (selectedSignal.getLightImages() == 4) {
              selectedSignal.setValue2(AccessoryValue.GREEN);
              selectedSignal.setSignalValue(SignalValue.Hp1);
          }
      }

      selectedSignal = null; //TrackServiceFactory.getTrackService().persist(selectedSignal);
      setComponentValues(selectedSignal);
      signalTableModel.refresh();
      alignSignalTable();
  }//GEN-LAST:event_saveBtnActionPerformed

  private void deleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
      Logger.debug("Delete Signal: " + this.selectedSignal);
      TrackServiceFactory.getTrackService().remove(selectedSignal);
      this.signalTableModel.refresh();
      this.selectedSignal = null;
      this.setComponentValues(selectedSignal);
      alignSignalTable();
  }//GEN-LAST:event_deleteBtnActionPerformed

    public void refresh() {
        this.signalTableModel.refresh();
        alignSignalTable();
    }

  private void refreshBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
      refresh();
  }//GEN-LAST:event_refreshBtnActionPerformed

    //Create SignalBean from fields  
    protected SignalBean setSignalValues() {
        Integer address = (Integer) this.addressSpinner.getValue();
        String name = this.nameTF.getText();
        String description = (String) this.signalTypeCB.getSelectedItem();
        String catalogNumber = this.catalogNrTF.getText();
        Integer address2 = (Integer) this.addressSpinner2.getValue();

        Integer lightImages;
        if (this.lightImage2RB.isSelected()) {
            lightImages = 2;
        } else {
            lightImages = 4;
            address2 = address + 1;
        }

        SignalBean s = new SignalBean(address, description, catalogNumber);
        s.setName(name);
        if (lightImages.equals(4)) {
            s.setAddress2(address2);
        }
        s.setLightImages(lightImages);

        return s;
    }

    protected void setComponentValues(SignalBean signal) {
        if (signal != null) {
            addressSpinner.setValue(signal.getAddress());
            nameTF.setText(signal.getName());
            catalogNrTF.setText(signal.getCatalogNumber());
            signalTypeCB.setSelectedItem(signal.getDescription());
            idLbl.setText("ID: " + signal.getId());

            if (signal.getAddress2() != null) {
                addressSpinner2.setValue(signal.getAddress2());
            } else {
                addressSpinner2.setValue(0);
            }

            if (signal.getLightImages() == 4) {
                lightImage4RB.setSelected(true);
            } else {
                lightImage2RB.setSelected(true);
            }
        } else {
            addressSpinner.setValue(0);
            nameTF.setText("");
            catalogNrTF.setText("");
            signalTypeCB.setSelectedItem("");
            idLbl.setText("ID: --");
            addressSpinner2.setValue(0);
            lightImage2RB.setSelected(true);
        }
    }

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.warn("Can't set the LookAndFeel: " + ex);
        }
        java.awt.EventQueue.invokeLater(() -> {

            SignalPanel testPanel = new SignalPanel();
            JFrame testFrame = new JFrame();
            JDialog testDialog = new JDialog(testFrame, true);

            testDialog.add(testPanel);

            testDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            testDialog.pack();
            testDialog.setLocationRelativeTo(null);

            testDialog.setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel address2Lbl;
    private JLabel addressLbl;
    private JSpinner addressSpinner;
    private JSpinner addressSpinner2;
    private JPanel bottomPanel;
    private JPanel buttonPanel;
    private JTextField catalogNrTF;
    private JLabel catalogeNrLbl;
    private JPanel centerPanel;
    private JSplitPane centerSplitPane;
    private JButton deleteBtn;
    private ButtonGroup directionBG;
    private Box.Filler filler1;
    private Box.Filler filler2;
    private JLabel idLbl;
    private JRadioButton lightImage2RB;
    private JRadioButton lightImage4RB;
    private ButtonGroup lightImagesBG;
    private JLabel lightImagesLbl;
    private JLabel nameLbl;
    private JTextField nameTF;
    private JButton newBtn;
    private JButton refreshBtn;
    private JPanel row1Panel;
    private JPanel row2Panel;
    private JPanel row3Panel;
    private JPanel row4Panel;
    private JPanel row5Panel;
    private JPanel row6Panel;
    private JPanel row7Panel;
    private JPanel row8Panel;
    private JPanel row9Panel;
    private JButton saveBtn;
    private SignalBean selectedSignal;
    private JPanel signalDetailPanel;
    private JTable signalTable;
    private JScrollPane signalTableScrollPane;
    private JComboBox<String> signalTypeCB;
    private JLabel signalTypeLbl;
    private JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
