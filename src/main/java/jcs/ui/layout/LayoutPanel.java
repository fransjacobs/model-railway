/*
 * Copyright 2023 Frans Jacobs.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui.layout;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;
import jcs.JCS;
import jcs.commandStation.autopilot.AutoPilot;
import jcs.commandStation.events.PowerEvent;
import jcs.commandStation.events.PowerEventListener;
import jcs.entities.TileBean.TileType;
import jcs.util.RunUtil;
import org.tinylog.Logger;

/**
 * The `LayoutPanel` class is a custom `JPanel` used to visually represent and manipulate a layout. It provides a graphical canvas (`LayoutCanvas`) for drawing and editing elements,<br>
 * along with a toolbar offering various tools for adding, deleting, manipulating, and loading/saving layouts. The panel can operate in read-only mode, disabling editing functionalities.
 *
 * It uses a tile-based system to represent tracks and other elements, allowing for easy manipulation and modification of the layout.<br>
 * The class handles events related to adding, deleting, rotating, and flipping tiles, as well as loading and saving layout configurations.<br>
 * It supports different tile types (straight tracks, curved tracks, blocks, sensors, signals, switches, and crossings), each with different properties and behaviors. external resource (e.g., a
 * database or configuration file) to load and save layout data. It also incorporates an undo/redo mechanism for easy recovery from mistakes.It provides options for showing/hiding the grid and offers
 * different modes of operation (adding, deleting, selecting, moving).
 *
 */
public class LayoutPanel extends JPanel {

  private static final long serialVersionUID = 2275543202224445302L;

  private final boolean readonly;

  private int gridType;

  private static final String GRID_0 = "/media/square-grid-24.png";
  private static final String GRID_1 = "/media/grid-2-24.png";
  private static final String GRID_2 = "/media/grid-dot-24.png";

  public LayoutPanel() {
    this(false);
  }

  public LayoutPanel(boolean readonly) {
    this.readonly = readonly;
    initComponents();
    postInit();
  }

  private void postInit() {
    RunUtil.loadProperties();
    canvas.setTileType(TileType.STRAIGHT);
    if (readonly) {
      canvas.setGridType(0);

      loadBtn.setEnabled(!readonly);
      loadBtn.setVisible(!readonly);
      toolBar.remove(loadBtn);

      routeBtn.setEnabled(readonly);
      routeBtn.setVisible(readonly);

      gridBtn.setEnabled(!readonly);
      gridBtn.setVisible(!readonly);

      autoPilotBtn.setEnabled(false);
      startAllLocomotivesBtn.setEnabled(false);
      toolBar.remove(autoPilotBtn);
      toolBar.remove(startAllLocomotivesBtn);

    } else {
      gridType = 1;
      gridBtn.setIcon(new ImageIcon(getClass().getResource(GRID_1)));
      canvas.setGridType(gridType);

      toolBar.remove(autoPilotBtn);
      toolBar.remove(resetAutopilotBtn);
      toolBar.remove(startAllLocomotivesBtn);

      if (readonly) {
        loadLayoutInBackground();
        Powerlistener powerlistener = new Powerlistener();
        JCS.getJcsCommandStation().addPowerEventListener(powerlistener);
      }
    }
  }

  public void loadLayoutInBackground() {
    canvas.loadLayoutInBackground();
  }

  public void loadLayout() {
    //canvas.loadLayout();
    canvas.loadLayoutInBackground();
  }

  public void rotateSelectedTile() {
    canvas.rotateSelectedTile();
  }

  public void flipSelectedTileHorizontal() {
    canvas.flipSelectedTileHorizontal();
  }

  public void flipSelectedTileVerical() {
    canvas.flipSelectedTileVertical();
  }

  public void deleteSelectedTile() {
    canvas.deleteSelectedTile();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    topPanel = new JPanel();
    toolBar = new JToolBar();
    loadBtn = new JButton();
    routeBtn = new JButton();
    autoPilotBtn = new JToggleButton();
    startAllLocomotivesBtn = new JToggleButton();
    resetAutopilotBtn = new JButton();
    filler1 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
    gridBtn = new JButton();
    filler2 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
    filler3 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
    filler4 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
    canvasScrollPane = new JScrollPane();
    canvas = new LayoutCanvas(this.readonly);

    setMinimumSize(new Dimension(1002, 772));
    setOpaque(false);
    setPreferredSize(new Dimension(1002, 772));
    addComponentListener(new ComponentAdapter() {
      public void componentHidden(ComponentEvent evt) {
        formComponentHidden(evt);
      }
      public void componentShown(ComponentEvent evt) {
        formComponentShown(evt);
      }
    });
    setLayout(new BorderLayout());

    topPanel.setMaximumSize(new Dimension(32767, 50));
    topPanel.setMinimumSize(new Dimension(1000, 50));
    topPanel.setPreferredSize(new Dimension(1000, 50));
    FlowLayout flowLayout1 = new FlowLayout(FlowLayout.LEFT);
    flowLayout1.setAlignOnBaseline(true);
    topPanel.setLayout(flowLayout1);

    toolBar.setMaximumSize(new Dimension(1200, 42));
    toolBar.setMinimumSize(new Dimension(1150, 42));
    toolBar.setName(""); // NOI18N
    toolBar.setPreferredSize(new Dimension(980, 42));

    loadBtn.setIcon(new ImageIcon(getClass().getResource("/media/load-24.png"))); // NOI18N
    loadBtn.setToolTipText("Load");
    loadBtn.setFocusable(false);
    loadBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    loadBtn.setMaximumSize(new Dimension(38, 38));
    loadBtn.setMinimumSize(new Dimension(38, 38));
    loadBtn.setPreferredSize(new Dimension(38, 38));
    loadBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    loadBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        loadBtnActionPerformed(evt);
      }
    });
    toolBar.add(loadBtn);

    routeBtn.setIcon(new ImageIcon(getClass().getResource("/media/river-black.png"))); // NOI18N
    routeBtn.setToolTipText("Route");
    routeBtn.setFocusable(false);
    routeBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    routeBtn.setMaximumSize(new Dimension(38, 38));
    routeBtn.setMinimumSize(new Dimension(38, 38));
    routeBtn.setPreferredSize(new Dimension(38, 38));
    routeBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    routeBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        routeBtnActionPerformed(evt);
      }
    });
    toolBar.add(routeBtn);

    autoPilotBtn.setIcon(new ImageIcon(getClass().getResource("/media/pilot.png"))); // NOI18N
    autoPilotBtn.setToolTipText("Auto mode");
    autoPilotBtn.setDoubleBuffered(true);
    autoPilotBtn.setEnabled(false);
    autoPilotBtn.setFocusable(false);
    autoPilotBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    autoPilotBtn.setMaximumSize(new Dimension(38, 38));
    autoPilotBtn.setMinimumSize(new Dimension(38, 38));
    autoPilotBtn.setPreferredSize(new Dimension(38, 38));
    autoPilotBtn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/pilot-green.png"))); // NOI18N
    autoPilotBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    autoPilotBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        autoPilotBtnActionPerformed(evt);
      }
    });
    toolBar.add(autoPilotBtn);

    startAllLocomotivesBtn.setIcon(new ImageIcon(getClass().getResource("/media/cruise-control-on-black.png"))); // NOI18N
    startAllLocomotivesBtn.setToolTipText("Start all Locomotives");
    startAllLocomotivesBtn.setDoubleBuffered(true);
    startAllLocomotivesBtn.setEnabled(false);
    startAllLocomotivesBtn.setFocusable(false);
    startAllLocomotivesBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    startAllLocomotivesBtn.setMaximumSize(new Dimension(38, 38));
    startAllLocomotivesBtn.setMinimumSize(new Dimension(38, 38));
    startAllLocomotivesBtn.setPreferredSize(new Dimension(38, 38));
    startAllLocomotivesBtn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/cruise-control-on-green.png"))); // NOI18N
    startAllLocomotivesBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    startAllLocomotivesBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        startAllLocomotivesBtnActionPerformed(evt);
      }
    });
    toolBar.add(startAllLocomotivesBtn);

    resetAutopilotBtn.setIcon(new ImageIcon(getClass().getResource("/media/director-red.png"))); // NOI18N
    resetAutopilotBtn.setToolTipText("Reset AutoPilot");
    resetAutopilotBtn.setFocusable(false);
    resetAutopilotBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    resetAutopilotBtn.setMaximumSize(new Dimension(38, 38));
    resetAutopilotBtn.setMinimumSize(new Dimension(38, 38));
    resetAutopilotBtn.setPreferredSize(new Dimension(38, 38));
    resetAutopilotBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    resetAutopilotBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        resetAutopilotBtnActionPerformed(evt);
      }
    });
    toolBar.add(resetAutopilotBtn);
    toolBar.add(filler1);

    gridBtn.setIcon(new ImageIcon(getClass().getResource("/media/square-grid-24.png"))); // NOI18N
    gridBtn.setFocusable(false);
    gridBtn.setHorizontalTextPosition(SwingConstants.CENTER);
    gridBtn.setMargin(new Insets(2, 2, 2, 2));
    gridBtn.setMaximumSize(new Dimension(38, 38));
    gridBtn.setMinimumSize(new Dimension(38, 38));
    gridBtn.setPreferredSize(new Dimension(38, 38));
    gridBtn.setVerticalTextPosition(SwingConstants.BOTTOM);
    gridBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        gridBtnActionPerformed(evt);
      }
    });
    toolBar.add(gridBtn);
    toolBar.add(filler2);
    toolBar.add(filler3);
    toolBar.add(filler4);

    topPanel.add(toolBar);

    add(topPanel, BorderLayout.NORTH);

    canvasScrollPane.setMinimumSize(new Dimension(1000, 740));
    canvasScrollPane.setPreferredSize(new Dimension(980, 700));
    canvasScrollPane.setViewportView(canvas);

    canvas.setMinimumSize(new Dimension(1000, 720));
    canvas.setName(""); // NOI18N
    canvas.setPreferredSize(new Dimension(1000, 720));
    canvasScrollPane.setViewportView(canvas);

    add(canvasScrollPane, BorderLayout.CENTER);
    canvasScrollPane.getAccessibleContext().setAccessibleDescription("");
  }// </editor-fold>//GEN-END:initComponents

    private void loadBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
      this.loadLayoutInBackground();
    }//GEN-LAST:event_loadBtnActionPerformed

    private void routeBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_routeBtnActionPerformed
      showRoutes();
    }//GEN-LAST:event_routeBtnActionPerformed

    private void formComponentHidden(ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
      ///Logger.trace("HIDDEN");
      if (JCS.getParentFrame() != null) {
        JCS.getParentFrame().hideExtraToolbar(this.toolBar);
      }
    }//GEN-LAST:event_formComponentHidden

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      //Logger.trace("SHOWN");
      if (JCS.getParentFrame() != null) {
        topPanel.remove(this.toolBar);
        this.remove(topPanel);
        this.doLayout();
        JCS.getParentFrame().showExtraToolbar(this.toolBar);
      }
    }//GEN-LAST:event_formComponentShown

  private void autoPilotBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_autoPilotBtnActionPerformed
    Logger.trace(evt.getActionCommand() + (autoPilotBtn.isSelected() ? " Enable" : " Disable") + " Auto mode");

    if (autoPilotBtn.isSelected()) {
      startAllLocomotivesBtn.setEnabled(true);
    } else {
      ///if (startAllLocomotivesBtn.isSelected()) {
      //  startAllLocomotivesBtn.doClick();
      //}
      startAllLocomotivesBtn.setEnabled(false);
    }

    AutoPilot.runAutoPilot(autoPilotBtn.isSelected());
  }//GEN-LAST:event_autoPilotBtnActionPerformed

  private void startAllLocomotivesBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startAllLocomotivesBtnActionPerformed
    Logger.trace(evt.getActionCommand() + " Start All Locomotives " + this.startAllLocomotivesBtn.isSelected());
    if (startAllLocomotivesBtn.isSelected()) {
      AutoPilot.startAllLocomotives();
    }
  }//GEN-LAST:event_startAllLocomotivesBtnActionPerformed

  private void resetAutopilotBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetAutopilotBtnActionPerformed
    AutoPilot.reset();
  }//GEN-LAST:event_resetAutopilotBtnActionPerformed

  private void gridBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_gridBtnActionPerformed
    gridType++;
    if (gridType > 2) {
      gridType = 0;
    }
    switch (gridType) {

      case 0 -> {
        gridBtn.setIcon(new ImageIcon(getClass().getResource(GRID_0)));
      }
      case 1 -> {
        gridBtn.setIcon(new ImageIcon(getClass().getResource(GRID_1)));
      }
      case 2 -> {
        gridBtn.setIcon(new ImageIcon(getClass().getResource(GRID_2)));
      }
    }
    canvas.setGridType(gridType);
  }//GEN-LAST:event_gridBtnActionPerformed

  public void showRoutes() {
    canvas.showRoutesDialog();
  }

  private class Powerlistener implements PowerEventListener {

    @Override
    public void onPowerChange(PowerEvent event) {
      //Logger.info("Track Power is " + (event.isPower() ? "on" : "off"));

      if (!event.isPower() && autoPilotBtn.isSelected()) {
        autoPilotBtn.doClick();
      }
      autoPilotBtn.setEnabled(event.isPower());
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JToggleButton autoPilotBtn;
  private LayoutCanvas canvas;
  private JScrollPane canvasScrollPane;
  private Box.Filler filler1;
  private Box.Filler filler2;
  private Box.Filler filler3;
  private Box.Filler filler4;
  private JButton gridBtn;
  private JButton loadBtn;
  private JButton resetAutopilotBtn;
  private JButton routeBtn;
  private JToggleButton startAllLocomotivesBtn;
  private JToolBar toolBar;
  private JPanel topPanel;
  // End of variables declaration//GEN-END:variables
}
