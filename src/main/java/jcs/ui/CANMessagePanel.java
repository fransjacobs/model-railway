/*
 * Copyright 2023 frans.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.ui;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.net.URL;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import jcs.commandStation.marklin.cs.can.CanMessage;
import jcs.commandStation.marklin.cs3.events.CanMessageEvent;
import jcs.commandStation.marklin.cs3.events.CanMessageListener;
import org.tinylog.Logger;

/**
 *
 * @author frans
 */
public class CANMessagePanel extends JPanel {

  /**
   * Creates new form FeedbackMonitorPanel
   */
  public CANMessagePanel() {
    initComponents();
  }

  private class MessageListener implements CanMessageListener {
    private final CANMessagePanel diagnosticPanel;
    MessageListener(CANMessagePanel panel) {
      diagnosticPanel = panel;
    }

    @Override
    public void onCanMessage(CanMessageEvent canEvent) {
      CanMessage msg = canEvent.getCanMessage();

      StringBuilder sb = new StringBuilder();
      SimpleDateFormat sdf = new SimpleDateFormat("HH24:mm:ss.S");
      sb.append(sdf.format(canEvent.getEventDate()));
      sb.append(" ");
      sb.append(canEvent.getSourceAddress().getHostName());
      sb.append(" ");
      //sb.append(canEvent.getCanMessage().getMessageName());
      sb.append(" ");
      sb.append(canEvent.getCanMessage());
      sb.append("\n");

      diagnosticPanel.logArea.append(sb.toString());
    }
  }

  private class LogTextAreaHandler implements CanMessageListener {
    private final JTextArea textArea;
    private int lines = 0;
    int lineHeight;

    LogTextAreaHandler(JTextArea textArea) {
      this.textArea = textArea;
      lineHeight = textArea.getFontMetrics(textArea.getFont()).getHeight();
    }

    @Override
    public void onCanMessage(CanMessageEvent canEvent) {
      CanMessage msg = canEvent.getCanMessage();

      StringBuilder sb = new StringBuilder();
      SimpleDateFormat sdf = new SimpleDateFormat("HH24:mm:ss.S");
      sb.append(sdf.format(canEvent.getEventDate()));
      //sb.append(" [");
      //sb.append(canEvent.getSourceAddress().getHostName());
      //sb.append("] ");
      sb.append(": ");
      sb.append(canEvent.getCanMessage());
      sb.append(", ");
      //sb.append(canEvent.getCanMessage().getMessageName());
      sb.append("\n");

      //if (EventQueue.isDispatchThread()) {
      //textArea.insert(sb.toString(), 1);
      //textArea.append(sb.toString());
      //textArea.setCaretPosition(textArea.getText().length());
      try {
        textArea.getDocument().insertString(0, sb.toString(), null);
        lines += 1;

        //int height = this.lineHeight * lines;
        int height = 30 * lines;
        //textArea.setSize(this.textArea.getWidth(), height);
        textArea.setPreferredSize(new Dimension(this.textArea.getWidth(), height));
      } catch (BadLocationException e1) {
        Logger.trace(e1);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    logSP = new JScrollPane();
    logArea = new JTextArea();

    setMinimumSize(new Dimension(1010, 850));
    setName("Form"); // NOI18N
    setPreferredSize(new Dimension(1010, 850));
    FlowLayout flowLayout1 = new FlowLayout(FlowLayout.LEFT, 0, 0);
    flowLayout1.setAlignOnBaseline(true);
    setLayout(flowLayout1);

    logSP.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    logSP.setDoubleBuffered(true);
    logSP.setMinimumSize(new Dimension(870, 260));
    logSP.setName("logSP"); // NOI18N
    logSP.setPreferredSize(new Dimension(870, 260));
    logSP.setRequestFocusEnabled(false);
    logSP.setViewportView(logArea);

    logArea.setColumns(8);
    logArea.setRows(9);
    logArea.setDoubleBuffered(true);
    logArea.setEnabled(false);
    logArea.setMaximumSize(new Dimension(2147483647, 250));
    logArea.setMinimumSize(new Dimension(500, 260));
    logArea.setName("logArea"); // NOI18N
    logArea.setPreferredSize(new Dimension(500, 250));
    logSP.setViewportView(logArea);

    add(logSP);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JTextArea logArea;
  private JScrollPane logSP;
  // End of variables declaration//GEN-END:variables

  //Testing
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
      Logger.error("Can't set the LookAndFeel: " + ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
      CANMessagePanel testPanel = new CANMessagePanel();
      JFrame testFrame = new JFrame("ControllerPanel Tester");
      //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/media/jcs-train-64.png")));
      URL iconUrl = CANMessagePanel.class.getResource("/media/jcs-train-2-512.png");
      if (iconUrl != null) {
        testFrame.setIconImage(new ImageIcon(iconUrl).getImage());
      }

      JFrame.setDefaultLookAndFeelDecorated(true);
      testFrame.add(testPanel);

      testFrame.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
          System.exit(0);
        }
      });
      testFrame.pack();
      testFrame.setLocationRelativeTo(null);
      testFrame.setVisible(true);
    });
  }
}
