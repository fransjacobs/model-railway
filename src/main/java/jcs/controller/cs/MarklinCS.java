/*
 * Copyright 2023 Frans Jacobs.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jcs.controller.cs;

import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import jcs.controller.cs3.events.SensorMessageEvent;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import jcs.JCS;
import jcs.controller.cs3.events.CanMessageListener;
import jcs.controller.cs3.http.AccessoryBeanParser;
import jcs.controller.cs3.http.LocomotiveBeanParser;
import jcs.entities.enums.AccessoryValue;
import jcs.entities.enums.Direction;
import jcs.entities.enums.DecoderType;
import jcs.controller.cs3.http.SvgIconToPngIconConverter;
import jcs.entities.AccessoryBean;
import jcs.entities.LocomotiveBean;
import org.tinylog.Logger;
import jcs.controller.MarklinController;
import jcs.controller.cs.can.CanMessage;
import jcs.controller.cs.can.CanMessageFactory;
import static jcs.controller.cs.can.CanMessageFactory.getStatusDataConfigResponse;
import jcs.controller.cs.can.MarklinCan;
import jcs.controller.cs.can.parser.ChannelDataParser;
import jcs.controller.cs.can.parser.StatusDataConfigParser;
import jcs.controller.cs.can.parser.SystemStatusParser;
import jcs.controller.cs.events.CanMessageEvent;
import jcs.controller.cs.net.CSConnection;
import jcs.controller.cs.net.HTTPConnection;
import jcs.controller.cs.net.CSConnectionFactory;
import jcs.controller.cs3.devices.GFP;
import jcs.controller.cs3.devices.LinkSxx;
import jcs.controller.cs3.devices.SxxBus;
import jcs.controller.cs3.events.AccessoryMessageEvent;
import jcs.controller.cs3.events.PowerEvent;
import jcs.controller.cs3.events.PowerEventListener;
import jcs.controller.cs3.http.DeviceJSONParser;
import jcs.controller.cs3.events.AccessoryMessageEventListener;
import jcs.controller.cs3.events.DirectionMessageEvent;
import jcs.controller.cs3.events.DirectionMessageEventListener;
import jcs.controller.cs3.events.FunctionMessageEvent;
import jcs.controller.cs3.http.AccessoryJSONParser;
import jcs.controller.cs3.events.FunctionMessageEventListener;
import jcs.controller.cs3.events.VelocityMessageEvent;
import jcs.controller.cs3.events.VelocityMessageEventListener;
import jcs.controller.cs.events.CanPingListener;
import jcs.controller.cs.events.FeedbackEventListener;
import jcs.controller.cs3.events.SensorMessageListener;

/**
 *
 * @author Frans Jacobs
 */
public class MarklinCS implements MarklinController {

  private CSConnection connection;
  private boolean connected = false;

  private Map<Integer, Device> devices;

  //Central Station properties
  private GFP gfp;
  private int gfpUid;

  private LinkSxx linkSxx;
  private int linkSxxUid;

  private int csUid;
  private String csArticle;
  private String csName;

  private ChannelDataParser channelData1;
  private ChannelDataParser channelData2;
  private ChannelDataParser channelData3;
  private ChannelDataParser channelData4;
  private AccessoryJSONParser accessoryParser;

  private CanPingListener pingMessageListener;

  private final List<PowerEventListener> powerEventListeners;

  private final List<SensorMessageListener> sensorMessageEventListeners;
  private final List<AccessoryMessageEventListener> accessoryMessageEventListeners;
  private final List<FunctionMessageEventListener> functionMessageEventListeners;
  private final List<DirectionMessageEventListener> directionMessageEventListeners;
  private final List<VelocityMessageEventListener> velocityMessageEventListeners;

  private ExecutorService executor;
  private boolean power;

  public MarklinCS() {
    this(true);

  }

  MarklinCS(boolean connect) {
    devices = new HashMap<>();

    powerEventListeners = new LinkedList<>();
    sensorMessageEventListeners = new LinkedList<>();
    accessoryMessageEventListeners = new LinkedList<>();
    functionMessageEventListeners = new LinkedList<>();
    directionMessageEventListeners = new LinkedList<>();
    velocityMessageEventListeners = new LinkedList<>();

    executor = Executors.newCachedThreadPool();

    if (connect) {
      connect();
    }
  }

  int getGfpUid() {
    return gfpUid;
  }

  int getLinkSxxUid() {
    return linkSxxUid;
  }

  int getCsUid() {
    return csUid;
  }

  public boolean isCS3() {
    return !"60214".equals(this.csArticle);
  }

  @Override
  public String getName() {
    return this.csName;
  }

  @Override
  public String getSerialNumber() {
    if (this.gfp != null) {
      return this.gfp.getSerial();
    } else {
      return null;
    }
  }

  @Override
  public String getArticleNumber() {
    if (this.gfp != null) {
      return this.gfp.getArticleNumber();
    } else {
      return null;
    }
  }

  public String getIp() {
    return CSConnectionFactory.getControllerIp();
  }

  @Override
  public final boolean connect() {
    if (!connected) {
      Logger.trace("Connecting to a Central Station...");
      if (executor == null || executor.isShutdown()) {
        executor = Executors.newCachedThreadPool();
      }

      CSConnection csConnection = CSConnectionFactory.getConnection();
      this.connection = csConnection;

      JCS.logProgress("Obtaining Device information...");
      getMembers();

      if (connection != null) {
        //Wait, if needed until the receiver thread has started
        long now = System.currentTimeMillis();
        long timeout = now + 1000L;

        while (!connected && now < timeout) {
          connected = csConnection.isConnected();
          now = System.currentTimeMillis();
        }

        if (connected) {
          CanMessageEventListener messageListener = new CanMessageEventListener(this);

          CanPingListener pingListener = new CanPingRequestMessageListener(this);
          CanFeedbackEventListener feedbackListener = new CanFeedbackEventListener(this);

          this.connection.setCanMessageListener(messageListener);
          this.connection.setCanPingRequestListener(pingListener);
          this.connection.setFeedbackEventListener(feedbackListener);

          //need to wait until devices are queried...
          //TODO timeout
          while (this.csName == null) {
            for (Device d : this.devices.values()) {
              if (d.isDataComplete()) {
                if ("60214".equals(d.getArticleNumber()) || "60226".equals(d.getArticleNumber())) {
                  csName = d.getDeviceName();
                  csUid = d.getUid();
                  csArticle = d.getArticleNumber();
                }
              }
            }
            pause(50);
          }

          Logger.debug("Connected with " + this.csName);
          JCS.logProgress("Connected with " + this.csName);

          if (this.isCS3()) {
            getAppDevicesCs3();
          }

          this.power = this.isPower();
          JCS.logProgress("Power is " + (this.power ? "On" : "Off"));
        }
      } else {
        Logger.warn("Can't connect with CS 3!");
        JCS.logProgress("Can't connect with Central Station!");
      }
    }
    Logger.trace("Connected: " + connected);

    return connected;
  }

  /**
   * The CS3 has a Web App API which is used for the Web GUI. The Internal devices can be obtained calling this API which returns a JSON string, From this JSON all devices are found. Most important is
   * the GFP which is the heart of the CS 3 most CAN Command need the GFP UID. This dat can also be obtained using the CAN Member PING command, but The JSON gives a little more detail
   *
   * @return
   */
  void getAppDevicesCs3() {
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    if (httpCon.isConnected()) {
      String deviceJSON = httpCon.getDevicesJSON();
      DeviceJSONParser dp = new DeviceJSONParser();
      dp.parseDevices(deviceJSON);

      //this.csUid = Integer.parseInt(dp.getCs3().getUid().substring(2), 16);
      //this.csName = dp.getCs3().getName();
      this.gfp = dp.getGfp();
      this.gfpUid = Integer.parseInt(this.gfp.getUid().substring(2), 16);
      this.linkSxx = dp.getLinkSxx();
      this.linkSxxUid = Integer.parseInt(this.linkSxx.getUid().substring(2), 16);

      Logger.trace("CS3 uid: " + dp.getCs3().getUid());
      Logger.trace("CS3: " + this.csName);
      Logger.trace("GFP uid: " + this.gfp.getUid());
      Logger.trace("GFP Article: " + this.gfp.getArticleNumber());
      Logger.trace("GFP version: " + this.gfp.getVersion());
      Logger.trace("GFP Serial: " + this.gfp.getSerial());
      Logger.trace("GFP id: " + this.gfp.getIdentifier());

      Logger.trace("LinkSxx uid: " + this.linkSxx.getUid());
      Logger.trace("LinkSxx id: " + this.linkSxx.getIdentifier() + " deviceId: " + this.linkSxx.getDeviceId());
      Logger.trace("LinkSxx serial: " + this.linkSxx.getSerialNumber());
      Logger.trace("LinkSxx version: " + this.linkSxx.getVersion());

      for (SxxBus b : this.linkSxx.getSxxBusses().values()) {
        Logger.trace(b);
      }
    } else {
      Logger.warn("Not Connected with CS 3!");
    }
  }

  @Override
  public GFP getGFP() {
    return this.gfp;
  }

  @Override
  public LinkSxx getLinkSxx() {
    return this.linkSxx;
  }

  /**
   * Query the System Status
   *
   * @return true the track power is on else off.
   */
  @Override
  public boolean isPower() {
    if (this.connected) {
      CanMessage m = sendMessage(CanMessageFactory.querySystem(this.gfpUid));

      Logger.trace("Received " + m.getResponses().size() + " responses. RX: " + m.getResponse());
      SystemStatusParser ss = new SystemStatusParser(m);
      this.power = ss.isPower();
    } else {
      this.power = false;
    }
    return this.power;
  }

  /**
   * System Stop and GO When on = true then the GO command is issued: The track format processor activates the operation and supplies electrical energy. Any speed levels/functions that may still exist
   * or have been saved will be sent again. when false the Stop command is issued: Track format processor stops operation on main and programming track. Electrical energy is no longer supplied. All
   * speed levels/function values and settings are retained.
   *
   * @param on true Track power On else Off
   * @return true the Track power is On else Off
   */
  @Override
  public boolean power(boolean on
  ) {
    if (this.connected) {
      SystemStatusParser ss = new SystemStatusParser(sendMessage(CanMessageFactory.systemStopGo(on, gfpUid)));
      this.power = ss.isPower();
      return power;
    } else {
      return false;
    }
  }

  @Override
  public boolean isConnected() {
    return connected;
  }

  @Override
  public void disconnect() {
    try {
      if (connection != null) {
        connection.close();
        connected = false;
      }

      executor.shutdown();
      executor = null;
      connection = null;

      CSConnectionFactory.disconnectAll();
    } catch (Exception ex) {
      Logger.error(ex);
    }
    Logger.trace("Disconnected");
  }

  void getMembers() {
    CanMessage msg = CanMessageFactory.getMembersPing();
    this.connection.sendCanMessage(msg);
    if (msg.hasValidResponse()) {
      for (CanMessage rsp : msg.getResponses()) {
        Device d = new Device(rsp);
        this.devices.put(d.getUid(), d);
      }
    }
    // For the incomplete devices ask the status config
    for (Device d : this.devices.values()) {
      if (!d.isDataComplete()) {
        msg = sendMessage(CanMessageFactory.statusDataConfig(d.getUid(), 0));
        d.updateFromMessage(msg);
      }
    }
  }

  private void updateMember(CanMessage message) {
    executor.execute(() -> updateMemberIfNecessary(message));
  }

  private void updateMemberIfNecessary(final CanMessage message) {
    //Logger.trace(message);
    int uid = message.getDeviceUidNumberFromMessage();
    Device device;
    if (this.devices.containsKey(uid)) {
      device = this.devices.get(uid);
    } else {
      device = new Device(message);
    }
    if (!device.isDataComplete()) {
      CanMessage msg = sendMessage(CanMessageFactory.statusDataConfig(device.getUid(), 0));
      device.updateFromMessage(msg);
      Logger.trace("Updated: " + device);
    }

  }

  void getStatusDataConfig() {
    if (this.connected) {
      CanMessage message = sendMessage(CanMessageFactory.statusDataConfig(gfpUid, 0));
      StatusDataConfigParser sdcp = new StatusDataConfigParser(message);

      Logger.debug(sdcp);

      message = sendMessage(CanMessageFactory.statusDataConfig(gfpUid, 1));
      channelData1 = new ChannelDataParser(message);

      message = sendMessage(CanMessageFactory.statusDataConfig(gfpUid, 2));
      channelData2 = new ChannelDataParser(message);

      message = sendMessage(CanMessageFactory.statusDataConfig(gfpUid, 3));
      channelData3 = new ChannelDataParser(message);

      message = sendMessage(CanMessageFactory.statusDataConfig(gfpUid, 4));
      channelData4 = new ChannelDataParser(message);

      updateChannelStatuses();
    }
  }

  void updateChannelStatuses() {
    if (this.connected) {
      CanMessage message = sendMessage(CanMessageFactory.systemStatus(1, gfpUid));
      channelData1.parseMessage(message);
      Logger.trace(channelData1);

      message = sendMessage(CanMessageFactory.systemStatus(2, gfpUid));
      channelData2.parseMessage(message);
      Logger.trace(channelData2);

      message = sendMessage(CanMessageFactory.systemStatus(3, gfpUid));
      channelData3.parseMessage(message);
      Logger.trace(channelData3);

      message = sendMessage(CanMessageFactory.systemStatus(4, gfpUid));
      channelData4.parseMessage(message);
      Logger.trace(channelData1);
    }
  }

  /**
   * Blocking call to the message sender thread which send the message and await the response. When there is no response within 1s the waiting is cancelled
   *
   * @param canMessage to send
   * @return the CanMessage with responses
   */
  private CanMessage sendMessage(CanMessage canMessage) {
    if (this.connection != null) {
      this.connection.sendCanMessage(canMessage);
    } else {
      Logger.warn("NOT connected!");
      Logger.trace("Message: " + canMessage + " NOT Send!");
    }
    return canMessage;
  }

  private int getLocoAddres(int address, DecoderType decoderType) {
    int locoAddress;
    locoAddress = switch (decoderType) {
      case MFX ->
        0x4000 + address;
      case DCC ->
        0xC000 + address;
      case SX1 ->
        0x0800 + address;
      case MM ->
        address;
      default ->
        address;
    };

    return locoAddress;
  }

  @Override
  public void changeDirection(int address, DecoderType decoderType, Direction direction) {
    if (this.power) {
      int la = getLocoAddres(address, decoderType);
      Logger.trace("Setting direction to: " + direction + " for loc address: " + la + " Decoder: " + decoderType + " Dir Mar: " + direction.getMarklinValue());
      CanMessage message = sendMessage(CanMessageFactory.setDirection(la, direction.getMarklinValue(), this.gfpUid));
      DirectionMessageEvent dme = new DirectionMessageEvent(message);
      this.notifyDirectionEventListeners(dme);
    }
  }

  @Override
  public void changeVelocity(int address, DecoderType decoderType, int speed) {
    if (this.power) {
      int la = getLocoAddres(address, decoderType);
      CanMessage message = sendMessage(CanMessageFactory.setLocSpeed(la, speed, this.gfpUid));
      VelocityMessageEvent vme = new VelocityMessageEvent(message);
      this.notifyVelocityEventListeners(vme);
    }
  }

  @Override
  public void changeFunctionValue(int address, DecoderType decoderType, int functionNumber, boolean flag) {
    if (this.power) {
      int value = flag ? MarklinCan.FUNCTION_ON : MarklinCan.FUNCTION_OFF;
      int la = getLocoAddres(address, decoderType);
      CanMessage message = sendMessage(CanMessageFactory.setFunction(la, functionNumber, value, this.gfpUid));

      this.notifyFunctionEventListeners(new FunctionMessageEvent(message));
    }
  }

  // Use for Accessories
  private void wait200ms() {
    pause(200L);
  }

  private void pause(long millis) {
    try {
      Thread.sleep(millis);
    } catch (InterruptedException ex) {
      Logger.error(ex);
    }
  }

  @Override
  public void switchAccessory(int address, AccessoryValue value) {
    if (this.power) {
      executor.execute(() -> switchAccessoryOnOff(address, value));
    } else {
      Logger.trace("Trackpower is OFF! Can't switch Accessory: " + address + " to: " + value + "!");
    }
  }

  private void switchAccessoryOnOff(int address, AccessoryValue value) {
    CanMessage message = sendMessage(CanMessageFactory.switchAccessory(address, value, true, this.gfpUid));
    //TODO: dynamic setting of time or messageQueue it
    wait200ms();
    sendMessage(CanMessageFactory.switchAccessory(address, value, false, this.gfpUid));
    //Notify listeners
    AccessoryMessageEvent ae = new AccessoryMessageEvent(message);
    notifyAccessoryEventListeners(ae);
  }

  private void sendJCSUID() {
    executor.execute(() -> sendJCSUIDMessage());
  }

  private void sendJCSUIDMessage() {
    sendMessage(CanMessageFactory.getMemberPingResponse(MarklinCan.JCS_UID, 1, MarklinCan.JCS_DEVICE_ID));
  }

  private void sendJCSInformation() {
    executor.execute(() -> sentJCSInformationMessage());
  }

  private void sentJCSInformationMessage() {
    List<CanMessage> messages = getStatusDataConfigResponse(MarklinCan.JCS_SERIAL, 0, 0, "JCS", "Java Central Station", MarklinCan.JCS_UID);
    for (CanMessage msg : messages) {
      sendMessage(msg);
    }
  }

  @Override
  public List<LocomotiveBean> getLocomotives() {
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    String cs3Locos = httpCon.getLocomotivesFile();
    LocomotiveBeanParser lp = new LocomotiveBeanParser();
    return lp.parseLocomotivesFile(cs3Locos);
  }

  @Override
  public void cacheAllFunctionIcons(PropertyChangeListener progressListener) {
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    String json = httpCon.getAllFunctionsSvgJSON();

    if (progressListener != null) {
      PropertyChangeEvent pce = new PropertyChangeEvent(this, "synchProcess", null, "Getting all function Icons...");
      progressListener.propertyChange(pce);
    }

    SvgIconToPngIconConverter svgp = new SvgIconToPngIconConverter(progressListener);
    svgp.convertAndCacheAllFunctionsSvgIcons(json);
  }

  //@Override
  public List<AccessoryBean> getAccessories() {
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    String magnetartikelCs2 = httpCon.getAccessoriesFile();
    AccessoryBeanParser ap = new AccessoryBeanParser();
    return ap.parseAccessoryFile(magnetartikelCs2);
  }

  @Override
  public List<AccessoryBean> getSwitches() {
    if (this.accessoryParser == null) {
      this.accessoryParser = new AccessoryJSONParser();
    }
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    String json = httpCon.getAccessoriesJSON();
    accessoryParser.parseAccessories(json);
    return accessoryParser.getTurnouts();
  }

  @Override
  public List<AccessoryBean> getSignals() {
    if (this.accessoryParser == null) {
      this.accessoryParser = new AccessoryJSONParser();
    }
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    String json = httpCon.getAccessoriesJSON();
    accessoryParser.parseAccessories(json);
    return accessoryParser.getSignals();
  }

  @Override
  public Image getLocomotiveImage(String icon) {
    HTTPConnection httpCon = CSConnectionFactory.getHTTPConnection();
    Image locIcon = httpCon.getLocomotiveImage(icon);
    return locIcon;
  }

  @Override
  public void addPowerEventListener(PowerEventListener listener) {
    this.powerEventListeners.add(listener);
  }

  @Override
  public void removePowerEventListener(PowerEventListener listener) {
    this.powerEventListeners.remove(listener);
  }

  @Override
  public void addSensorMessageListener(SensorMessageListener listener) {
    this.sensorMessageEventListeners.add(listener);
  }

  @Override
  public void removeSensorMessageListener(SensorMessageListener listener) {
    this.sensorMessageEventListeners.remove(listener);
  }

  @Override
  public void addAccessoryEventListener(AccessoryMessageEventListener listener) {
    this.accessoryMessageEventListeners.add(listener);
  }

  @Override
  public void removeAccessoryEventListener(AccessoryMessageEventListener listener) {
    this.accessoryMessageEventListeners.remove(listener);
  }

  @Override
  public void addFunctionMessageEventListener(FunctionMessageEventListener listener) {
    this.functionMessageEventListeners.add(listener);
  }

  @Override
  public void removeFunctionMessageEventListener(FunctionMessageEventListener listener) {
    this.functionMessageEventListeners.remove(listener);
  }

  @Override
  public void addDirectionMessageEventListener(DirectionMessageEventListener listener) {
    this.directionMessageEventListeners.add(listener);
  }

  @Override
  public void removeDirectionMessageEventListener(DirectionMessageEventListener listener) {
    this.directionMessageEventListeners.remove(listener);
  }

  @Override
  public void addVelocityMessageEventListener(VelocityMessageEventListener listener) {
    this.velocityMessageEventListeners.add(listener);
  }

  @Override
  public void removeVelocityMessageEventListener(VelocityMessageEventListener listener) {
    this.velocityMessageEventListeners.remove(listener);
  }

  private void notifyPowerEventListeners(final PowerEvent powerEvent) {
    this.power = powerEvent.isPower();
    executor.execute(() -> fireAllPowerEventListeners(powerEvent));
  }

  private void fireAllPowerEventListeners(final PowerEvent powerEvent) {
    for (PowerEventListener listener : powerEventListeners) {
      listener.onPowerChange(powerEvent);
    }
  }

  private void fireAllSensorListeners(final SensorMessageEvent sensorMessageEvent) {
    for (SensorMessageListener listener : sensorMessageEventListeners) {
      listener.onSensorMessage(sensorMessageEvent);
    }
  }

  private void notifySensorMessageEventListeners(final SensorMessageEvent sensorMessageEvent) {
    executor.execute(() -> fireAllSensorListeners(sensorMessageEvent));
  }

  private void fireAllAccessoryEventListeners(final AccessoryMessageEvent accessoryEvent) {
    for (AccessoryMessageEventListener listener : this.accessoryMessageEventListeners) {
      listener.onAccessoryMessage(accessoryEvent);
    }
  }

  private void notifyAccessoryEventListeners(final AccessoryMessageEvent accessoryEvent) {
    executor.execute(() -> fireAllAccessoryEventListeners(accessoryEvent));
  }

  private void fireAllFunctionEventListeners(final FunctionMessageEvent functionEvent) {
    for (FunctionMessageEventListener listener : this.functionMessageEventListeners) {
      listener.onFunctionMessage(functionEvent);
    }
  }

  private void notifyFunctionEventListeners(final FunctionMessageEvent functionEvent) {
    executor.execute(() -> fireAllFunctionEventListeners(functionEvent));
  }

  private void fireAllDirectionEventListeners(final DirectionMessageEvent directionEvent) {
    for (DirectionMessageEventListener listener : this.directionMessageEventListeners) {
      listener.onDirectionMessage(directionEvent);
    }
  }

  private void notifyDirectionEventListeners(final DirectionMessageEvent directionEvent) {
    executor.execute(() -> fireAllDirectionEventListeners(directionEvent));
  }

  private void fireAllVelocityEventListeners(final VelocityMessageEvent velocityEvent) {
    for (VelocityMessageEventListener listener : this.velocityMessageEventListeners) {
      listener.onVelocityMessage(velocityEvent);
    }
  }

  private void notifyVelocityEventListeners(final VelocityMessageEvent velocityEvent) {
    executor.execute(() -> fireAllVelocityEventListeners(velocityEvent));

  }

  private class CanMessageEventListener implements CanMessageListener {

    private final MarklinCS controller;

    CanMessageEventListener(MarklinCS controller) {
      this.controller = controller;
    }

    @Override
    public void onCanMessage(CanMessageEvent canEvent) {
      CanMessage msg = canEvent.getCanMessage();
      int cmd = msg.getCommand();
      int subcmd = msg.getSubCommand();

      switch (cmd) {
//        case MarklinCan.S88_EVENT_RESPONSE -> {
//          SensorMessageEvent sme = new SensorMessageEvent(msg, canEvent.getEventDate());
//          if (sme.getSensorBean() != null) {
//            controller.notifySensorMessageEventListeners(sme);
//          }
//        }
        case MarklinCan.ACCESSORY_SWITCHING_RESP -> {
          AccessoryMessageEvent ae = new AccessoryMessageEvent(msg);
          if (ae.getAccessoryBean() != null && ae.getAccessoryBean().getAddress() != null) {
            controller.notifyAccessoryEventListeners(ae);
          }
        }
        case MarklinCan.LOC_FUNCTION_RESP -> {
          FunctionMessageEvent lfe = new FunctionMessageEvent(msg);
          if (lfe.getLocomotiveBean() != null && lfe.getLocomotiveBean().getId() != null) {
            controller.notifyFunctionEventListeners(lfe);
          }
        }
        case MarklinCan.LOC_DIRECTION_RESP -> {
          DirectionMessageEvent dme = new DirectionMessageEvent(msg);
          if (dme.getLocomotiveBean() != null && dme.getLocomotiveBean().getId() != null) {
            controller.notifyDirectionEventListeners(dme);
          }
        }
        case MarklinCan.LOC_VELOCITY_RESP -> {
          VelocityMessageEvent vme = new VelocityMessageEvent(msg);
          controller.notifyVelocityEventListeners(vme);
        }

        case MarklinCan.SYSTEM_COMMAND_RESP -> {
          switch (subcmd) {
            case MarklinCan.STOP_SUB_CMD -> {
              PowerEvent spe = new PowerEvent(msg);
              controller.notifyPowerEventListeners(spe);
            }
            case MarklinCan.GO_SUB_CMD -> {
              PowerEvent gpe = new PowerEvent(msg);
              controller.notifyPowerEventListeners(gpe);
            }
            case MarklinCan.LOC_STOP_SUB_CMD -> {
              VelocityMessageEvent vmeh = new VelocityMessageEvent(msg);
              controller.notifyVelocityEventListeners(vmeh);
            }
            default -> {
            }
          }
        }

        default -> {
          //Logger.trace("Message: " + msg);

        }
      }
      //Logger.trace("Message: " + msg);
    }
  }

  private class CanFeedbackEventListener implements FeedbackEventListener {

    private final MarklinCS controller;

    CanFeedbackEventListener(MarklinCS controller) {
      this.controller = controller;
    }

    @Override
    public void onFeedbackResponseEvent(final CanMessage message) {
      int cmd = message.getCommand();
      switch (cmd) {
        case MarklinCan.S88_EVENT_RESPONSE -> {
          if (MarklinCan.DLC_8 == message.getDlc()) {
            SensorMessageEvent sme = new SensorMessageEvent(message, new Date());
            if (sme.getSensorBean() != null) {
              controller.notifySensorMessageEventListeners(sme);
            }
          }
        }
      }
    }
  }

  private class CanPingRequestMessageListener implements CanPingListener {

    private final MarklinCS controller;

    CanPingRequestMessageListener(MarklinCS controller) {
      this.controller = controller;
    }

    @Override
    public void onCanPingRequest(final CanMessage message
    ) {
      int cmd = message.getCommand();
      int dlc = message.getDlc();
      int uid = message.getDeviceUidNumberFromMessage();
      switch (cmd) {
        case MarklinCan.PING_REQ -> {
          if (MarklinCan.DLC_0 == dlc) {
            //broadcast  
            controller.sendJCSUID();
          }
        }
      }
    }

    @Override
    public void onCanPingResponse(final CanMessage message
    ) {
      int cmd = message.getCommand();
      int dlc = message.getDlc();
      int uid = message.getDeviceUidNumberFromMessage();
      switch (cmd) {
        case MarklinCan.PING_RESP -> {
          if (MarklinCan.DLC_8 == dlc) {
            controller.updateMember(message);
          }
        }
      }
    }

    @Override
    public void onCanStatusConfigRequest(final CanMessage message
    ) {
      int cmd = message.getCommand();
      int dlc = message.getDlc();
      int uid = message.getDeviceUidNumberFromMessage();
      switch (cmd) {
        case MarklinCan.STATUS_CONFIG -> {
          if (MarklinCan.JCS_UID == uid && MarklinCan.DLC_5 == dlc) {
            controller.sendJCSInformation();
          }
        }
      }
    }
  }

  public static void main(String[] a) {
    MarklinCS cs3 = new MarklinCS(false);
    Logger.debug((cs3.connect() ? "Connected" : "NOT Connected"));

    if (cs3.isConnected()) {
      //Logger.debug("Power is " + (cs3.isPower() ? "ON" : "Off"));

      //cs3.pause(2000);
      //Logger.trace("getStatusDataConfig CS3");
      //cs3.getStatusDataConfigCS3();
      //cs3.pause(2000);
      //Logger.trace("getStatusDataConfig");
      //cs3.getStatusDataConfig();
      //cs3.pause(1000);
      //cs3.pause(4000);
      //cs3.power(false);
      //Logger.debug("Power is " + (cs3.isPower() ? "ON" : "Off"));
      //cs3.power(true);
      //cs3.pause(500);
      //Logger.debug("Power is " + (cs3.isPower() ? "ON" : "Off"));
      //cs3.sendJCSInfo();
      //cs3.pause(500);
      //Logger.debug("Power is " + (cs3.isPower() ? "ON" : "Off"));
      //cs3.sendJCSInfo();
      //cs3.pause(500);
      //Logger.debug("Power is " + (cs3.isPower() ? "ON" : "Off"));
      //cs3.sendJCSInfo();
      //SystemConfiguration data
      //cs3.getStatusDataConfig();
      //Logger.debug("Channel 1: " + cs3.channelData1.getChannel().getHumanValue() + " " + cs3.channelData1.getChannel().getUnit());
      //Logger.debug("Channel 2: " + cs3.channelData2.getChannel().getHumanValue() + " " + cs3.channelData2.getChannel().getUnit());
      //Logger.debug("Channel 3: " + cs3.channelData3.getChannel().getHumanValue() + " " + cs3.channelData3.getChannel().getUnit());
      //Logger.debug("Channel 4: " + cs3.channelData4.getChannel().getHumanValue() + " " + cs3.channelData4.getChannel().getUnit());
//            cs3.getSystemStatus(1);
//
//            Logger.debug("Channel 4....");
//            cs3.getSystemStatus(4);
//Now get the systemstatus for all devices
//First the status data config must be called to get the channels
      //cs3.getSystemStatus()
      //            SystemStatusParser ss = cs3.getSystemStatus();
      //            Logger.debug("1: "+ss);
      //
      //
      //            ss = cs3.power(true);
      //            Logger.debug("3: "+ss);
      //
      //            cs3.pause(1000);
      //            ss = cs3.power(false);
      //            Logger.debug("4: "+ss);
      //            List<SensorMessageEvent> sml = cs3.querySensors(48);
      //            for (SensorMessageEvent sme : sml) {
      //                Sensor s = new Sensor(sme.getContactId(), sme.isNewValue() ? 1 : 0, sme.isOldValue() ? 1 : 0, sme.getDeviceIdBytes(), sme.getMillis(), new Date());
      //                Logger.debug(s.toLogString());
      //            }
      //List<AccessoryBean> asl = cs3.getAccessoryStatuses();
      //for (AccessoryStatus as : asl) {
      //    Logger.debug(as.toString());
      //}
      //            for (int i = 0; i < 30; i++) {
      //                cs3.sendIdle();
      //                pause(500);
      //            }
      //            Logger.debug("Sending  member ping\n");
      //            List<PingResponse> prl = cs3.membersPing();
      //            //Logger.info("Query direction of loc 12");
      //            //DirectionInfo info = cs3.getDirection(12, DecoderType.MM);
      //            Logger.debug("got " + prl.size() + " responses");
      //            for (PingResponseParser device : prl) {
      //                Logger.debug(device);
      //            }
      //            List<SensorMessageEvent> sel = cs3.querySensors(48);
      //
      //            for (SensorMessageEvent se : sel) {
      //                Logger.debug(se.toString());
      //            }
      //            FeedbackModule fm2 = new FeedbackModule(2);
      //            cs3.queryAllPorts(fm2);
      //            Logger.debug(fm2.toLogString());
      //cs2.querySensor(1);
    }

    //PingResponse pr2 = cs3.memberPing();
    //Logger.info("Query direction of loc 12");
    //DirectionInfo info = cs3.getDirection(12, DecoderType.MM);
    //cs3.pause(500L);
    Logger.debug("Wait for 1m");
    cs3.pause(1000 * 60 * 1);

    cs3.disconnect();
    cs3.pause(100L);
    Logger.debug("DONE");
    //System.exit(0);
  }
  //for (int i = 0; i < 16; i++) {
  //    cs3.requestFeedbackEvents(i + 1);
  //}

}

//TX: 0x00 0x30 0x07 0x69 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
//RX: 0x00 0x31 0xcb 0x13 0x08 0x43 0x53 0x9a 0x40 0x03 0x55 0x00 0x00 Response count 1
//RX: 0x00 0x31 0x07 0x69 0x08 0x43 0x53 0x9a 0x41 0x04 0x03 0xff 0xff Response count 2
//raw loks messages
//00 42 CB 12 06 00 00 08 87 64 33 00 00 273 rowsbytes of 273 * 8 2184   msg len 0x0887 = 2183 ok de laata byte is 0x00 dis telt niet due idd 2183
//00 42 CB 12 08 00 00 46 71 78 9C ED 5C
//00 42 CB 12 08 5B 4F DB 48 14 7E F7 AF
//00 42 CB 12 08 98 3F 10 34 77 DB 0F 79
//00 42 CB 12 08 28 85 6D AB 56 B4 82 15
//00 42 CB 12 08 D2 6A B5 AA 1C DB 81 88
//00 42 CB 12 08 24 8E 92 40 D9 7F BF E3
//00 42 CB 12 08 89 33 97 E4 8C 9D 10 28
//00 42 CB 12 08 B0 A0 AA C2 1E 1F 8F 67
//00 42 CB 12 08 CE 7C E7 3B 97 19 F8 7B
//00 42 CB 12 08 5C DD 54 93 6A 39 BA 2B
//00 42 CB 12 08 FF 89 EE CA F9 62 54 4D
//00 42 CB 12 08 23 74 34 19 4D AB 79 9F
//00 42 CB 12 08 47 8B 72 D1 B4 8C 8A 3E
//00 42 CB 12 08 8D AC B0 6A 99 66 93 B2
//00 42 CB 12 08 7F 49 31 56 D7 F3 51 7E
//00 42 CB 12 08 BD BC 9D 5E F5 89 BA B9
//00 42 CB 12 08 55 B2 F8 BE BE 5A FE 3B
//00 42 CB 12 08 EB 4F 26 F4 E7 6C 7E 55
//00 42 CB 12 08 77 91 57 D3 FE F1 39 A2
//00 42 CB 12 08 AC 7E 65 F1 EF 64 50 8D
//00 42 CB 12 08 F5 0B D9 5D BF 6E 19 AC
//00 42 CB 12 08 7E DC 55 E3 5B D5 33 15
//00 42 CB 12 08 EA 7A 36 AF AE 26 D9 E2
//00 42 CB 12 08 46 F5 57 DF 2E B3 FC BA
//00 42 CB 12 08 9A 64 F7 2B B9 FA 42 C4
//00 42 CB 12 08 FA 6A 34 ED 33 75 31 BC
//00 42 CB 12 08 9D DE 2C D5 78 CB 7A C4
//00 42 CB 12 08 47 D3 B9 96 D3 A3 20 D0
//00 42 CB 12 08 53 B0 91 42 8D 6C DD 4F
//00 42 CB 12 08 02 3D E5 E6 2B E0 63 01
//00 42 CB 12 08 35 4A A8 B1 9E CC D1 AF
//00 42 CB 12 08 72 BE D4 43 5B 69 ED 28
//00 42 CB 12 08 2B E6 6A 15 4A DD B4 52
//00 42 CB 12 08 7A 56 D4 4D 6D B2 B1 91
//00 42 CB 12 08 FD 58 4D 87 A3 2B 2B CB
//00 42 CB 12 08 B7 85 25 35 D2 9F CB F1
//00 42 CB 12 08 0C 9D 9F 7E 32 F2 02 6F
//00 42 CB 12 08 CB 73 6E E4 2F B3 3C B7 
//00 42 CB 12 08 7D 0B 40 56 58 D9 A2 B4
//00 42 CB 12 08 B2 90 A8 B4 A2 6A 69 6D 
//00 42 CB 12 08 B7 C0 10 28 33 B2 5F 67
//00 42 CB 12 08 6D 9D 52 3B D6 AF 23 23
//00 42 CB 12 08 28 53 40 D2 8E F4 6B D1
//00 42 CB 12 08 3A 7F 89 8D E4 F7 D9 12
//00 42 CB 12 08 7D FB FE E1 C4 C8 03 1D
//00 42 CB 12 08 DB A1 9E 97 8B 72 E9 2C
//00 42 CB 12 08 DB B6 39 1D 9F 27 A4 87
//00 42 CB 12 08 31 35 56 54 5F AD 3B 5A
//00 42 CB 12 08 DD F9 36 B5 30 52 6B EB
//00 42 CB 12 08 4A 88 35 2E FA 20 E3 D2
//00 42 CB 12 08 3D 68 EB E2 F8 F7 5B 97
//00 42 CB 12 08 C5 74 87 9D B5 08 EE 67
//00 42 CB 12 08 71 1D 76 66 0D 8D 02 A8
//00 42 CB 12 08 49 37 2C 0D 15 D9 32 23
//00 42 CB 12 08 E6 15 0D EA 20 20 3E DE
//00 42 CB 12 08 A1 33 F5 D3 48 33 C0 2A
//00 42 CB 12 08 82 C2 80 25 8B A0 30 60
//00 42 CB 12 08 1A 32 28 2C 41 64 22 CC
//00 42 CB 12 08 10 C1 B4 56 02 40 F7 CC
//00 42 CB 12 08 03 2A 73 80 5A 8C C6 89
//00 42 CB 12 08 83 4F 4C 10 61 0C 9D 1C
//00 42 CB 12 08 B7 C1 D4 23 FA 07 E0 4E
//00 42 CB 12 08 3F 8D 43 00 D4 4F 83 48
//00 42 CB 12 08 7C 5A 7A DF 6A 04 FB 4C
//00 42 CB 12 08 C1 89 81 CA 20 B0 12 C0
//00 42 CB 12 08 E9 11 70 7E DA 27 6C B7
//00 42 CB 12 08 0A 00 05 67 17 48 0A 87
//00 42 CB 12 08 9E 12 6F D5 93 C0 AA 9F
//00 42 CB 12 08 7C FE 84 62 DC EA F4 F7
//00 42 CB 12 08 58 F0 16 BB 37 4B 2F 3A
//00 42 CB 12 08 04 0D 0A 44 3B 21 89 76
//00 42 CB 12 08 40 08 FE 98 3C F4 EA A1
//00 42 CB 12 08 41 28 16 30 3B 0C 3C 9C
//00 42 CB 12 08 0C 22 D8 8D 31 E3 C7 2E
//00 42 CB 12 08 CA F9 A8 54 FD D1 86 1A
//00 42 CB 12 08 58 D4 E5 C1 88 0B 22 C2
//00 42 CB 12 08 8D 0B 93 9E 0B 9B 0C EF
//00 42 CB 12 08 EB 0F 73 50 DD AF 2E 58
//00 42 CB 12 08 DC 5E 84 53 35 73 C5 B0
//00 42 CB 12 08 02 E1 C4 E8 3E F7 74 9F
//00 42 CB 12 08 07 74 4F F1 5A F7 A7 8A
//00 42 CB 12 08 E5 7F 92 87 85 0E 8E E2
//00 42 CB 12 08 39 A4 78 01 CE 64 1F F3
//00 42 CB 12 08 DE 7D 09 9E 96 C7 83 41
//00 42 CB 12 08 C3 A6 33 25 50 D4 10 94
//00 42 CB 12 08 06 84 5F 65 B8 70 C9 A4
//00 42 CB 12 08 01 60 E9 01 B0 DC 02 A0
//00 42 CB 12 08 46 DD 25 62 12 2D 7E 45
//00 42 CB 12 08 FB 27 86 9E E5 9B C4 50
//00 42 CB 12 08 1E 1A BA 76 78 8F 97 64
//00 42 CB 12 08 F5 97 88 48 8C B0 8E 45
//00 42 CB 12 08 9B E4 1B 7B 3A D7 B7 1B 
//00 42 CB 12 08 9E 79 65 F6 71 3E 1C D8 
//00 42 CB 12 08 25 20 72 77 27 DD 58 34 
//00 42 CB 12 08 15 A0 8B D8 CB 63 EF E0 
//00 42 CB 12 08 A7 09 03 F5 C6 3A 9E BF 
//00 42 CB 12 08 87 6E 9E 7F 4E 84 B0 10 
//00 42 CB 12 08 21 3E 44 DC 7A 4D 10 22 
//00 42 CB 12 08 24 A1 09 FA 30 2B C7 45 
//00 42 CB 12 08 55 CD A7 61 80 AC FC C0 
//00 42 CB 12 08 3B 44 9E 12 22 6D 2A 3B 
//00 42 CB 12 08 14 2C 2A 4F 23 2A 51 C3 
//00 42 CB 12 08 98 F5 02 F9 1E 89 7D F8 
//00 42 CB 12 08 C4 21 F8 10 E9 66 7F AA 
//00 42 CB 12 08 D7 30 6A 28 76 50 43 92 
//00 42 CB 12 08 6E E2 7E 48 AC A0 5F 06 
//00 42 CB 12 08 35 61 91 82 C1 55 7F B5 
//00 42 CB 12 08 48 79 7C 7C 9C 9E 23 8A 
//00 42 CB 12 08 D1 E7 72 9E DF 8E CB 05 
//00 42 CB 12 08 FA 51 8D 47 79 69 B1 91 
//00 42 CB 12 08 FA D8 48 23 D0 E5 9F 5F 
//00 42 CB 12 08 AB 4E 48 AD A1 97 E2 F2 
//00 42 CB 12 08 C3 B9 41 47 9A F8 C4 70 
//00 42 CB 12 08 81 D9 3C D6 31 7B 53 27 
//00 42 CB 12 08 14 9E CA F5 2D 94 8A EF 
//00 42 CB 12 08 47 E0 4F 64 7D 6F 8D A9 
//00 42 CB 12 08 9F C0 FE 10 27 58 D7 B6 
//00 42 CB 12 08 9B E5 F7 2D 8E 6E 5B 5C 
//00 42 CB 12 08 43 C6 25 19 46 4E 9E D7 
//00 42 CB 12 08 63 8F 69 72 6B E6 3E 98 
//00 42 CB 12 08 B8 6D 0D E7 49 2B 37 6F
//00 42 CB 12 08 1A 42 44 50 44 48 DA E3
//00 42 CB 12 08 E8 E4 F8 C3 27 83 24 8E
//00 42 CB 12 08 B1 4F 25 86 49 86 F7 06 
//00 42 CB 12 08 46 62 B5 D8 AB 37 E2 62
//00 42 CB 12 08 38 90 71 56 44 8E 97 17 
//00 42 CB 12 08 F4 48 F7 ED A1 8B B9 E8 
//00 42 CB 12 08 DA 28 1B 18 1C D5 AF 2C
//00 42 CB 12 08 66 13 3F C5 A8 85 07 E3
//00 42 CB 12 08 2A BF 59 F4 55 9E 83 88 
//00 42 CB 12 08 1A B9 AC 1D 50 2C 51 92 
//00 42 CB 12 08 A8 5B AE 66 22 91 EA 45 
//00 42 CB 12 08 FD E7 08 AF FF 3D 0A 0C 
//00 42 CB 12 08 41 8D DA 2A 32 B8 0C 4E 
//00 42 CB 12 08 24 F1 40 22 5B 75 0E BE 
//00 42 CB 12 08 2D CD C8 C0 81 C7 ED DF 
//00 42 CB 12 08 4E CC DB 20 AC 52 F3 76 
//00 42 CB 12 08 18 B7 AB B1 C1 83 23 46 
//00 42 CB 12 08 6F 04 B6 40 62 BD 40 38 
//00 42 CB 12 08 74 6D ED C0 6A 2F 60 19 
//00 42 CB 12 08 30 61 92 44 AA 78 36 EE 
//00 42 CB 12 08 25 E8 EC C2 45 BB F4 D0 
//00 42 CB 12 08 2E 01 B4 4B 0F ED 6C 28 
//00 42 CB 12 08 08 63 F1 1A ED CA 11 9F 
//00 42 CB 12 08 AA AE 3D A0 F3 4D A0 3B 
//00 42 CB 12 08 3C CA 93 68 2B E2 D5 54 
//00 42 CB 12 08 4A F5 56 A9 B6 81 FA A2 
//00 42 CB 12 08 09 B6 5B 4C 40 E1 5F 2A 
//00 42 CB 12 08 E0 2B 1B 20 A9 44 4C B5 
//00 42 CB 12 08 30 8C 11 63 B2 81 3F 93 
//00 42 CB 12 08 8F 67 04 2A D6 78 B5 66 
//00 42 CB 12 08 00 07 13 3B DB 41 0C 6B 
//00 42 CB 12 08 06 77 09 18 DD 85 2C C5 
//00 42 CB 12 08 2A 0F 36 35 AB 3D F8 03 
//00 42 CB 12 08 46 7D 0C 74 46 C4 77 66 
//00 42 CB 12 08 3F E9 BA 5D 06 DA E3 40 
//00 42 CB 12 08 7B 12 68 4F E1 F6 8D D9 
//00 42 CB 12 08 DA 76 12 68 A7 81 76 16 
//00 42 CB 12 08 68 E7 81 F6 C0 7C 69 60 
//00 42 CB 12 08 BE 34 30 5F 1A 98 2F 0D 
//00 42 CB 12 08 CC 97 05 E6 CB A0 FD 7D 
//00 42 CB 12 08 92 32 65 A5 BC 57 EF 7F 
//00 42 CB 12 08 22 DF EB FA F9 B4 49 A7 
//00 42 CB 12 08 1D 1E 8A 37 78 88 91 82 
//00 42 CB 12 08 9A CA 4C ED 75 53 3F 9A 
//00 42 CB 12 08 6B F1 B7 D2 44 70 94 BC 
//00 42 CB 12 08 D3 CE 0B F4 BE 87 B3 0E 
//00 42 CB 12 08 4C 2A BB 7B 5F F8 7D A3 
//00 42 CB 12 08 BC 10 AB 19 F5 6D F2 EE 
//00 42 CB 12 08 3B 01 BD 04 02 12 92 F4 
//00 42 CB 12 08 B0 40 E7 E7 7F B8 DC 13 
//00 42 CB 12 08 D8 C6 77 B8 27 D9 E0 1E 
//00 42 CB 12 08 CE 06 98 AF B9 87 A5 58 
//00 42 CB 12 08 3A A7 8E C2 65 1C EA D7 
//00 42 CB 12 08 18 A8 61 21 22 3D 16 5A 
//00 42 CB 12 08 27 00 0D 1B 2D 66 59 9F 
//00 42 CB 12 08 E9 53 67 C3 65 9D DD 96 
//00 42 CB 12 08 0F 65 28 D6 64 07 2B 8E 
//00 42 CB 12 08 62 F1 C1 BB 91 BB 9C 33 
//00 42 CB 12 08 79 C1 1C 75 58 68 C4 C1 
//00 42 CB 12 08 B7 9D 14 01 A6 10 CB EE 
//00 42 CB 12 08 04 0E 5C 1C 8E 02 17 C8 
//00 42 CB 12 08 8D 8C E0 21 F0 2E 01 CB 
//00 42 CB 12 08 52 24 60 FD C4 28 91 04 
//00 42 CB 12 08 EC 8B 04 F5 E8 53 17 B0 
//00 42 CB 12 08 29 E8 73 18 C8 A7 3E 9D 
//00 42 CB 12 08 35 48 0A 31 89 E3 30 DB 
//00 42 CB 12 08 48 0E A8 55 FA 6C D7 D1 
//00 42 CB 12 08 87 51 2B 0F 75 22 3A 25 
//00 42 CB 12 08 8C 5A 83 34 F7 1C B4 A8
//00 42 CB 12 08 A2 27 CE 7B 32 0D 9C 65 
//00 42 CB 12 08 56 14 E9 17 D8 4C 7D CD 
//00 42 CB 12 08 A1 C8 74 83 22 09 49 07
//00 42 CB 12 08 E6 50 85 FE 40 B4 CB C1 
//00 42 CB 12 08 4C FF 28 A6 65 C8 C4 94 
//00 42 CB 12 08 48 5E 5E 9C 76 18 03 82 
//00 42 CB 12 08 2C B3 2B 03 12 38 90 31 
//00 42 CB 12 08 30 03 DF 76 2C B7 95 00 
//00 42 CB 12 08 41 02 B3 26 0B 47 40 D6 
//00 42 CB 12 08 5E 61 F6 B2 C6 CA 3B 12 
//00 42 CB 12 08 C3 50 05 C4 A8 8E C1 5F 
//00 42 CB 12 08 D8 25 33 6C A6 1F 30 9E 
//00 42 CB 12 08 F7 18 ED 19 C9 88 70 89 
//00 42 CB 12 08 44 2C 7A 12 7D F9 B8 3A 
//00 42 CB 12 08 27 6B 58 28 F3 58 28 03 
//00 42 CB 12 08 58 28 DB 60 A1 B4 14 BA 
//00 42 CB 12 08 90 6E 92 44 EE D7 AA B6 
//00 42 CB 12 08 B8 C7 AD 55 45 70 CE 48 
//00 42 CB 12 08 84 57 F6 07 A2 B5 C6 55 
//00 42 CB 12 08 2D 6D AD B8 AD 90 AB 68 
//00 42 CB 12 08 4A 51 13 D1 35 5D AE E9 
//00 42 CB 12 08 8A D2 04 D1 86 AA A8 A0 
//00 42 CB 12 08 8F 98 50 82 16 F5 2A 82 
//00 42 CB 12 08 B5 83 12 4A 70 67 C3 49 
//00 42 CB 12 08 27 BB B2 49 38 8C B2 4C 
//00 42 CB 12 08 05 EB D5 89 D4 02 02 36 
//00 42 CB 12 08 A4 80 9F EF 17 A8 05 D8 
//00 42 CB 12 08 C3 46 6A C1 10 CA 46 6A 
//00 42 CB 12 08 21 13 DE 2B 54 DB 8C 5C 
//00 42 CB 12 08 A1 50 4D 84 B8 EB 2D 71
//00 42 CB 12 08 DD C9 B1 8A 52 94 75 93 
//00 42 CB 12 08 B8 67 4F AF 29 A2 0B 1C 
//00 42 CB 12 08 18 76 88 6E E0 11 5D 3E 
//00 42 CB 12 08 2C F2 38 37 55 F9 6F 5F 
//00 42 CB 12 08 CE FE 8C BA 13 52 82 FD 
//00 42 CB 12 08 84 D4 D0 5A D2 4D 5A EE 
//00 42 CB 12 08 EE D3 C6 BE D3 E1 64 F5 
//00 42 CB 12 08 70 86 7A F0 D6 79 CB 88 
//00 42 CB 12 08 FE A7 3B A0 9F AB 69 51 
//00 42 CB 12 08 DE 54 33 64 F7 D1 15 F2 
//00 42 CB 12 08 02 C7 A5 1D E4 E5 2E F2 
//00 42 CB 12 08 86 E9 30 49 70 C9 D6 C8 
//00 42 CB 12 08 1B 8E CB D1 22 BF 9E 64 
//00 42 CB 12 08 D3 69 8F 73 5D BF 6C 50 
//00 42 CB 12 08 D8 B2 D5 BE 79 A4 DA 73 
//00 42 CB 12 08 BC B6 54 CB 3C B7 DB 9D 
//00 42 CB 12 08 02 AC 7C 6B 8D D1 DA BD 
//00 42 CB 12 08 D6 FB BD BC CE 08 E8 63 
//00 42 CB 12 08 22 75 17 39 7B EC AA FD 
//00 42 CB 12 08 DC 47 C7 31 1A 18 DA C1 
//00 42 CB 12 08 82 A3 03 DE 9D 32 81 F6 
//00 42 CB 12 08 54 00 F6 80 D6 27 B0 AE 
//00 42 CB 12 08 82 2D 3C 3A C7 C5 76 6C 
//00 42 CB 12 08 97 06 5C 30 EB 98 80 53 
//00 42 CB 12 08 0B 09 B8 60 11 F8 02 E0 
//00 42 CB 12 08 61 83 12 8E 1A 43 EE D3 
//00 42 CB 12 08 68 32 B4 2F 65 74 99 B4 
//00 42 CB 12 08 25 0D ED B5 03 A3 4D 16 
//00 42 CB 12 08 72 66 BB D7 41 82 1F B1 
//00 42 CB 12 08 35 F0 90 47 0E 85 7C 40 
//00 42 CB 12 08 19 64 F3 A0 D5 F3 BA E3 
//00 42 CB 12 08 C9 C5 09 43 27 D9 64 36 
//00 42 CB 12 08 74 29 B1 F0 28 B1 00 28 
//00 42 CB 12 08 B1 88 36 6A 1F 82 D3 61 
//00 42 CB 12 08 F4 86 CB 1D 2D DD 3C 52 
//00 42 CB 12 08 E1 03 7C D9 C0 0A 34 F5 
//00 42 CB 12 08 F7 B2 C7 7B D9 E3 E5 A6 
//00 42 CB 12 08 02 67 17 E8 62 36 1F 4D 
//00 42 CB 12 08 97 E5 DC 90 4F 8E F5 2E 
//00 42 CB 12 08 93 25 1F DE 90 4F A1 FF 
//00 42 CB 12 08 EE C0 FA 04 CE 8F 71 36 
//00 42 CB 12 08 45 7F 85 48 66 15 E5 3B 
//00 42 CB 12 08 F1 15 8B B6 C2 2B C5 33 
//00 42 CB 12 08 1A 5F F7 4A 6C 09 DB D6 
//00 42 CB 12 08 FE 27 C7 3A 7E 4B 9D EE 
//00 42 CB 12 08 2A F8 8C BF 5A B4 56 EE 
//00 42 CB 12 08 65 04 16 C6 F3 D0 B9 85 
//00 42 CB 12 08 D5 FA 34 E7 16 4C 5A 06 
//00 42 CB 12 08 04 C7 BB AD 18 70 FA 74 
//00 42 CB 12 08 BD 62 EB 43 A7 70 42 B1 
//00 42 CB 12 08 F7 A2 E9 DF 41 DD 65 D1 
//00 42 CB 12 08 BA 04 7F E3 9F 0C 79 4D 
//00 42 CB 12 08 69 D8 7F 0C EA 6E 5C 00
///
//TX: 0x00 0x40 0xcb 0x13 0x08 0x6c 0x6f 0x6b 0x73 0x00 0x00 0x00 0x00
//RX: 0x00 0x41 0xcb 0x12 0x08 0x6c 0x6f 0x6b 0x73 0x00 0x00 0x00 0x00 Response count 1
//#RX: 0x00 0x42 0xcb 0x12 0x06 0x00 0x00 0x08 0x87 0x64 0x33 0x00 0x00  274 rows - 1 = 273 * 8 = 2183 -1 = 2183 0x0887 = 2183
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x00 0x00 0x46 0x71 0x78 0x9c 0xed 0x5c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x5b 0x4f 0xdb 0x48 0x14 0x7e 0xf7 0xaf
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x98 0x3f 0x10 0x34 0x77 0xdb 0x0f 0x79
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x28 0x85 0x6d 0xab 0x56 0xb4 0x82 0x15
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd2 0x6a 0xb5 0xaa 0x1c 0xdb 0x81 0x88
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x24 0x8e 0x92 0x40 0xd9 0x7f 0xbf 0xe3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x89 0x33 0x97 0xe4 0x8c 0x9d 0x10 0x28
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb0 0xa0 0xaa 0xc2 0x1e 0x1f 0x8f 0x67
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xce 0x7c 0xe7 0x3b 0x97 0x19 0xf8 0x7b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x5c 0xdd 0x54 0x93 0x6a 0x39 0xba 0x2b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xff 0x89 0xee 0xca 0xf9 0x62 0x54 0x4d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x23 0x74 0x34 0x19 0x4d 0xab 0x79 0x9f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x47 0x8b 0x72 0xd1 0xb4 0x8c 0x8a 0x3e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8d 0xac 0xb0 0x6a 0x99 0x66 0x93 0xb2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7f 0x49 0x31 0x56 0xd7 0xf3 0x51 0x7e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xbd 0xbc 0x9d 0x5e 0xf5 0x89 0xba 0xb9
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x55 0xb2 0xf8 0xbe 0xbe 0x5a 0xfe 0x3b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xeb 0x4f 0x26 0xf4 0xe7 0x6c 0x7e 0x55
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x77 0x91 0x57 0xd3 0xfe 0xf1 0x39 0xa2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xac 0x7e 0x65 0xf1 0xef 0x64 0x50 0x8d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf5 0x0b 0xd9 0x5d 0xbf 0x6e 0x19 0xac
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7e 0xdc 0x55 0xe3 0x5b 0xd5 0x33 0x15
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xea 0x7a 0x36 0xaf 0xae 0x26 0xd9 0xe2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x46 0xf5 0x57 0xdf 0x2e 0xb3 0xfc 0xba
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9a 0x64 0xf7 0x2b 0xb9 0xfa 0x42 0xc4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfa 0x6a 0x34 0xed 0x33 0x75 0x31 0xbc
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9d 0xde 0x2c 0xd5 0x78 0xcb 0x7a 0xc4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x47 0xd3 0xb9 0x96 0xd3 0xa3 0x20 0xd0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x53 0xb0 0x91 0x42 0x8d 0x6c 0xdd 0x4f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x02 0x3d 0xe5 0xe6 0x2b 0xe0 0x63 0x01
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x35 0x4a 0xa8 0xb1 0x9e 0xcc 0xd1 0xaf
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x72 0xbe 0xd4 0x43 0x5b 0x69 0xed 0x28
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2b 0xe6 0x6a 0x15 0x4a 0xdd 0xb4 0x52
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7a 0x56 0xd4 0x4d 0x6d 0xb2 0xb1 0x91
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfd 0x58 0x4d 0x87 0xa3 0x2b 0x2b 0xcb
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb7 0x85 0x25 0x35 0xd2 0x9f 0xcb 0xf1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x0c 0x9d 0x9f 0x7e 0x32 0xf2 0x02 0x6f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xcb 0x73 0x6e 0xe4 0x2f 0xb3 0x3c 0xb7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7d 0x0b 0x40 0x56 0x58 0xd9 0xa2 0xb4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb2 0x90 0xa8 0xb4 0xa2 0x6a 0x69 0x6d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb7 0xc0 0x10 0x28 0x33 0xb2 0x5f 0x67
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x6d 0x9d 0x52 0x3b 0xd6 0xaf 0x23 0x23
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x28 0x53 0x40 0xd2 0x8e 0xf4 0x6b 0xd1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3a 0x7f 0x89 0x8d 0xe4 0xf7 0xd9 0x12
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7d 0xfb 0xfe 0xe1 0xc4 0xc8 0x03 0x1d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdb 0xa1 0x9e 0x97 0x8b 0x72 0xe9 0x2c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdb 0xb6 0x39 0x1d 0x9f 0x27 0xa4 0x87
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x31 0x35 0x56 0x54 0x5f 0xad 0x3b 0x5a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdd 0xf9 0x36 0xb5 0x30 0x52 0x6b 0xeb
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4a 0x88 0x35 0x2e 0xfa 0x20 0xe3 0xd2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3d 0x68 0xeb 0xe2 0xf8 0xf7 0x5b 0x97
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc5 0x74 0x87 0x9d 0xb5 0x08 0xee 0x67
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x71 0x1d 0x76 0x66 0x0d 0x8d 0x02 0xa8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x49 0x37 0x2c 0x0d 0x15 0xd9 0x32 0x23
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe6 0x15 0x0d 0xea 0x20 0x20 0x3e 0xde
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa1 0x33 0xf5 0xd3 0x48 0x33 0xc0 0x2a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x82 0xc2 0x80 0x25 0x8b 0xa0 0x30 0x60
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1a 0x32 0x28 0x2c 0x41 0x64 0x22 0xcc
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x10 0xc1 0xb4 0x56 0x02 0x40 0xf7 0xcc
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x03 0x2a 0x73 0x80 0x5a 0x8c 0xc6 0x89
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x83 0x4f 0x4c 0x10 0x61 0x0c 0x9d 0x1c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb7 0xc1 0xd4 0x23 0xfa 0x07 0xe0 0x4e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3f 0x8d 0x43 0x00 0xd4 0x4f 0x83 0x48
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7c 0x5a 0x7a 0xdf 0x6a 0x04 0xfb 0x4c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc1 0x89 0x81 0xca 0x20 0xb0 0x12 0xc0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe9 0x11 0x70 0x7e 0xda 0x27 0x6c 0xb7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x0a 0x00 0x05 0x67 0x17 0x48 0x0a 0x87
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9e 0x12 0x6f 0xd5 0x93 0xc0 0xaa 0x9f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7c 0xfe 0x84 0x62 0xdc 0xea 0xf4 0xf7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x58 0xf0 0x16 0xbb 0x37 0x4b 0x2f 0x3a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x04 0x0d 0x0a 0x44 0x3b 0x21 0x89 0x76
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x40 0x08 0xfe 0x98 0x3c 0xf4 0xea 0xa1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x41 0x28 0x16 0x30 0x3b 0x0c 0x3c 0x9c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x0c 0x22 0xd8 0x8d 0x31 0xe3 0xc7 0x2e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xca 0xf9 0xa8 0x54 0xfd 0xd1 0x86 0x1a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x58 0xd4 0xe5 0xc1 0x88 0x0b 0x22 0xc2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8d 0x0b 0x93 0x9e 0x0b 0x9b 0x0c 0xef
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xeb 0x0f 0x73 0x50 0xdd 0xaf 0x2e 0x58
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdc 0x5e 0x84 0x53 0x35 0x73 0xc5 0xb0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x02 0xe1 0xc4 0xe8 0x3e 0xf7 0x74 0x9f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x07 0x74 0x4f 0xf1 0x5a 0xf7 0xa7 0x8a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe5 0x7f 0x92 0x87 0x85 0x0e 0x8e 0xe2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x39 0xa4 0x78 0x01 0xce 0x64 0x1f 0xf3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xde 0x7d 0x09 0x9e 0x96 0xc7 0x83 0x41
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc3 0xa6 0x33 0x25 0x50 0xd4 0x10 0x94
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x06 0x84 0x5f 0x65 0xb8 0x70 0xc9 0xa4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x01 0x60 0xe9 0x01 0xb0 0xdc 0x02 0xa0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x46 0xdd 0x25 0x62 0x12 0x2d 0x7e 0x45
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfb 0x27 0x86 0x9e 0xe5 0x9b 0xc4 0x50
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1e 0x1a 0xba 0x76 0x78 0x8f 0x97 0x64
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf5 0x97 0x88 0x48 0x8c 0xb0 0x8e 0x45
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9b 0xe4 0x1b 0x7b 0x3a 0xd7 0xb7 0x1b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9e 0x79 0x65 0xf6 0x71 0x3e 0x1c 0xd8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x25 0x20 0x72 0x77 0x27 0xdd 0x58 0x34
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x15 0xa0 0x8b 0xd8 0xcb 0x63 0xef 0xe0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa7 0x09 0x03 0xf5 0xc6 0x3a 0x9e 0xbf
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x87 0x6e 0x9e 0x7f 0x4e 0x84 0xb0 0x10
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x21 0x3e 0x44 0xdc 0x7a 0x4d 0x10 0x22
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x24 0xa1 0x09 0xfa 0x30 0x2b 0xc7 0x45
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x55 0xcd 0xa7 0x61 0x80 0xac 0xfc 0xc0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3b 0x44 0x9e 0x12 0x22 0x6d 0x2a 0x3b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x14 0x2c 0x2a 0x4f 0x23 0x2a 0x51 0xc3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x98 0xf5 0x02 0xf9 0x1e 0x89 0x7d 0xf8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc4 0x21 0xf8 0x10 0xe9 0x66 0x7f 0xaa
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd7 0x30 0x6a 0x28 0x76 0x50 0x43 0x92
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x6e 0xe2 0x7e 0x48 0xac 0xa0 0x5f 0x06
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x35 0x61 0x91 0x82 0xc1 0x55 0x7f 0xb5
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x48 0x79 0x7c 0x7c 0x9c 0x9e 0x23 0x8a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd1 0xe7 0x72 0x9e 0xdf 0x8e 0xcb 0x05
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfa 0x51 0x8d 0x47 0x79 0x69 0xb1 0x91
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfa 0xd8 0x48 0x23 0xd0 0xe5 0x9f 0x5f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xab 0x4e 0x48 0xad 0xa1 0x97 0xe2 0xf2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc3 0xb9 0x41 0x47 0x9a 0xf8 0xc4 0x70
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x81 0xd9 0x3c 0xd6 0x31 0x7b 0x53 0x27
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x14 0x9e 0xca 0xf5 0x2d 0x94 0x8a 0xef
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x47 0xe0 0x4f 0x64 0x7d 0x6f 0x8d 0xa9
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9f 0xc0 0xfe 0x10 0x27 0x58 0xd7 0xb6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9b 0xe5 0xf7 0x2d 0x8e 0x6e 0x5b 0x5c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x43 0xc6 0x25 0x19 0x46 0x4e 0x9e 0xd7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x63 0x8f 0x69 0x72 0x6b 0xe6 0x3e 0x98
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb8 0x6d 0x0d 0xe7 0x49 0x2b 0x37 0x6f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1a 0x42 0x44 0x50 0x44 0x48 0xda 0xe3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe8 0xe4 0xf8 0xc3 0x27 0x83 0x24 0x8e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb1 0x4f 0x25 0x86 0x49 0x86 0xf7 0x06
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x46 0x62 0xb5 0xd8 0xab 0x37 0xe2 0x62
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x38 0x90 0x71 0x56 0x44 0x8e 0x97 0x17
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf4 0x48 0xf7 0xed 0xa1 0x8b 0xb9 0xe8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xda 0x28 0x1b 0x18 0x1c 0xd5 0xaf 0x2c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x66 0x13 0x3f 0xc5 0xa8 0x85 0x07 0xe3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2a 0xbf 0x59 0xf4 0x55 0x9e 0x83 0x88
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1a 0xb9 0xac 0x1d 0x50 0x2c 0x51 0x92
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa8 0x5b 0xae 0x66 0x22 0x91 0xea 0x45
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfd 0xe7 0x08 0xaf 0xff 0x3d 0x0a 0x0c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x41 0x8d 0xda 0x2a 0x32 0xb8 0x0c 0x4e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x24 0xf1 0x40 0x22 0x5b 0x75 0x0e 0xbe
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2d 0xcd 0xc8 0xc0 0x81 0xc7 0xed 0xdf
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4e 0xcc 0xdb 0x20 0xac 0x52 0xf3 0x76
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x18 0xb7 0xab 0xb1 0xc1 0x83 0x23 0x46
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x6f 0x04 0xb6 0x40 0x62 0xbd 0x40 0x38
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x74 0x6d 0xed 0xc0 0x6a 0x2f 0x60 0x19
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x30 0x61 0x92 0x44 0xaa 0x78 0x36 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x25 0xe8 0xec 0xc2 0x45 0xbb 0xf4 0xd0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2e 0x01 0xb4 0x4b 0x0f 0xed 0x6c 0x28
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x08 0x63 0xf1 0x1a 0xed 0xca 0x11 0x9f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xaa 0xae 0x3d 0xa0 0xf3 0x4d 0xa0 0x3b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3c 0xca 0x93 0x68 0x2b 0xe2 0xd5 0x54
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4a 0xf5 0x56 0xa9 0xb6 0x81 0xfa 0xa2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x09 0xb6 0x5b 0x4c 0x40 0xe1 0x5f 0x2a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe0 0x2b 0x1b 0x20 0xa9 0x44 0x4c 0xb5
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x30 0x8c 0x11 0x63 0xb2 0x81 0x3f 0x93
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8f 0x67 0x04 0x2a 0xd6 0x78 0xb5 0x66
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x00 0x07 0x13 0x3b 0xdb 0x41 0x0c 0x6b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x06 0x77 0x09 0x18 0xdd 0x85 0x2c 0xc5
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2a 0x0f 0x36 0x35 0xab 0x3d 0xf8 0x03
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x46 0x7d 0x0c 0x74 0x46 0xc4 0x77 0x66
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3f 0xe9 0xba 0x5d 0x06 0xda 0xe3 0x40
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x7b 0x12 0x68 0x4f 0xe1 0xf6 0x8d 0xd9
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xda 0x76 0x12 0x68 0xa7 0x81 0x76 0x16
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x68 0xe7 0x81 0xf6 0xc0 0x7c 0x69 0x60
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xbe 0x34 0x30 0x5f 0x1a 0x98 0x2f 0x0d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xcc 0x97 0x05 0xe6 0xcb 0xa0 0xfd 0x7d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x92 0x32 0x65 0xa5 0xbc 0x57 0xef 0x7f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x22 0xdf 0xeb 0xfa 0xf9 0xb4 0x49 0xa7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1d 0x1e 0x8a 0x37 0x78 0x88 0x91 0x82
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x9a 0xca 0x4c 0xed 0x75 0x53 0x3f 0x9a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x6b 0xf1 0xb7 0xd2 0x44 0x70 0x94 0xbc
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd3 0xce 0x0b 0xf4 0xbe 0x87 0xb3 0x0e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4c 0x2a 0xbb 0x7b 0x5f 0xf8 0x7d 0xa3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xbc 0x10 0xab 0x19 0xf5 0x6d 0xf2 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3b 0x01 0xbd 0x04 0x02 0x12 0x92 0xf4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb0 0x40 0xe7 0xe7 0x7f 0xb8 0xdc 0x13
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd8 0xc6 0x77 0xb8 0x27 0xd9 0xe0 0x1e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xce 0x06 0x98 0xaf 0xb9 0x87 0xa5 0x58
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x3a 0xa7 0x8e 0xc2 0x65 0x1c 0xea 0xd7
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x18 0xa8 0x61 0x21 0x22 0x3d 0x16 0x5a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x27 0x00 0x0d 0x1b 0x2d 0x66 0x59 0x9f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe9 0x53 0x67 0xc3 0x65 0x9d 0xdd 0x96
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x0f 0x65 0x28 0xd6 0x64 0x07 0x2b 0x8e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x62 0xf1 0xc1 0xbb 0x91 0xbb 0x9c 0x33
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x79 0xc1 0x1c 0x75 0x58 0x68 0xc4 0xc1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb7 0x9d 0x14 0x01 0xa6 0x10 0xcb 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x04 0x0e 0x5c 0x1c 0x8e 0x02 0x17 0xc8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8d 0x8c 0xe0 0x21 0xf0 0x2e 0x01 0xcb
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x52 0x24 0x60 0xfd 0xc4 0x28 0x91 0x04
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xec 0x8b 0x04 0xf5 0xe8 0x53 0x17 0xb0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x29 0xe8 0x73 0x18 0xc8 0xa7 0x3e 0x9d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x35 0x48 0x0a 0x31 0x89 0xe3 0x30 0xdb
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x48 0x0e 0xa8 0x55 0xfa 0x6c 0xd7 0xd1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x87 0x51 0x2b 0x0f 0x75 0x22 0x3a 0x25
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8c 0x5a 0x83 0x34 0xf7 0x1c 0xb4 0xa8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa2 0x27 0xce 0x7b 0x32 0x0d 0x9c 0x65
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x56 0x14 0xe9 0x17 0xd8 0x4c 0x7d 0xcd
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa1 0xc8 0x74 0x83 0x22 0x09 0x49 0x07
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe6 0x50 0x85 0xfe 0x40 0xb4 0xcb 0xc1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4c 0xff 0x28 0xa6 0x65 0xc8 0xc4 0x94
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x48 0x5e 0x5e 0x9c 0x76 0x18 0x03 0x82
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2c 0xb3 0x2b 0x03 0x12 0x38 0x90 0x31
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x30 0x03 0xdf 0x76 0x2c 0xb7 0x95 0x00
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x41 0x02 0xb3 0x26 0x0b 0x47 0x40 0xd6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x5e 0x61 0xf6 0xb2 0xc6 0xca 0x3b 0x12
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc3 0x50 0x05 0xc4 0xa8 0x8e 0xc1 0x5f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd8 0x25 0x33 0x6c 0xa6 0x1f 0x30 0x9e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf7 0x18 0xed 0x19 0xc9 0x88 0x70 0x89
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x44 0x2c 0x7a 0x12 0x7d 0xf9 0xb8 0x3a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x27 0x6b 0x58 0x28 0xf3 0x58 0x28 0x03
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x58 0x28 0xdb 0x60 0xa1 0xb4 0x14 0xba
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x90 0x6e 0x92 0x44 0xee 0xd7 0xaa 0xb6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb8 0xc7 0xad 0x55 0x45 0x70 0xce 0x48
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x84 0x57 0xf6 0x07 0xa2 0xb5 0xc6 0x55
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2d 0x6d 0xad 0xb8 0xad 0x90 0xab 0x68
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x4a 0x51 0x13 0xd1 0x35 0x5d 0xae 0xe9
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8a 0xd2 0x04 0xd1 0x86 0xaa 0xa8 0xa0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x8f 0x98 0x50 0x82 0x16 0xf5 0x2a 0x82
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb5 0x83 0x12 0x4a 0x70 0x67 0xc3 0x49
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x27 0xbb 0xb2 0x49 0x38 0x8c 0xb2 0x4c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x05 0xeb 0xd5 0x89 0xd4 0x02 0x02 0x36
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa4 0x80 0x9f 0xef 0x17 0xa8 0x05 0xd8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc3 0x46 0x6a 0xc1 0x10 0xca 0x46 0x6a
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x21 0x13 0xde 0x2b 0x54 0xdb 0x8c 0x5c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xa1 0x50 0x4d 0x84 0xb8 0xeb 0x2d 0x71
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdd 0xc9 0xb1 0x8a 0x52 0x94 0x75 0x93
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb8 0x67 0x4f 0xaf 0x29 0xa2 0x0b 0x1c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x18 0x76 0x88 0x6e 0xe0 0x11 0x5d 0x3e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2c 0xf2 0x38 0x37 0x55 0xf9 0x6f 0x5f
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xce 0xfe 0x8c 0xba 0x13 0x52 0x82 0xfd
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x84 0xd4 0xd0 0x5a 0xd2 0x4d 0x5a 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xee 0xd3 0xc6 0xbe 0xd3 0xe1 0x64 0xf5
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x70 0x86 0x7a 0xf0 0xd6 0x79 0xcb 0x88
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfe 0xa7 0x3b 0xa0 0x9f 0xab 0x69 0x51
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xde 0x54 0x33 0x64 0xf7 0xd1 0x15 0xf2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x02 0xc7 0xa5 0x1d 0xe4 0xe5 0x2e 0xf2
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x86 0xe9 0x30 0x49 0x70 0xc9 0xd6 0xc8
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1b 0x8e 0xcb 0xd1 0x22 0xbf 0x9e 0x64
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd3 0x69 0x8f 0x73 0x5d 0xbf 0x6c 0x50
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd8 0xb2 0xd5 0xbe 0x79 0xa4 0xda 0x73
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xbc 0xb6 0x54 0xcb 0x3c 0xb7 0xdb 0x9d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x02 0xac 0x7c 0x6b 0x8d 0xd1 0xda 0xbd
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd6 0xfb 0xbd 0xbc 0xce 0x08 0xe8 0x63
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x22 0x75 0x17 0x39 0x7b 0xec 0xaa 0xfd
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xdc 0x47 0xc7 0x31 0x1a 0x18 0xda 0xc1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x82 0xa3 0x03 0xde 0x9d 0x32 0x81 0xf6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x54 0x00 0xf6 0x80 0xd6 0x27 0xb0 0xae
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x82 0x2d 0x3c 0x3a 0xc7 0xc5 0x76 0x6c
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x97 0x06 0x5c 0x30 0xeb 0x98 0x80 0x53
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x0b 0x09 0xb8 0x60 0x11 0xf8 0x02 0xe0
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x61 0x83 0x12 0x8e 0x1a 0x43 0xee 0xd3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x68 0x32 0xb4 0x2f 0x65 0x74 0x99 0xb4
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x25 0x0d 0xed 0xb5 0x03 0xa3 0x4d 0x16
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x72 0x66 0xbb 0xd7 0x41 0x82 0x1f 0xb1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x35 0xf0 0x90 0x47 0x0e 0x85 0x7c 0x40
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x19 0x64 0xf3 0xa0 0xd5 0xf3 0xba 0xe3
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xc9 0xc5 0x09 0x43 0x27 0xd9 0x64 0x36
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x74 0x29 0xb1 0xf0 0x28 0xb1 0x00 0x28
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xb1 0x88 0x36 0x6a 0x1f 0x82 0xd3 0x61
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf4 0x86 0xcb 0x1d 0x2d 0xdd 0x3c 0x52
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xe1 0x03 0x7c 0xd9 0xc0 0x0a 0x34 0xf5
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf7 0xb2 0xc7 0x7b 0xd9 0xe3 0xe5 0xa6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x02 0x67 0x17 0xe8 0x62 0x36 0x1f 0x4d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x97 0xe5 0xdc 0x90 0x4f 0x8e 0xf5 0x2e
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x93 0x25 0x1f 0xde 0x90 0x4f 0xa1 0xff
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xee 0xc0 0xfa 0x04 0xce 0x8f 0x71 0x36
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x45 0x7f 0x85 0x48 0x66 0x15 0xe5 0x3b
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf1 0x15 0x8b 0xb6 0xc2 0x2b 0xc5 0x33
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x1a 0x5f 0xf7 0x4a 0x6c 0x09 0xdb 0xd6
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xfe 0x27 0xc7 0x3a 0x7e 0x4b 0x9d 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x2a 0xf8 0x8c 0xbf 0x5a 0xb4 0x56 0xee
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x65 0x04 0x16 0xc6 0xf3 0xd0 0xb9 0x85
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xd5 0xfa 0x34 0xe7 0x16 0x4c 0x5a 0x06
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x04 0xc7 0xbb 0xad 0x18 0x70 0xfa 0x74
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xbd 0x62 0xeb 0x43 0xa7 0x70 0x42 0xb1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xf7 0xa2 0xe9 0xdf 0x41 0xdd 0x65 0xd1
//#RX: 0x00 0x42 0xcb 0x12 0x08 0xba 0x04 0x7f 0xe3 0x9f 0x0c 0x79 0x4d
//#RX: 0x00 0x42 0xcb 0x12 0x08 0x69 0xd8 0x7f 0x0c 0xea 0x6e 0x5c 0x00
