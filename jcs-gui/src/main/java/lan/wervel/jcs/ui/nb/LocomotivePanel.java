/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lan.wervel.jcs.ui.nb;

import eu.hansolo.steelseries.gauges.Radial;
import eu.hansolo.steelseries.tools.BackgroundColor;
import eu.hansolo.steelseries.tools.KnobStyle;
import eu.hansolo.steelseries.tools.PointerType;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import java.util.prefs.Preferences;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import lan.wervel.jcs.common.TrackRepository;
import lan.wervel.jcs.repository.model.Locomotive;
import lan.wervel.jcs.repository.model.Locomotive.Direction;
import lan.wervel.jcs.ui.Refreshable;
import org.pmw.tinylog.Logger;

/**
 *
 * @author frans
 */
public class LocomotivePanel extends javax.swing.JPanel implements Refreshable {
  
  private static final long serialVersionUID = -515686099850578312L;
  
  private TrackRepository repository;
  
  private ComboBoxModel<Locomotive> locoComboBoxModel;
  private final Preferences prefs;
  
  private Locomotive selectedLoco;
  private String panelName;
  private String title;
  private Timer timer;
  private int speed;
  
  private static final ImageIcon PLAY_LEFT = new ImageIcon(LocomotivePanel.class.getResource("/media/play-left-20px.png"));
  private static final ImageIcon PLAY_RIGHT = new ImageIcon(LocomotivePanel.class.getResource("/media/play-right-20px.png"));
  
  private static final ImageIcon PLAY_LEFT_BLUE = new ImageIcon(LocomotivePanel.class.getResource("/media/play-left-blue-20px.png"));
  private static final ImageIcon PLAY_RIGHT_BLUE = new ImageIcon(LocomotivePanel.class.getResource("/media/play-right-blue-20px.png"));

  /**
   * Creates new form LocomotivePanel
   */
  public LocomotivePanel() {
    this("Loco ?", null);
  }
  
  public LocomotivePanel(String name, TrackRepository repository) {
    this.panelName = name;
    this.title = name;
    
    this.repository = repository;
    this.prefs = Preferences.userRoot().node(this.getClass().getName());
    
    buildComboBoxModel();
    initComponents();
    
    postInit();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
   * method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    northPanel = new JPanel();
    locoComboBox = new JComboBox<>();
    comboBtnSep = new JSeparator();
    f0Btn = new JToggleButton();
    centerPanel = new JPanel();
    speedRadial = new Radial();
    throttleSlider = new JSlider();
    bottomPanel = new JPanel();
    functionBtnPanel = new JPanel();
    f1Btn = new JToggleButton();
    f2Btn = new JToggleButton();
    f3Btn = new JToggleButton();
    f4Btn = new JToggleButton();
    directionPanel = new JPanel();
    bckBtn = new JButton();
    stopBtn = new JButton();
    fwdBtn = new JButton();

    setBorder(BorderFactory.createTitledBorder(new LineBorder(new Color(0, 0, 0), 1, true), "Loco ?"));
    setMinimumSize(new Dimension(315, 385));
    setName("Form"); // NOI18N
    setPreferredSize(new Dimension(320, 385));
    setLayout(new BorderLayout());

    northPanel.setName("northPanel"); // NOI18N
    northPanel.setPreferredSize(new Dimension(385, 45));
    northPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));

    locoComboBox.setModel(locoComboBoxModel);
    locoComboBox.setMaximumSize(new Dimension(160, 35));
    locoComboBox.setMinimumSize(new Dimension(160, 35));
    locoComboBox.setName("locoComboBox"); // NOI18N
    locoComboBox.setPreferredSize(new Dimension(160, 35));
    locoComboBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        locoComboBoxActionPerformed(evt);
      }
    });
    northPanel.add(locoComboBox);

    comboBtnSep.setOrientation(SwingConstants.VERTICAL);
    comboBtnSep.setName("comboBtnSep"); // NOI18N
    northPanel.add(comboBtnSep);

    f0Btn.setIcon(new ImageIcon(getClass().getResource("/media/bulb-off-20px.png"))); // NOI18N
    f0Btn.setText("F0");
    f0Btn.setMargin(new Insets(2, 5, 2, 5));
    f0Btn.setMaximumSize(new Dimension(55, 29));
    f0Btn.setMinimumSize(new Dimension(55, 29));
    f0Btn.setName("f0Btn"); // NOI18N
    f0Btn.setPreferredSize(new Dimension(60, 35));
    f0Btn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/bulb-on-20px.png"))); // NOI18N
    f0Btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        f0BtnActionPerformed(evt);
      }
    });
    northPanel.add(f0Btn);

    add(northPanel, BorderLayout.NORTH);

    centerPanel.setMinimumSize(new Dimension(235, 180));
    centerPanel.setName("centerPanel"); // NOI18N
    centerPanel.setPreferredSize(new Dimension(385, 180));
    centerPanel.setLayout(new GridBagLayout());

    speedRadial.setBackgroundColor(BackgroundColor.TRANSPARENT);
    speedRadial.setDoubleBuffered(true);
    speedRadial.setKnobStyle(KnobStyle.BLACK);
    speedRadial.setLcdVisible(false);
    speedRadial.setLedVisible(false);
    speedRadial.setMaxValue(250.0);
    speedRadial.setMaximumSize(new Dimension(175, 175));
    speedRadial.setMinimumSize(new Dimension(175, 175));
    speedRadial.setName("speedRadial"); // NOI18N
    speedRadial.setPointerType(PointerType.TYPE3);
    speedRadial.setUnitString("Km/H");
    centerPanel.add(speedRadial, new GridBagConstraints());

    throttleSlider.setMajorTickSpacing(50);
    throttleSlider.setMaximum(250);
    throttleSlider.setOrientation(JSlider.VERTICAL);
    throttleSlider.setPaintLabels(true);
    throttleSlider.setPaintTicks(true);
    throttleSlider.setValue(0);
    throttleSlider.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    throttleSlider.setMaximumSize(new Dimension(60, 200));
    throttleSlider.setMinimumSize(new Dimension(60, 200));
    throttleSlider.setName("throttleSlider"); // NOI18N
    throttleSlider.setPreferredSize(new Dimension(50, 200));
    throttleSlider.setRequestFocusEnabled(false);
    throttleSlider.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent evt) {
        throttleSliderStateChanged(evt);
      }
    });
    centerPanel.add(throttleSlider, new GridBagConstraints());

    add(centerPanel, BorderLayout.CENTER);

    bottomPanel.setMinimumSize(new Dimension(220, 80));
    bottomPanel.setName("bottomPanel"); // NOI18N
    bottomPanel.setPreferredSize(new Dimension(240, 80));
    bottomPanel.setLayout(new GridLayout(2, 1));

    functionBtnPanel.setName("functionBtnPanel"); // NOI18N
    functionBtnPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));

    f1Btn.setIcon(new ImageIcon(getClass().getResource("/media/Button-Grey-20px.png"))); // NOI18N
    f1Btn.setText("F1");
    f1Btn.setMargin(new Insets(2, 5, 2, 5));
    f1Btn.setMaximumSize(new Dimension(55, 29));
    f1Btn.setMinimumSize(new Dimension(55, 29));
    f1Btn.setName("f1Btn"); // NOI18N
    f1Btn.setPreferredSize(new Dimension(60, 35));
    f1Btn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/Button-Yellow-20px.png"))); // NOI18N
    f1Btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        f1BtnActionPerformed(evt);
      }
    });
    functionBtnPanel.add(f1Btn);

    f2Btn.setIcon(new ImageIcon(getClass().getResource("/media/Button-Grey-20px.png"))); // NOI18N
    f2Btn.setText("F2");
    f2Btn.setMargin(new Insets(2, 5, 2, 5));
    f2Btn.setMaximumSize(new Dimension(55, 29));
    f2Btn.setMinimumSize(new Dimension(55, 29));
    f2Btn.setName("f2Btn"); // NOI18N
    f2Btn.setPreferredSize(new Dimension(60, 35));
    f2Btn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/Button-Yellow-20px.png"))); // NOI18N
    f2Btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        f2BtnActionPerformed(evt);
      }
    });
    functionBtnPanel.add(f2Btn);

    f3Btn.setIcon(new ImageIcon(getClass().getResource("/media/Button-Grey-20px.png"))); // NOI18N
    f3Btn.setText("F3");
    f3Btn.setMargin(new Insets(2, 5, 2, 5));
    f3Btn.setMaximumSize(new Dimension(55, 29));
    f3Btn.setMinimumSize(new Dimension(55, 29));
    f3Btn.setName("f3Btn"); // NOI18N
    f3Btn.setPreferredSize(new Dimension(60, 35));
    f3Btn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/Button-Yellow-20px.png"))); // NOI18N
    f3Btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        f3BtnActionPerformed(evt);
      }
    });
    functionBtnPanel.add(f3Btn);

    f4Btn.setIcon(new ImageIcon(getClass().getResource("/media/Button-Grey-20px.png"))); // NOI18N
    f4Btn.setText("F4");
    f4Btn.setMargin(new Insets(2, 5, 2, 5));
    f4Btn.setMaximumSize(new Dimension(55, 29));
    f4Btn.setMinimumSize(new Dimension(55, 29));
    f4Btn.setName("f4Btn"); // NOI18N
    f4Btn.setPreferredSize(new Dimension(60, 35));
    f4Btn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/Button-Yellow-20px.png"))); // NOI18N
    f4Btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        f4BtnActionPerformed(evt);
      }
    });
    functionBtnPanel.add(f4Btn);

    bottomPanel.add(functionBtnPanel);

    directionPanel.setName("directionPanel"); // NOI18N
    directionPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));

    bckBtn.setIcon(new ImageIcon(getClass().getResource("/media/play-left-20px.png"))); // NOI18N
    bckBtn.setHorizontalTextPosition(SwingConstants.LEADING);
    bckBtn.setName("bckBtn"); // NOI18N
    bckBtn.setPreferredSize(new Dimension(35, 35));
    bckBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        bckBtnActionPerformed(evt);
      }
    });
    directionPanel.add(bckBtn);

    stopBtn.setIcon(new ImageIcon(getClass().getResource("/media/stop-20px.png"))); // NOI18N
    stopBtn.setName("stopBtn"); // NOI18N
    stopBtn.setPreferredSize(new Dimension(35, 35));
    stopBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        stopBtnActionPerformed(evt);
      }
    });
    directionPanel.add(stopBtn);

    fwdBtn.setIcon(new ImageIcon(getClass().getResource("/media/play-right-20px.png"))); // NOI18N
    fwdBtn.setName("fwdBtn"); // NOI18N
    fwdBtn.setPreferredSize(new Dimension(35, 35));
    fwdBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        fwdBtnActionPerformed(evt);
      }
    });
    directionPanel.add(fwdBtn);

    bottomPanel.add(directionPanel);

    add(bottomPanel, BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private void f1BtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_f1BtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setF1(this.f1Btn.isSelected());
      Logger.debug("Loco: " + selectedLoco + " F1 " + (selectedLoco.isF1() ? "ON" : "OFF"));
    }
  }//GEN-LAST:event_f1BtnActionPerformed

  private void f2BtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_f2BtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setF2(this.f2Btn.isSelected());
      Logger.debug("Loco: " + selectedLoco + " F2 " + (selectedLoco.isF2() ? "ON" : "OFF"));
    }
  }//GEN-LAST:event_f2BtnActionPerformed

  private void f3BtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_f3BtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setF3(this.f3Btn.isSelected());
      Logger.debug("Loco: " + selectedLoco + " F3 " + (selectedLoco.isF3() ? "ON" : "OFF"));
    }
  }//GEN-LAST:event_f3BtnActionPerformed

  private void f4BtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_f4BtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setF4(this.f4Btn.isSelected());
      Logger.debug("Loco: " + selectedLoco + " F4 " + (selectedLoco.isF4() ? "ON" : "OFF"));
    }
  }//GEN-LAST:event_f4BtnActionPerformed

  private void f0BtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_f0BtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setF0(this.f0Btn.isSelected());
      Logger.debug("Loco: " + selectedLoco + " F0 " + (selectedLoco.isF0() ? "ON" : "OFF"));
    }
  }//GEN-LAST:event_f0BtnActionPerformed

  private void bckBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bckBtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setDirection(Direction.Backwards);
      this.throttleSlider.setValue(0);
      this.speed = 0;
      this.updateDirectionButtons();
    }
  }//GEN-LAST:event_bckBtnActionPerformed

  private void stopBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.stop();
      this.throttleSlider.setValue(selectedLoco.getSpeed());
      this.updateDirectionButtons();
    }
  }//GEN-LAST:event_stopBtnActionPerformed

  private void fwdBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_fwdBtnActionPerformed
    if (this.selectedLoco != null) {
      this.selectedLoco.setDirection(Direction.Forwards);
      this.throttleSlider.setValue(0);
      this.speed = 0;
      this.updateDirectionButtons();
    }
  }//GEN-LAST:event_fwdBtnActionPerformed

  private void throttleSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_throttleSliderStateChanged
    JSlider slider = (JSlider) evt.getSource();
    //When slider is instable do nothing...
    if (slider.getValueIsAdjusting()) {
      return;
    }
    
    int throttle = throttleSlider.getValue();
    
    if (this.selectedLoco != null && this.selectedLoco.toString() != null) {
      //Set the throttle, for future use       
      this.selectedLoco.setThrottle(throttle);
      
      int steps = selectedLoco.getSpeedSteps();
      int max = slider.getMaximum();
      int newSpeed = throttle / (max / steps);

      //Filter whole steps to avoid command over flood
      if (this.speed != newSpeed) {
        this.speed = newSpeed;
        Logger.debug("Throtle: " + throttle + " Speed: " + speed + "...");
        this.selectedLoco.setSpeed(speed);
        this.speedRadial.setValueAnimated((250 * speed / steps));
      }
    }
  }//GEN-LAST:event_throttleSliderStateChanged

  private void locoComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_locoComboBoxActionPerformed
    
    this.selectedLoco = (Locomotive) this.locoComboBoxModel.getSelectedItem();
    
    if (this.selectedLoco != null && this.selectedLoco.toString() != null) {
      this.selectedLoco.setSelected(true);
      this.title = selectedLoco.getName();
      ((TitledBorder) this.getBorder()).setTitle(this.title);
      
      updateDirectionButtons();
      
      boolean specialFunctions = this.selectedLoco.isSpecialFuctions();
      
      this.f1Btn.setEnabled(specialFunctions);
      this.f2Btn.setEnabled(specialFunctions);
      this.f3Btn.setEnabled(specialFunctions);
      this.f4Btn.setEnabled(specialFunctions);

      // Store as Last used train in preferences
      this.prefs.put(this.panelName + "_LAST_USED", selectedLoco.getAddress().toString());
    } else {
      this.title = "Loco ?";
      ((TitledBorder) this.getBorder()).setTitle(this.title);
      this.prefs.put(this.panelName + "_LAST_USED", "");
    }
    this.repaint();
  }//GEN-LAST:event_locoComboBoxActionPerformed
  
  private void buildComboBoxModel() {
    if (this.repository != null) {
      Logger.debug("Setup the combobox model...");
      Map<Integer, Locomotive> tm = this.repository.getLocomotives();
      Locomotive[] locs = new Locomotive[tm.size()];
      tm.values().toArray(locs);
      
      Logger.debug("Locs: " + locs.length + " repo: " + tm.size());
      
      locoComboBoxModel = new DefaultComboBoxModel<>(locs);
      
      selectedLoco = getLastUsedTrain();
      
      if (selectedLoco != null) {
        this.selectedLoco.setSelected(true);
        locoComboBoxModel.setSelectedItem(this.selectedLoco);
        this.title = selectedLoco.getName();
        
        Logger.info("Last used Train: " + selectedLoco + "...");
      } else {
        this.title = "Loco [?]";
      }
    } else {
      this.title = "Loco ?";
      locoComboBoxModel = new DefaultComboBoxModel<>();
    }
  }
  
  private Locomotive getLastUsedTrain() {
    Integer addr = prefs.getInt(this.panelName + "_LAST_USED", -1);
    if (this.repository != null) {
      return this.repository.getLocomotive(addr);
    } else {
      return null;
    }
  }
  
  private void updateDirectionButtons() {
    if (this.selectedLoco == null) {
      return;
    }
    Direction dir = selectedLoco.getDirection();
    
    if (dir == null) {
      dir = selectedLoco.getDefaultDirection();
    }
    
    if (Direction.Forwards.equals(dir)) {
      this.bckBtn.setIcon(PLAY_LEFT);
      this.fwdBtn.setIcon(PLAY_RIGHT_BLUE);
    } else {
      this.bckBtn.setIcon(PLAY_LEFT_BLUE);
      this.fwdBtn.setIcon(PLAY_RIGHT);
    }
  }
  
  @Override
  public void refresh() {
    try {
      if (this.repository == null) {
        return;
      }

      // Refresh can be called before the init is completed hence the check on the rightButton...
      if (this.selectedLoco != null && f4Btn != null) {
        Locomotive updLoco = repository.getLocomotive(selectedLoco.getAddress());
        
        if (!this.selectedLoco.equals(updLoco)) {
          this.f0Btn.setSelected(updLoco.isF0());
          this.f1Btn.setSelected(updLoco.isF1());
          this.f2Btn.setSelected(updLoco.isF2());
          this.f3Btn.setSelected(updLoco.isF3());
          this.f4Btn.setSelected(updLoco.isF4());
          
          selectedLoco = updLoco;
          
          int steps = this.selectedLoco.getSpeedSteps();
          
          updateDirectionButtons();
          
          int throttle = throttleSlider.getMaximum() / steps * updLoco.getSpeed();
          throttleSlider.setValue(throttle);
        }
      }
    } catch (Exception e) {
      Logger.trace(e);
    }
  }
  
  private void postInit() {
    ((TitledBorder) this.getBorder()).setTitle(this.title);
    
    if (selectedLoco != null) {
      boolean specialFunctions = selectedLoco.isSpecialFuctions();
      this.f1Btn.setEnabled(specialFunctions);
      this.f2Btn.setEnabled(specialFunctions);
      this.f3Btn.setEnabled(specialFunctions);
      this.f4Btn.setEnabled(specialFunctions);
      updateDirectionButtons();
    }
    
    startRefreshCycle();
    this.repaint();
  }
  
  public final void startRefreshCycle() {
    Logger.debug(this.getName() + " Starting refresh cycle...");
    timer = new Timer(500, (ActionEvent e) -> {
      refresh();
    });
    
    timer.setRepeats(true);
    timer.start();
  }
  
  public final void stopRefreshCycle() {
    this.timer.stop();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JButton bckBtn;
  private JPanel bottomPanel;
  private JPanel centerPanel;
  private JSeparator comboBtnSep;
  private JPanel directionPanel;
  private JToggleButton f0Btn;
  private JToggleButton f1Btn;
  private JToggleButton f2Btn;
  private JToggleButton f3Btn;
  private JToggleButton f4Btn;
  private JPanel functionBtnPanel;
  private JButton fwdBtn;
  private JComboBox<Locomotive> locoComboBox;
  private JPanel northPanel;
  private Radial speedRadial;
  private JButton stopBtn;
  private JSlider throttleSlider;
  // End of variables declaration//GEN-END:variables
}
