/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lan.wervel.jcs.ui.nb;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import lan.wervel.jcs.common.ControllerProvider;
import lan.wervel.jcs.common.TrackRepository;
import lan.wervel.jcs.server.rmi.ServerInfo;
import org.pmw.tinylog.Logger;

/**
 *
 * @author frans
 */
public class JCSFrame extends JFrame {

  private static final long serialVersionUID = -6526452599753109652L;

  private TrackRepository repository;
  private ControllerProvider controller;

  private Timer timer;

  /**
   * Creates new form JCSFrame
   */
  public JCSFrame() {
    this(null, null);
  }

  public JCSFrame(TrackRepository repository, ControllerProvider controller) {
    this.repository = repository;
    this.controller = controller;

    initComponents();

    if (this.repository != null) {
      intitIconAndTitle();
      
      startRefreshCycle();
    }

    // switchBoardPanel1 = new lan.wervel.jcs.ui.nb.SwitchBoardPanel(0,repository);
    //feedbackPanel1 = new FeedbackPanel(1,repository);
    //locomotivePanel1 = new LocomotivePanel("Loco One",repository);
    //this.driveWayPanel1 = new DriveWayPanel(1,repository);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
   * method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    northPanel = new JPanel();
    switchBoardTab = new JTabbedPane();
    switchBoardPanel1 = new SwitchBoardPanel(0,repository);
    driveWayTab = new JTabbedPane();
    driveWayPanel1 = new DriveWayPanel(0,repository);
    centerPanel = new JPanel();
    locomotivePanel1 = new LocomotivePanel("Loco One",repository);
    locomotivePanel2 = new LocomotivePanel("Loco Two",repository);
    locomotivePanel3 = new LocomotivePanel("Loco Three",repository);
    locomotivePanel4 = new LocomotivePanel("Loco Four",repository);
    southPanel = new JPanel();
    trackPanel = new JPanel();
    trackMonitorPanel1 = new TrackMonitorPanel();
    statusPanel = new JPanel();
    powerOnOffBtn = new JToggleButton();
    jMenuBar1 = new JMenuBar();
    jMenu1 = new JMenu();
    jMenu2 = new JMenu();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setMinimumSize(new Dimension(1300, 900));
    setName("JCSFrame"); // NOI18N
    setPreferredSize(new Dimension(1300, 900));
    setSize(new Dimension(1310, 800));

    northPanel.setName("northPanel"); // NOI18N
    northPanel.setPreferredSize(new Dimension(600, 200));
    northPanel.setLayout(new GridLayout(1, 2));

    switchBoardTab.setMinimumSize(new Dimension(650, 210));
    switchBoardTab.setName("Keyboards"); // NOI18N
    switchBoardTab.setPreferredSize(new Dimension(650, 210));

    switchBoardPanel1.setName("switchBoardPanel1"); // NOI18N
    switchBoardTab.addTab("1 - 16", switchBoardPanel1);

    northPanel.add(switchBoardTab);

    driveWayTab.setName("driveWayTab"); // NOI18N

    driveWayPanel1.setName("driveWayPanel1"); // NOI18N
    driveWayTab.addTab("Driveway", driveWayPanel1);

    northPanel.add(driveWayTab);

    getContentPane().add(northPanel, BorderLayout.NORTH);
    northPanel.getAccessibleContext().setAccessibleParent(this);

    centerPanel.setMinimumSize(new Dimension(1280, 385));
    centerPanel.setName("centerPanel"); // NOI18N
    centerPanel.setPreferredSize(new Dimension(1285, 385));
    centerPanel.setLayout(new GridLayout(1, 4));

    locomotivePanel1.setName("locomotivePanel1"); // NOI18N
    centerPanel.add(locomotivePanel1);

    locomotivePanel2.setName("locomotivePanel2"); // NOI18N
    centerPanel.add(locomotivePanel2);

    locomotivePanel3.setName("locomotivePanel3"); // NOI18N
    centerPanel.add(locomotivePanel3);

    locomotivePanel4.setName("locomotivePanel4"); // NOI18N
    centerPanel.add(locomotivePanel4);

    getContentPane().add(centerPanel, BorderLayout.CENTER);

    southPanel.setName("southPanel"); // NOI18N
    southPanel.setPreferredSize(new Dimension(1100, 290));
    southPanel.setLayout(new BorderLayout());

    trackPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Track Monitor"));
    trackPanel.setMinimumSize(new Dimension(162, 250));
    trackPanel.setName("trackPanel"); // NOI18N
    trackPanel.setPreferredSize(new Dimension(1100, 186));
    trackPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));

    trackMonitorPanel1.setName("trackMonitorPanel1"); // NOI18N
    trackPanel.add(trackMonitorPanel1);

    southPanel.add(trackPanel, BorderLayout.CENTER);

    statusPanel.setName("statusPanel"); // NOI18N
    statusPanel.setPreferredSize(new Dimension(1100, 50));

    powerOnOffBtn.setIcon(new ImageIcon(getClass().getResource("/media/power-on-20px.png"))); // NOI18N
    powerOnOffBtn.setText("Track Power On");
    powerOnOffBtn.setToolTipText("");
    powerOnOffBtn.setMargin(new Insets(2, 5, 2, 5));
    powerOnOffBtn.setMaximumSize(new Dimension(150, 36));
    powerOnOffBtn.setMinimumSize(new Dimension(150, 36));
    powerOnOffBtn.setName("powerOnOffBtn"); // NOI18N
    powerOnOffBtn.setPreferredSize(new Dimension(150, 36));
    powerOnOffBtn.setSelectedIcon(new ImageIcon(getClass().getResource("/media/power-off-20px.png"))); // NOI18N
    powerOnOffBtn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        powerOnOffBtnActionPerformed(evt);
      }
    });
    statusPanel.add(powerOnOffBtn);

    southPanel.add(statusPanel, BorderLayout.SOUTH);

    getContentPane().add(southPanel, BorderLayout.SOUTH);

    jMenuBar1.setName("jMenuBar1"); // NOI18N

    jMenu1.setText("File");
    jMenu1.setName("jMenu1"); // NOI18N
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Edit");
    jMenu2.setName("jMenu2"); // NOI18N
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void powerOnOffBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_powerOnOffBtnActionPerformed
    Logger.trace(evt.getActionCommand());
    if (this.powerOnOffBtn.isSelected()) {
      this.controller.powerOn();
      this.powerOnOffBtn.setText("Track Power Off");
    } else {
      this.controller.powerOff();
      this.powerOnOffBtn.setText("Track Power On");
    }
  }//GEN-LAST:event_powerOnOffBtnActionPerformed

  private boolean exists(String className) {
    try {
      Class.forName(className, false, null);
      return true;
    } catch (ClassNotFoundException exception) {
      return false;
    }
  }

  private String getTitleString() {
    if (this.repository != null && this.repository.getServerInfo() != null) {

      ServerInfo si = this.repository.getServerInfo();
      String host = si.getHostName();
      String version = si.getServerVersion();
      String provider = si.getProviderName();
      return "JCS - Server - " + host + " Provider - " + provider + " Server Version - " + version;
    } else {
      return "JCS - NOT Connected!";
    }
  }

  private void setIcon(BufferedImage icn) {
    // Mac OS specific, must be done using reflection otherwise it will not compile
    // on all platforms
    if (exists("com.apple.eawt.Application")) {
      try {
        Class<?> applicationClass = this.getClass().getClassLoader().loadClass("com.apple.eawt.Application");
        Method getApplicationMethod = applicationClass.getMethod("getApplication");
        Method setDockIconImageMethod = applicationClass.getMethod("setDockIconImage", java.awt.Image.class);
        Object macApp = getApplicationMethod.invoke(null);
        setDockIconImageMethod.invoke(macApp, icn);
      } catch (ClassNotFoundException | IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        Logger.error(e);
      }
    }
  }

  private void getIcon() {
    try {
      BufferedImage img = ImageIO.read(getClass().getResource("/media/jcs-train-64.png"));

      if (exists("com.apple.eawt.Application")) {
        setIcon(img);
      }
    } catch (IOException ioe) {
      Logger.error(ioe);
    }
  }

  private void intitIconAndTitle() {
    if (exists("com.apple.eawt.Application")) {
      getIcon();
    } else {
      setIconImage(Toolkit.getDefaultToolkit().getImage(lan.wervel.jcs.ui.nb.JCSFrame.class.getResource("/media/jcs-train-64.png")));
    }

    this.setTitle(getTitleString());
    this.setName(this.getTitle());
  }

  public void refresh() {

    if (controller.isPowerOn()) {
      powerOnOffBtn.setText("Track Power Off");
      powerOnOffBtn.setSelected(true);
    } else {
      powerOnOffBtn.setText("Track Power On");
      powerOnOffBtn.setSelected(false);
    }

  }

  public final void startRefreshCycle() {
    Logger.debug(this.getName() + " Starting refresh cycle...");
    timer = new Timer(500, (ActionEvent e) -> {
      refresh();
    });

    timer.setRepeats(true);
    timer.start();
  }

  public final void stopRefreshCycle() {
    this.timer.stop();
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JPanel centerPanel;
  private DriveWayPanel driveWayPanel1;
  private JTabbedPane driveWayTab;
  private JMenu jMenu1;
  private JMenu jMenu2;
  private JMenuBar jMenuBar1;
  private LocomotivePanel locomotivePanel1;
  private LocomotivePanel locomotivePanel2;
  private LocomotivePanel locomotivePanel3;
  private LocomotivePanel locomotivePanel4;
  private JPanel northPanel;
  private JToggleButton powerOnOffBtn;
  private JPanel southPanel;
  private JPanel statusPanel;
  private SwitchBoardPanel switchBoardPanel1;
  private JTabbedPane switchBoardTab;
  private TrackMonitorPanel trackMonitorPanel1;
  private JPanel trackPanel;
  // End of variables declaration//GEN-END:variables
}
